{
    "info": {
        "version": "7.3.0-SNAPSHOT", 
        "description": "# Identity Overview", 
        "title": "Identity Service API"
    }, 
    "paths": {
        "/api/authorization/roles/{roleId}/permissions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Return all the permissions of a role, taken from the permissions directly assigned to the role and form the permissions of the role's role extensions.", 
                "parameters": [
                    {
                        "description": "the id of the role", 
                        "required": true, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return all permissions of a role"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/authorities/extended": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Retrieves the extended authorities that a collection of principal references hold system wide, including effective roles and effective permissions.\n\nIf some principals in 'refs' are not found, the operation doesn't fail with a 404, but instead returns a result for the ones that were found.", 
                "parameters": [
                    {
                        "description": "the tenant of the principal reference(s)", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PrincipalRef"
                            }, 
                            "type": "array"
                        }, 
                        "description": "the collection of principal reference(s).", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "list of RoleType's to include in the result", 
                        "items": {
                            "enum": [
                                "SYSTEM", 
                                "TENANT", 
                                "SCOPE"
                            ], 
                            "type": "string"
                        }, 
                        "required": false, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": ""
                    }
                ], 
                "summary": "Return the extended authorities for principals"
            }
        }, 
        "/api/authorization/roles": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Returns a page of the resources"
            }
        }, 
        "/api/data-service/schema/{classId}/types/{typeFilter}/{fieldId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "description": "Get the permissible values of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of a field on the schema of the specified object class.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the permissible values of a field in the specified schema"
            }
        }, 
        "/api/authorization/roles/assignable": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Return the roles that the current user has permissions to assign to other users.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return the roles to assign to other users"
            }
        }, 
        "/api/tenants/{tenantId}/groups/{groupId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/group"
                        }
                    }
                }, 
                "description": "Updates a Custom group. Only the group data is updated, all members are untouched.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the principal id of the group to update", 
                        "required": true, 
                        "type": "string", 
                        "name": "groupId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/group"
                        }, 
                        "description": "custom grroup data to update", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Update a custom group"
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful"
                    }
                }, 
                "description": "Adds a set of groups and users to a parent group. Each group and element must be already existing, otherwise the request will fail. This request will append the provided relations to the already existing ones.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the principal id of the parent group", 
                        "required": true, 
                        "type": "string", 
                        "name": "groupId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/wrapper"
                        }, 
                        "description": "wrapper of the incoming groups and users", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Add users/grops to a parent group."
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "delete is successful"
                    }
                }, 
                "description": "Delete a custom group. All child custom groups are preserved and are moved at the top of the tree.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "principal id of the group to be deleted", 
                        "required": true, 
                        "type": "string", 
                        "name": "groupId", 
                        "in": "path"
                    }
                ], 
                "summary": "Delete a custom group"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/group"
                        }
                    }
                }, 
                "description": "Retrieve a group by its id.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the principal id of the group", 
                        "required": true, 
                        "type": "string", 
                        "name": "groupId", 
                        "in": "path"
                    }
                ], 
                "summary": "Retrieve a group."
            }
        }, 
        "/api/tenants/{tenantId}/subtenants/{id}/roles/{scopeRoleRef}/principals": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Principals successfully added to the business group role."
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "addPrincipalsToBusinessGroupRole", 
                "description": "Adds the provided principals to the identified business group role.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "the business group role name to add the provided principal to", 
                        "required": true, 
                        "type": "string", 
                        "name": "scopeRoleRef", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/principalId"
                            }, 
                            "type": "array"
                        }, 
                        "description": "the principals to add to the provided subtenant role", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Add principals to a business group role"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PagePrincipalData"
                        }
                    }
                }, 
                "operationId": "getBusinessGroupPrincipalWithRole", 
                "description": "Finds all principals within a business group who are assigned a given role.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "find all users who have this business group role name", 
                        "required": true, 
                        "type": "string", 
                        "name": "scopeRoleRef", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Find business group principals assigned with a role"
            }
        }, 
        "/api/tenants/{tenantId}/directories/connectivity": {
            "put": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the target tenant id for the provided identity store", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/directory"
                        }, 
                        "description": "the identity store configuration to test", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Test the connectivity to an identity store"
            }
        }, 
        "/api/authorization/permissions/{permissionId}/permissions/admin": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "addEmptyAdminPermission", 
                "description": "Adds an empty permission to the list of admin permissions of another permission.\nUsed for testing purposes only.", 
                "parameters": [
                    {
                        "description": "the id of the permission to update", 
                        "required": true, 
                        "type": "string", 
                        "name": "permissionId", 
                        "in": "path"
                    }
                ], 
                "summary": "Add an empty permission to admin permissions"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "removeEmptyAdminPermission", 
                "description": "Removes an empty permission from the list of admin permissions of another permission. Used for testing purposes only.", 
                "parameters": [
                    {
                        "description": "the id of the permission to update", 
                        "required": true, 
                        "type": "string", 
                        "name": "permissionId", 
                        "in": "path"
                    }
                ], 
                "summary": "Delete an empty permission from admin permissions"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "getPermissionAdminPermissions", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the permission", 
                        "required": true, 
                        "type": "string", 
                        "name": "permissionId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return the admin permissions of a permission"
            }
        }, 
        "/api/tenants/{tenantId}/subtenants/principals": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PagePrincipalData"
                        }
                    }
                }, 
                "operationId": "returnBusinessGroupsPrincipals", 
                "description": "Return a list of principals for the specified list of business groups, optionally filtered by role name.\nAll business groups must belong to the same tenant.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the filtering criteria (optional)", 
                        "required": false, 
                        "type": "string", 
                        "name": "criteria", 
                        "in": "query"
                    }, 
                    {
                        "description": "the filtering role (optional)", 
                        "required": false, 
                        "type": "string", 
                        "name": "role", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "uuid"
                            }, 
                            "type": "array"
                        }, 
                        "description": "the list of business group ids", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return business groups principals"
            }
        }, 
        "/api/authorization/roles/{roleId}/extensions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the role", 
                        "required": true, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return the role extension assigned to a role"
            }
        }, 
        "/api/authorization/scopes/types/{typeId}/permissions/admin": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "addEmptyScopeTypeAdminPermission", 
                "description": "Add an empty permission to the list of admin permissions of a scope type.\nUsed for testing purposes only.", 
                "parameters": [
                    {
                        "description": "the id of the scope type", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeId", 
                        "in": "path"
                    }
                ], 
                "summary": "Add empty permission to a scope type"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "removeEmptyScopeTypeAdminPermission", 
                "description": "Delete an empty permission from the list of admin permissions of a scope type.\nUsed for testing purposes only.", 
                "parameters": [
                    {
                        "description": "the id of the scope type", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeId", 
                        "in": "path"
                    }
                ], 
                "summary": "Delete empty permission from a scope type"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Return the prerequisite admin permissions associated with the requested scope.", 
                "parameters": [
                    {
                        "description": "the id of the scope type", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return admin permission for a scope type"
            }
        }, 
        "/api/tenants/{tenantId}/subtenants/roles/{scopeRoleRef}/principals": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "findPrincipalsFromBusinessGroupRole", 
                "description": "Find all principals within the provided business groups who are assigned to a provided role.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "find all principals who have the provided business group role", 
                        "required": true, 
                        "type": "string", 
                        "name": "scopeRoleRef", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "uuid"
                            }, 
                            "type": "array"
                        }, 
                        "description": "list of business group ids", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "whether to retrieve the principals display name and type or not. Fetching the additional details will increase the payload and system utilization.", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "", 
                        "in": "query"
                    }
                ], 
                "summary": "Find principals assigned to a role"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/authorities/extended/permissions": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Retrieves the extended authorities that a collection of principal references hold system wide, including effective roles and effective permissions.\n\nIf some principals in 'refs' are not found, the operation doesn't fail with a 404, but instead returns a result for the ones that were found.", 
                "parameters": [
                    {
                        "description": "the tenant of the principal reference(s)", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PrincipalRef"
                            }, 
                            "type": "array"
                        }, 
                        "description": "the collection of principal reference(s).", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "list of RoleType's to include in the result", 
                        "items": {
                            "enum": [
                                "SYSTEM", 
                                "TENANT", 
                                "SCOPE"
                            ], 
                            "type": "string"
                        }, 
                        "required": false, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": ""
                    }
                ], 
                "summary": "Return the extended authorities permissions for principals"
            }
        }, 
        "/api/data-service/schema/{classId}/default": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "description": "Get the schema for the specified object class.", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }
                ], 
                "summary": "Get the schema for the specified object class"
            }
        }, 
        "/api/authorization/roles/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The id of the resource", 
                        "required": true, 
                        "type": "object", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Returns the resource associated with the given id"
            }
        }, 
        "/api/tenants/{tenantId}/groups/{groupId}/parents": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Return all parent groups of a child group. Groups are iterated recursively up the tree.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "principal id of child group", 
                        "required": true, 
                        "type": "string", 
                        "name": "groupId", 
                        "in": "path"
                    }, 
                    {
                        "enum": [
                            "SSO", 
                            "CUSTOM"
                        ], 
                        "description": "if not null, filter the results by the provided group type", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "groupType"
                    }
                ], 
                "summary": "Return all parent groups"
            }
        }, 
        "/api/tenants/{tenantId}/subtenants/{id}/principals/{principalId}/roles": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageSubtenantRole"
                        }
                    }
                }, 
                "operationId": "returnBusinesGroupsPrincipalRoles", 
                "description": "Return a list of business group roles that the provided principal has in the provided business group", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "the principal id", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return roles for principal"
            }
        }, 
        "/api/tenants/{tenantId}/subtenants": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Business group successfully created."
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/subtenant"
                        }
                    }
                }, 
                "operationId": "createBusinessGroup", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/subtenant"
                        }, 
                        "description": "the business group to create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create a business group"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageSubtenant"
                        }
                    }
                }, 
                "operationId": "getBusinessGroups", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "List all business groups"
            }
        }, 
        "/api/authorization/resource-types/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "updateResourceType", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the resource type to update or create", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ResourceTypeRef"
                        }, 
                        "description": "the resource type to update or create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Update or create a resource type by its id"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The id of the resource", 
                        "required": true, 
                        "type": "object", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Returns the resource associated with the given id"
            }
        }, 
        "/api/tokens/suiteToken": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/token"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/suiteTokenRequest"
                        }, 
                        "description": "The requested token details.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Returns a token matching the provided request details."
            }
        }, 
        "/api/tenants/{tenantId}/subtenants/{id}/roles/{scopeRoleRef}/principals/{principalId}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "User successfully removed from a business group role."
                    }
                }, 
                "operationId": "removePrincipalFromBusinessGroupRole", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "the business group role name to add the principal to", 
                        "required": true, 
                        "type": "string", 
                        "name": "scopeRoleRef", 
                        "in": "path"
                    }, 
                    {
                        "description": "the principals to remove from the business group role", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Remove a principal from a business group role"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/scopes/{scopeId}/resources/{resourceId}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "removeResourceFromScope", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "scopeId"
                    }, 
                    {
                        "description": "the id of the resource to remove", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }
                ], 
                "summary": "Remove resource from a scope"
            }
        }, 
        "/api/tenants/{tenantId}/subtenants/{id}/principals": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PagePrincipalData"
                        }
                    }
                }, 
                "operationId": "returnBusinessGroupPrincipals", 
                "description": "Return a list of principals for the specified business group, optionally filtered by role name.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "the filtering criteria (optional)", 
                        "required": false, 
                        "type": "string", 
                        "name": "criteria", 
                        "in": "query"
                    }, 
                    {
                        "description": "the filtering role (optional)", 
                        "required": false, 
                        "type": "string", 
                        "name": "role", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return business group principals"
            }
        }, 
        "/api/authorization/roles/{roleId}/permissions/assigned": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "addEmptyRolePermission", 
                "description": "Adds an empty permission to the list of permissions of a role.\nUsed for testing purposes only.", 
                "parameters": [
                    {
                        "description": "the id of the role", 
                        "required": true, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "path"
                    }
                ], 
                "summary": "Add an empty permission to a role."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "removeRoleEmptyPermission", 
                "description": "Remove an empty permission from the list of permissions of a role.\nUsed for testing purposes only.", 
                "parameters": [
                    {
                        "description": "the id of the role", 
                        "required": true, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "path"
                    }
                ], 
                "summary": "Remove an empty permission from a role."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Return the permissions directly assigned to a role.", 
                "parameters": [
                    {
                        "description": "the id of the role", 
                        "required": true, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return the permissions assigned to a role"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/principals/{principalId}/permissions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "getEffectivePermissionsForPrincipal", 
                "description": "Retrieves the effective permissions a principal holds system wide, determined by their cumulative system, tenant and scope roles. It's possible to filter the permissions by type(s), and the type and/or id of the scope for scope roles.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the types of role to filter on", 
                        "items": {
                            "enum": [
                                "SYSTEM", 
                                "TENANT", 
                                "SCOPE"
                            ], 
                            "type": "string"
                        }, 
                        "required": false, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "roleType"
                    }, 
                    {
                        "description": "the type of scope type to filter on", 
                        "required": false, 
                        "type": "string", 
                        "name": "scopeType", 
                        "in": "query"
                    }, 
                    {
                        "description": "the id of the scope to filter on", 
                        "required": false, 
                        "type": "string", 
                        "name": "scopeId", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return the effective permissions for principal"
            }
        }, 
        "/api/data-service/data/{classId}/{id}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/DynamicDataResponse"
                        }
                    }
                }, 
                "description": "Get a set of data for the specified object.", 
                "parameters": [
                    {
                        "description": "The identifier of the type of object to get data for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique id of the object to get data for. This should be sufficient to identify the object given classId.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/DynamicDataRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get a set of data for the specified object"
            }
        }, 
        "/api/tenants/{tenantId}/subtenants/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/subtenant"
                        }
                    }
                }, 
                "operationId": "updateBusinessGroup", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/subtenant"
                        }, 
                        "description": "the business group to update", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Update a business group"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "Business group deleted successfully."
                    }
                }, 
                "operationId": "deleteBusinessGroup", 
                "description": "Delete a business group by its id", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id to delete", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "summary": "Delete a business group"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/subtenant"
                        }
                    }
                }, 
                "operationId": "getBusinessGroup", 
                "description": "Get a business group by its id", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id to retrieve", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "summary": "Get a business group"
            }
        }, 
        "/api/authorization/scopes/types/{typeId}/permissions/admin/{adminPermissionId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "addScopeTypeAdminPermission", 
                "description": "Add a permission to the list of admin permissions of a scope type.", 
                "parameters": [
                    {
                        "description": "the id of the scope type", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the permission to add", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "adminPermissionId"
                    }
                ], 
                "summary": "Add permission to a scope type"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "removeScopeTypeAdminPermission", 
                "description": "Delete a permission from the list of admin permissions of a scope type.", 
                "parameters": [
                    {
                        "description": "the id of the scope type", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the permission to add", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "adminPermissionId"
                    }
                ], 
                "summary": "Delete permission from a scope type"
            }
        }, 
        "/api/tenants/{tenantId}/subtenants/{id}/roles/{scopeRoleRef}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "Role successfully removed from the business group."
                    }
                }, 
                "operationId": "removeBusinessGroupRole", 
                "description": "Remove the specified business group role from the given business group", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "the name of the business group role to remove", 
                        "required": true, 
                        "type": "string", 
                        "name": "scopeRoleRef", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Remove role from a business group"
            }
        }, 
        "/api/authorization/roles/extensions/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "updateOrCreateRoleExtension", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the role extension", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/RoleExtension"
                        }, 
                        "description": "the role extension to update or create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Update or create a role extension"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The id of the resource", 
                        "required": true, 
                        "type": "object", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Returns the resource associated with the given id"
            }
        }, 
        "/api/tenants/solutions": {
            "put": {
                "responses": {
                    "204": {
                        "description": "Update is successful"
                    }
                }, 
                "description": "Update service client secret (or in case of SSO2 solution user certificate) with the target tenant", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/solutionInfo"
                        }, 
                        "description": "Solution info data", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Update service client secret"
            }
        }, 
        "/api/data-service/schema/{classId}/default/{fieldId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "description": "Get the permissible values of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of a field on the schema of the specified object class.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the permissible values of a field in the specified schema"
            }
        }, 
        "/api/authorization/scopes/types/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "updateScopeType", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the scope type to update or create", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ScopeType"
                        }, 
                        "description": "the scope type to update or create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create or update a scope type by id"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The id of the resource", 
                        "required": true, 
                        "type": "object", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Returns the resource associated with the given id"
            }
        }, 
        "/api/authorization/resource-types": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Returns a page of the resources"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/principals/{principalId}/scopes/{scopeId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Scope"
                        }
                    }
                }, 
                "description": "Retrieve a specific scope a principal is included in system wide.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "scopeId"
                    }
                ], 
                "summary": "Return a specific scope for principal"
            }
        }, 
        "/api/tenants/{tenantId}/directories/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "create/update is successful"
                    }, 
                    "400": {
                        "description": "creation/update of identity store failed."
                    }
                }, 
                "operationId": "updateDirectory", 
                "description": "Creates or update a given IdentityStore. Use the returned instance for further operations as the save operation might have changed the entity instance completely.", 
                "parameters": [
                    {
                        "description": "the target tenant id for the provided identity store", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the domain of the identity store", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/directory"
                        }, 
                        "description": "the identity store to update or create\n\n**NOTE** the fields ~~*groupBaseSearchDn*~~ and ~~*userBaseSearchDn*~~ are superseded by the corresponding array fields *groupBaseSearchDns* and *userBaseSearchDns* and thus deprecated, any value set to those fields will be ignored", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create or update an identity store"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "404": {
                        "description": "identity store with the provided id was not found."
                    }, 
                    "204": {
                        "description": "delete is successful"
                    }, 
                    "400": {
                        "description": "if the message equals 'cms.delete.directory.config.forbidden.associated.connector.instance.domain.joined' this means that the delete operation has failed when deleting a Native AD in the default tenant. In this case it is required to first leave the domain manually and then perform the delete operation."
                    }
                }, 
                "operationId": "deleteDirectory", 
                "description": "Delete an existing identity store identified by its id.", 
                "parameters": [
                    {
                        "description": "the target tenant id for the provided identity store", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the domain of the identity store", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "perform the deletion even if there are business groups referencing any objects from the identity store", 
                        "default": false, 
                        "required": true, 
                        "in": "query", 
                        "type": "boolean", 
                        "name": "ignoreBusinessGroupReferences"
                    }
                ], 
                "summary": "Delete an identity store"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/directory"
                        }
                    }
                }, 
                "operationId": "getDirectory", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the target tenant id for the provided identity store", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "pattern": ".+$", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Retrieve an identity store by its id"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/principals/{principalId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "principalId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/principal"
                        }, 
                        "description": "the principal extension to create or update", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create or update a principal extension"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "Deletes the principal extension associated with a principal id.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "principalId"
                    }
                ], 
                "summary": "Delete a principal extension"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/principal"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "principalId"
                    }
                ], 
                "summary": "Return a principal extension by id"
            }
        }, 
        "/api/authorization/permissions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Returns a page of the resources"
            }
        }, 
        "/api/authorization/roles/extensions/{extensionId}/permissions/assigned/{permissionId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "Adds a permission to the list of permissions of a role extension.", 
                "parameters": [
                    {
                        "description": "the id of the role extension", 
                        "required": true, 
                        "type": "string", 
                        "name": "extensionId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the permission to add", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "permissionId"
                    }
                ], 
                "summary": "Add a permission to a role extension"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "Removes a permission from the list of permissions of a role extension.", 
                "parameters": [
                    {
                        "description": "the id of the role extension to update", 
                        "required": true, 
                        "type": "string", 
                        "name": "extensionId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the permission to remove", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "permissionId"
                    }
                ], 
                "summary": "Remove a permission from a role extension"
            }
        }, 
        "/api/tenants/{tenantId}/directories": {
            "post": {
                "responses": {
                    "201": {
                        "description": "creation is successful"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/directory"
                        }
                    }, 
                    "400": {
                        "description": "creation of identity store failed."
                    }
                }, 
                "operationId": "createDirectory", 
                "description": "Create an identity store. Http status 400 will be returned if an IdentityStore with the given domain exist for the target tenant.", 
                "parameters": [
                    {
                        "description": "the target tenant id for the provided identity store", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/directory"
                        }, 
                        "description": "the identity store to create\n\n**NOTE** the fields ~~*groupBaseSearchDn*~~ and ~~*userBaseSearchDn*~~ are superseded by the corresponding array fields *groupBaseSearchDns* and *userBaseSearchDns* and thus deprecated, any value set to those fields will be ignored", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create an identity store"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageIdentityStore"
                        }
                    }
                }, 
                "operationId": "getDirectories", 
                "description": "Return the requested page of identity stores (aka: directories) for the provided tenant", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return identity stores (aka: directories)"
            }
        }, 
        "/api/tenants/{tenantId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "updateTenant", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/Tenant"
                        }, 
                        "description": "the tenant to update or create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create or update a tenant."
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "Tenant deleted successfully"
                    }
                }, 
                "operationId": "deleteTenant", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }
                ], 
                "summary": "Delete a tenant by its id"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Tenant"
                        }
                    }
                }, 
                "operationId": "getTenant", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }
                ], 
                "summary": "Return a tenant by its id."
            }
        }, 
        "/api/authorization/tenants/{tenantId}/acl": {
            "put": {
                "responses": {
                    "204": {
                        "description": "operation is successful"
                    }
                }, 
                "description": "Set a collection of ACL entries to the specified tenant after removing the tenant's existing ACL entries.", 
                "parameters": [
                    {
                        "description": "the tenant which the ACL entry belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/AclEntry"
                            }, 
                            "type": "array"
                        }, 
                        "description": "collection of ACL entries to set", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Set ACL of a tenant"
            }, 
            "post": {
                "responses": {
                    "204": {
                        "description": "operation is successful"
                    }
                }, 
                "description": "Adds a collection of ACL entries to the specified tenant.", 
                "parameters": [
                    {
                        "description": "the tenant which the ACL entry belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/AclEntry"
                            }, 
                            "type": "array"
                        }, 
                        "description": "collection of ACL entries", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Add ACL to a tenant"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "operation is successful"
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant which the ACL entry belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": false, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "query"
                    }, 
                    {
                        "description": "the id of the resource", 
                        "required": false, 
                        "type": "string", 
                        "name": "resourceRefId", 
                        "in": "query"
                    }, 
                    {
                        "description": "the id of the role", 
                        "required": false, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "query"
                    }
                ], 
                "summary": "Remove ACL entries from a tenant"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageAclEntry"
                        }
                    }
                }, 
                "description": "Retrieves ACL entries from the specified tenant. The result can be filtered directly by principal, resource and/or role. If no filter is specified a custom query can be provided within the pagination information.", 
                "parameters": [
                    {
                        "description": "the tenant id to find ACL entries for", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": false, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "query"
                    }, 
                    {
                        "description": "the id of the resource", 
                        "required": false, 
                        "type": "string", 
                        "name": "resourceRefId", 
                        "in": "query"
                    }, 
                    {
                        "description": "the id of the role", 
                        "required": false, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return ACL for a tenant"
            }
        }, 
        "/api/tenants/{tenantId}/groups/{parentGroupId}/groups/{groupId}": {
            "delete": {
                "responses": {
                    "404": {
                        "description": "group with the provided id is not found"
                    }, 
                    "204": {
                        "description": "delete is successful"
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Distinguished name of the parent group", 
                        "required": true, 
                        "type": "string", 
                        "name": "parentGroupId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Distinguished name of the group to delete", 
                        "required": true, 
                        "type": "string", 
                        "name": "groupId", 
                        "in": "path"
                    }
                ], 
                "summary": "Delete a SSO group from a custom group"
            }
        }, 
        "/api/data-service/schema/{classId}/default/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "description": "Get the state of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the state of a field in the specified schema"
            }
        }, 
        "/api/tenants/{tenantId}/groups/{groupId}/subtenants": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "principal id of the group to find business groups for", 
                        "required": true, 
                        "type": "string", 
                        "name": "groupId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the role to filter", 
                        "required": false, 
                        "type": "string", 
                        "name": "role", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Find business groups of a group"
            }
        }, 
        "/api/authorization/roles/{roleId}/permissions/admin": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "getRoleAdminPermissions", 
                "description": "Return all the admin permissions of a role, computed as the union of the admin permissions of all the admin permissions of the role's permissions.", 
                "parameters": [
                    {
                        "description": "the id of the role", 
                        "required": true, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return the admin permissions of a role"
            }
        }, 
        "/api/tenants/{tenantId}/principals": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Operation is successful.", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "404": {
                        "description": "Partial result is returned Some directories could not be contacted."
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/principalId"
                            }, 
                            "type": "array"
                        }, 
                        "description": "list of principal ids to fetch data for", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Return users by ids."
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "Operation is successful.", 
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }, 
                    "405": {
                        "description": "in case of SSO2 deployment."
                    }
                }, 
                "description": "Create a local user in vIDM. Applicable only in vIDM mode. Returns 405 Method Not Allowed in SSO2 mode.", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/user"
                        }, 
                        "description": "the user to create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create a local user."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Below are the priorities for each search option:\n- if 'role' is set, find all users matching that role and return\n- else use 'criteria' to search either the account name, first name, last name, or description of the account. Filter results based on 'permissionFiltered' (if provided).\n\nParameters 'page', '$skip' and '$filter' are not taken into account. Use 'limit' and 'criteria' instead.", 
                "parameters": [
                    {
                        "description": "the url of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the search criteria", 
                        "required": false, 
                        "type": "string", 
                        "name": "criteria", 
                        "in": "query"
                    }, 
                    {
                        "description": "the domain in which the service will search", 
                        "required": false, 
                        "type": "string", 
                        "name": "domain", 
                        "in": "query"
                    }, 
                    {
                        "description": "the parent group id to search from", 
                        "required": false, 
                        "type": "string", 
                        "name": "parentGroup", 
                        "in": "query"
                    }, 
                    {
                        "description": "optional filter based on assigned status (either 'NOT_ASSIGNED' or 'ASSIGNED'", 
                        "required": false, 
                        "type": "string", 
                        "name": "permissionFiltered", 
                        "in": "query"
                    }, 
                    {
                        "description": "find users who have the provided role. All other search parameters ignored if this is set", 
                        "required": false, 
                        "type": "string", 
                        "name": "role", 
                        "in": "query"
                    }, 
                    {
                        "description": "If 'true' all child groups will be expanded and search", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "expandGroups", 
                        "in": "query"
                    }, 
                    {
                        "description": "If 'true' only local users will be searched. Supported in Horizon mode only", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "localUsersOnly", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "FindsXXX regular users in one of the identity providers configured for the tenant."
            }
        }, 
        "/api/authorization/tenants/{tenantId}/resources": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "deleteAllResources", 
                "description": "Deletes resources within the specified tenant.\nCan delete resources based on ODATA query options.", 
                "parameters": [
                    {
                        "description": "the tenant which the resources belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Delete resources"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "returnResources", 
                "description": "Return resource for the specified tenant.", 
                "parameters": [
                    {
                        "description": "the tenant id to find resource for", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return resources"
            }
        }, 
        "/api/authorization/roles/{roleId}/permissions/assigned/{permissionId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "addRolePermission", 
                "description": "Adds a permission to the list of permissions of a role.", 
                "parameters": [
                    {
                        "description": "the id of the role", 
                        "required": true, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the permission to add", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "permissionId"
                    }
                ], 
                "summary": "Add a permission to a role."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "removeRolePermission", 
                "description": "Remove permission from the list of permissions of a role.", 
                "parameters": [
                    {
                        "description": "the id of the role", 
                        "required": true, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the permission to remove", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "permissionId"
                    }
                ], 
                "summary": "Remove permission from a role."
            }
        }, 
        "/api/authorization/roles/extensions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Returns a page of the resources"
            }
        }, 
        "/api/data-service/schema/{classId}/types/{typeFilter}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "description": "This returns the schema of a particular type within a class of object.", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }
                ], 
                "summary": "Get the schema for the specified object type"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/principals/{principalId}/scopes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Return the scopes a principal is included in system wide.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return the scopes for principal"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/scopes/{scopeId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "updateScope", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope to create or update", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "scopeId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/Scope"
                        }, 
                        "description": "the scope to create or update", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create or update a scope by id"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "deleteScope", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope to delete", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "scopeId"
                    }
                ], 
                "summary": "Delete a scope"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Scope"
                        }
                    }
                }, 
                "operationId": "returnScope", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope to return", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "scopeId"
                    }
                ], 
                "summary": "Return scope by id"
            }
        }, 
        "/api/tokens/{tokenId}": {
            "head": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "404": {
                        "description": "Token is invalid or has expired."
                    }, 
                    "204": {
                        "description": "Token is valid."
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The token id associated with UserTokenResource.", 
                        "required": true, 
                        "type": "string", 
                        "name": "tokenId", 
                        "in": "path"
                    }
                ], 
                "summary": "Validates if a given token is still valid and not expired."
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "UserTokenResource is deleted successfully."
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The token id associated with the UserTokenResource that should be deleted.", 
                        "required": true, 
                        "type": "string", 
                        "name": "tokenId", 
                        "in": "path"
                    }
                ], 
                "summary": "Deletes the UserTokenResource associated with the provided token id."
            }
        }, 
        "/api/tokens": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/token"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/auth"
                        }, 
                        "description": "The user credentials.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Returns a token associated with the provided credentials."
            }
        }, 
        "/api/tenants/{tenantId}/principals/{userId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Operation is successful.", 
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }, 
                    "405": {
                        "description": "in case of SSO2 deployment."
                    }
                }, 
                "description": "Update a local user in vIDM. Applicable only in vIDM mode. Returns 405 Method Not Allowed in SSO2 mode.", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the principal id of the user to update", 
                        "required": true, 
                        "type": "string", 
                        "name": "userId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/user"
                        }, 
                        "description": "the user update data", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Update a local user."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Operation is successful."
                    }, 
                    "405": {
                        "description": "in case of SSO2 deployment."
                    }
                }, 
                "description": "Delete a local user in vIDM. Applicable only in vIDM mode. Returns 405 Method Not Allowed in SSO2 mode.", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the principal id of the user to delete", 
                        "required": true, 
                        "type": "string", 
                        "name": "userId", 
                        "in": "path"
                    }
                ], 
                "summary": "Delete a local user."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Operation is successful.", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "404": {
                        "description": "User is not found."
                    }
                }, 
                "description": "Find a single user by id. This method performs a search in SSO", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the principal id (user@domain) of the user", 
                        "required": true, 
                        "type": "string", 
                        "name": "userId", 
                        "in": "path"
                    }
                ], 
                "summary": "Return a user"
            }
        }, 
        "/api/authorization/permissions/{permissionId}/permissions/admin/{adminPermissionId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "Add a permission to the list of admin permissions of another permission.", 
                "parameters": [
                    {
                        "description": "the id of the permission to update", 
                        "required": true, 
                        "type": "string", 
                        "name": "permissionId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the admin permission to add", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "adminPermissionId"
                    }
                ], 
                "summary": "Add a permission to admin permissions"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "Removes a permission from the list of admin permissions of another permission.", 
                "parameters": [
                    {
                        "description": "the id of the permission to update", 
                        "required": true, 
                        "type": "string", 
                        "name": "permissionId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id permission to remove", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "adminPermissionId"
                    }
                ], 
                "summary": "Delete a permission from admin permissions"
            }
        }, 
        "/api/tenants/{tenantId}/subtenants/{id}/roles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Roles successfully added to the business group."
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "addBusinessGroupRoles", 
                "description": "Adds a list of business group roles to the already existing roles of the specified business group.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/subtenantRole"
                            }, 
                            "type": "array"
                        }, 
                        "description": "the roles to add", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Add roles to a business group"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageSubtenantRole"
                        }
                    }
                }, 
                "operationId": "getBusinessGroupRoles", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the business group id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return business group roles"
            }
        }, 
        "/api/tenants/{tenantId}/relyingparty": {
            "put": {
                "responses": {
                    "204": {
                        "description": "Relying party registered successfully"
                    }
                }, 
                "description": "Register or update a relying party with the target tenant", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/relyingParty"
                        }, 
                        "description": "relying party data", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Register or update relying party"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/principals/{principalId}/roles": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "Sets the specified System and Tenant role(s) to a principal. As result the principal will contain only that set of System and Tenant roles.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array"
                        }, 
                        "description": "collection with the id(s) of the role(s) to set", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Set System and Tenant roles(s) to a principal"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "removeEmptyPrincipalRole", 
                "description": "Remove an empty System or Tenant role from a principal.\nUsed for testing purposes only.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }
                ], 
                "summary": "Remove an empty System or Tenant role from a principal"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Retrieves the effective roles a principal holds system wide. It's possible to filter the roles by type(s), and the type and/or id of the scope for scope roles.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the types of role to filter on", 
                        "items": {
                            "enum": [
                                "SYSTEM", 
                                "TENANT", 
                                "SCOPE"
                            ], 
                            "type": "string"
                        }, 
                        "required": false, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "type"
                    }, 
                    {
                        "description": "the types of role to filter on", 
                        "required": false, 
                        "type": "string", 
                        "name": "scopeType", 
                        "in": "query"
                    }, 
                    {
                        "description": "the id of the scope to filter on", 
                        "required": false, 
                        "type": "string", 
                        "name": "scopeId", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return the effective roles for principal"
            }
        }, 
        "/api/data-service/schema/{classId}/instances/{id}/{fieldId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "description": "Get the permissible values of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique identifier of an instance of the object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of a field on the schema of the specified object class.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the permissible values of a field in the specified schema"
            }
        }, 
        "/api/tokens/{tokenId}/securityContext": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/userSecurityContext"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The token id associated with the UserTokenResource.", 
                        "required": true, 
                        "type": "string", 
                        "name": "tokenId", 
                        "in": "path"
                    }
                ], 
                "summary": "Returns the UserSecurityContext associated with the provided token id."
            }
        }, 
        "/api/authorization/scopes/types": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Returns a page of the resources"
            }
        }, 
        "/api/authorization/permissions/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "updatePermission", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the permission to be created or updated", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }, 
                        "description": "the permission to use for the operation", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create or update a permission"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The id of the resource", 
                        "required": true, 
                        "type": "object", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Returns the resource associated with the given id"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/authorities/roles": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Retrieves the authorities that a collection of principal references hold system wide, including effective roles and effective permissions.\n\nIf some principals in 'refs' are not found, the operation doesn't fail with a 404, but instead returns a result for the ones that were found.", 
                "parameters": [
                    {
                        "description": "the tenant of the principal reference(s)", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PrincipalRef"
                            }, 
                            "type": "array"
                        }, 
                        "description": "the collection of principal reference(s).", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "list of RoleType's to include in the result", 
                        "items": {
                            "enum": [
                                "SYSTEM", 
                                "TENANT", 
                                "SCOPE"
                            ], 
                            "type": "string"
                        }, 
                        "required": false, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": ""
                    }
                ], 
                "summary": "Return roles for principals"
            }
        }, 
        "/api/tenants/{tenantId}/principals/{userId}/groups": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Operation is successful.", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "404": {
                        "description": "User is not found."
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the user principal id", 
                        "required": true, 
                        "type": "string", 
                        "name": "userId", 
                        "in": "path"
                    }, 
                    {
                        "enum": [
                            "SSO", 
                            "CUSTOM"
                        ], 
                        "description": "which groups to return (SSO or CUSTOM groups).", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "groupType"
                    }
                ], 
                "summary": "Return parent groups of a user"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/scopes-principals": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "returnPrincipalFromScopes", 
                "description": "Return the principals that belong to a collection of scopes, and optionally filtered by a specific role or a specific permission. When filtering the result the role takes precedence over the permission.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array"
                        }, 
                        "description": "the set of scopes the principals belongs to", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "the role to filter by", 
                        "required": false, 
                        "type": "string", 
                        "name": "roleId", 
                        "in": "query"
                    }, 
                    {
                        "description": "the permission to filter by", 
                        "required": false, 
                        "type": "string", 
                        "name": "permissionId", 
                        "in": "query"
                    }
                ], 
                "summary": "Return principals that belong to a set of scopes"
            }
        }, 
        "/api/tenants/{tenantId}/directories/{id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/IdentityStoreStatus"
                        }
                    }
                }, 
                "description": "Retrieve the status of an identity store identified by its id.", 
                "parameters": [
                    {
                        "description": "the target tenant id for the provided identity store", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "pattern": ".+$", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Retrieve the status of an identity store"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/principals/{principalId}/scopes/{scopeId}/roles/{scopeRoleId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope", 
                        "required": true, 
                        "type": "string", 
                        "name": "scopeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope role to add", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "scopeRoleId"
                    }
                ], 
                "summary": "Add a scope role to a principal in the context of a scope"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Remove a scope role from a principal in the context of a scope.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope", 
                        "required": true, 
                        "type": "string", 
                        "name": "scopeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope role to remove", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "scopeRoleId"
                    }
                ], 
                "summary": "Remove an Scope role from a principal"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/authorities/extended/roles": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Retrieves the extended authorities that a collection of principal references hold system wide, including effective roles and effective permissions.\n\nIf some principals in 'refs' are not found, the operation doesn't fail with a 404, but instead returns a result for the ones that were found.", 
                "parameters": [
                    {
                        "description": "the tenant of the principal reference(s)", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PrincipalRef"
                            }, 
                            "type": "array"
                        }, 
                        "description": "the collection of principal reference(s).", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "list of RoleType's to include in the result", 
                        "items": {
                            "enum": [
                                "SYSTEM", 
                                "TENANT", 
                                "SCOPE"
                            ], 
                            "type": "string"
                        }, 
                        "required": false, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": ""
                    }
                ], 
                "summary": "Return the extended authorities roles for principals"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/authorities/permissions": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Retrieves the authorities that a collection of principal references hold system wide, including effective roles and effective permissions.\n\nIf some principals in 'refs' are not found, the operation doesn't fail with a 404, but instead returns a result for the ones that were found.", 
                "parameters": [
                    {
                        "description": "the tenant of the principal reference(s)", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PrincipalRef"
                            }, 
                            "type": "array"
                        }, 
                        "description": "the collection of principal reference(s).", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "list of RoleType's to include in the result", 
                        "items": {
                            "enum": [
                                "SYSTEM", 
                                "TENANT", 
                                "SCOPE"
                            ], 
                            "type": "string"
                        }, 
                        "required": false, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": ""
                    }
                ], 
                "summary": "Return permissions for principals"
            }
        }, 
        "/api/data-service/schema/{classId}/instances/{id}/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "description": "Get the state of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique identifier of an instance of the object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the state of a field in the specified schema"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/principals/{principalId}/scopes/{scopeId}/roles": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "Sets the specified Scope role(s) to a principal in the context of a scope. As result the principal will contain only that set of Scope roles.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope", 
                        "required": true, 
                        "type": "string", 
                        "name": "scopeId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array"
                        }, 
                        "description": "collection with id(s) of the scope role(s) to set", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Set scope role(s) to a principal"
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "Add the specified Scope role(s) to a principal in the context of a scope.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope", 
                        "required": true, 
                        "type": "string", 
                        "name": "scopeId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array"
                        }, 
                        "description": "collection with id(s) of the scope role(s) to add", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Add scope role(s) to a principal"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "removeEmptyScopeRoleForPrincipal", 
                "description": "Remove an empty scope role from a principal in the context of a scope.\nUsed for testing purposes only.", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope", 
                        "required": true, 
                        "type": "string", 
                        "name": "scopeId", 
                        "in": "path"
                    }
                ], 
                "summary": "Remove an empty Scope role from a principal"
            }
        }, 
        "/api/data-service/list/{classId}/default": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "description": "Retrieves the list of possible values for a given type of object.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Retrieves the list of possible values for a given type of object"
            }
        }, 
        "/api/tenants/{tenantId}/groups/assigned": {
            "get": {
                "responses": {
                    "200": {
                        "description": "operation is successful", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "206": {
                        "description": "partial result is returned. Some of the directories could not be searched."
                    }
                }, 
                "description": "Retrieves all custom groups and SSO that has assigned roles and groups that correspond to the search criteria.\nParameter '$filter' is not taken into account, please use 'criteria' instead.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the search criteria", 
                        "required": false, 
                        "type": "string", 
                        "name": "criteria", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Retrieves all assigned custom groups and SSO groups."
            }
        }, 
        "/api/tokens/principals/{principal}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "UserTokenResource is deleted successfully."
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The principal for which the UserTokenResource should be deleted.", 
                        "required": true, 
                        "type": "string", 
                        "name": "principal", 
                        "in": "path"
                    }
                ], 
                "summary": "Deletes the UserTokenResource associated with the provided principal."
            }
        }, 
        "/api/authorization/tenants/{tenantId}/principals/{principalId}/roles/{roleId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the role to add", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "roleId"
                    }
                ], 
                "summary": "Add System or Tenant role to a principal"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "removePrincipalRole", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant which the principal belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the principal", 
                        "required": true, 
                        "type": "string", 
                        "name": "principalId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the role to remove", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "roleId"
                    }
                ], 
                "summary": "Remove a System or Tenant tole from a principal"
            }
        }, 
        "/api/tenants/{tenantId}/groups": {
            "post": {
                "responses": {
                    "201": {
                        "description": "creation is successful"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Create a custom group at the top of the tree.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/group"
                        }, 
                        "description": "the group to be created", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create a custom group"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "operation is successful", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "206": {
                        "description": "partial result is returned. Some of the directories could not be searched."
                    }
                }, 
                "description": "Retrieves all custom groups and SSO groups that correspond to the search criteria.\nParameters 'page', '$top' and 'limit' are taken into account only when 'groupType' is set to CUSTOM.\nParameters '$skip', '$filter', '$orderby' are never takeninto account. Please use 'criteria' instead of '$filter'.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the search criteria", 
                        "required": false, 
                        "type": "string", 
                        "name": "criteria", 
                        "in": "query"
                    }, 
                    {
                        "description": "the group domain", 
                        "required": false, 
                        "type": "string", 
                        "name": "domain", 
                        "in": "query"
                    }, 
                    {
                        "description": "parent group id if searching for child groups", 
                        "required": false, 
                        "type": "string", 
                        "name": "parentGroup", 
                        "in": "query"
                    }, 
                    {
                        "enum": [
                            "SSO", 
                            "CUSTOM"
                        ], 
                        "description": "the type of group (either SSO or CUSTOM)", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "groupType"
                    }, 
                    {
                        "description": "optional filter based on assigned status (either 'NOT_ASSIGNED', 'ASSIGNED' or 'CUSTOM_ALL_SSO_ASSIGNED'", 
                        "required": false, 
                        "type": "string", 
                        "name": "permissionFiltered", 
                        "in": "query"
                    }, 
                    {
                        "description": "role if the result should contain only groups which have a specific role", 
                        "required": false, 
                        "type": "string", 
                        "name": "role", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Retrieves all custom groups and SSO groups."
            }
        }, 
        "/api/authorization/roles/extensions/{extensionId}/permissions/assigned": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "addEmptyPermission", 
                "description": "Adds an empty permission to the list of permissions of a role extension.\nUsed for testing purposes only.", 
                "parameters": [
                    {
                        "description": "the id of the role extension", 
                        "required": true, 
                        "type": "string", 
                        "name": "extensionId", 
                        "in": "path"
                    }
                ], 
                "summary": "Add an empty permission to a role extension."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "removeEmptyPermission", 
                "description": "Removes an empty permission from the list of permissions of a role extension.\nUsed for testing purposes only.", 
                "parameters": [
                    {
                        "description": "the id of the role extension to update", 
                        "required": true, 
                        "type": "string", 
                        "name": "extensionId", 
                        "in": "path"
                    }
                ], 
                "summary": "Remove an empty permission from a role extension"
            }
        }, 
        "/api/tenants/{tenantId}/groups/{parentGroupId}/users": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Finds users in both SSO and Custom groups by tenant and parent group.\nParameters 'page', 'limit', '$skip', '$filter','$orderby' are not taken into account. Please use 'criteria' instead of '$filter'.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "principal id of the parent group", 
                        "required": true, 
                        "type": "string", 
                        "name": "parentGroupId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the search criteria", 
                        "required": false, 
                        "type": "string", 
                        "name": "criteria", 
                        "in": "query"
                    }, 
                    {
                        "description": "if 'true' then all child groups will be expanded and searched", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "expandGroups", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Find users in groups"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/scopes/{scopeId}/resources": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "setResourcesToScope", 
                "description": "Set the specified resource(s) to a scope. As result the scope will contain only that set of resources.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "scopeId"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ResourceRef"
                            }, 
                            "type": "array"
                        }, 
                        "description": "collection with the resource(s) to set", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Set resource(s) to a scope"
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "addResourcesToScope", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "scopeId"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ResourceRef"
                            }, 
                            "type": "array"
                        }, 
                        "description": "collection with the resource(s) to add", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Add resources to a scope"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "removeResourcesFromScope", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the scope", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "scopeId"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Remve resources from a scope"
            }
        }, 
        "/api/data-service/list/{classId}/types/{typeFilter}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "description": "Retrieves the list of possible values for a given type of object.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Retrieves the list of possible values for a given type of object"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/scopes": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "deleteAllScopes", 
                "description": "Can delete scope based on ODATA query options.", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Delete all scopes for a tenant"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "returnScopes", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return scopes for tenant"
            }
        }, 
        "/api/data-service/schema/{classId}/types/{typeFilter}/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "description": "Get the state of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the state of a field in the specified schema"
            }
        }, 
        "/api/tenants": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "returnTenants", 
                "description": "", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return a page of tenants"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/principals": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "description": "Deletes all principal extensions, filtering them by the oData query inside the paging information if provided.", 
                "parameters": [
                    {
                        "description": "the tenant which the principals belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Delete all principal extensions"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "returnPrincipalExtensions", 
                "description": "Retrieves the principal extensions for the specified tenant, and optionally filtered by type of roles associated with it. Scope roles are not taken into account in the filtering.", 
                "parameters": [
                    {
                        "description": "the tenant for which to get principal extensions", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "enum": [
                            "ANY", 
                            "ANY_SYSTEM_ROLE", 
                            "ANY_TENANT_ROLE"
                        ], 
                        "description": "the type of the role that any given principal extension should have in order to be included into the result", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "containsRole"
                    }, 
                    {
                        "description": "the role that any given principal extension should have in order to be included into the result", 
                        "required": false, 
                        "type": "string", 
                        "name": "hasRole", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return principal extensions"
            }
        }, 
        "/api/data-service/schema/{classId}/instances/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "description": "This returns the schema of a particular type adjusted to the state of a specific instance..", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique identifier of an instance of the object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Get the schema for the specified object"
            }
        }, 
        "/api/tenants/{tenantId}/groups/{parentGroupId}/users/{userId}": {
            "delete": {
                "responses": {
                    "404": {
                        "description": "group with the provided id is not found"
                    }, 
                    "204": {
                        "description": "delete is successful"
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Distinguished name of the parent group", 
                        "required": true, 
                        "type": "string", 
                        "name": "parentGroupId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Distinguished name of the user to delete", 
                        "required": true, 
                        "type": "string", 
                        "name": "userId", 
                        "in": "path"
                    }
                ], 
                "summary": "Remove a user from a custom group"
            }
        }, 
        "/api/authorization/tenants/{tenantId}/resources/{resourceId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "operationId": "updateResource", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant which the resources belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the resource", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ResourceRef"
                        }, 
                        "description": "the resource to create or update", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Update or create a resource by its id"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "operation is successful."
                    }
                }, 
                "operationId": "deleteResource", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant which the resource belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the resource", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }
                ], 
                "summary": "Delete resource"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ResourceRef"
                        }
                    }
                }, 
                "operationId": "returnResource", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the tenant which the resources belongs to", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the id of the resource", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }
                ], 
                "summary": "Return resource by its id"
            }
        }, 
        "/api/tenants/{tenantId}/principals/{userId}/subtenants": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "Finds business groups that a user belongs to. They might be filtered by role and/or expanded to take into account SSO/custom groups that the user belongs to. The returned collection of subtenants contains the list of roles that the user has on those tenants (without the list of principals that belong to those tenants).", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the user principal id", 
                        "required": true, 
                        "type": "string", 
                        "name": "userId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the role to filter", 
                        "required": false, 
                        "type": "string", 
                        "name": "role", 
                        "in": "query"
                    }, 
                    {
                        "description": "'true' to recursively expand groups", 
                        "default": false, 
                        "required": false, 
                        "in": "query", 
                        "type": "boolean", 
                        "name": "expandGroups"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Return business groups for a user"
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "basePath": "/identity", 
    "definitions": {
        "ConstantValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/literal"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutRow": {
            "type": "object", 
            "properties": {
                "items": {
                    "xml": {
                        "wrapped": true, 
                        "name": "item"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutCell"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "NotEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "complexLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "complexLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's class."
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component type."
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The type filter for this literal."
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component."
                        }, 
                        "values": {
                            "description": "Map of values, keyed by the field ids of some complex type.", 
                            "$ref": "#/definitions/literalMap"
                        }
                    }, 
                    "description": "A complex value composed of multiple values keyed by the field ids of some complex type."
                }
            ]
        }, 
        "ParameterMapping": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "Role": {
            "required": [
                "id", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "assignedPermissions": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[A-Z0-9_]+", 
                    "maxLength": 100
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "SubsetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Scope": {
            "required": [
                "id", 
                "name", 
                "tenant"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[\\S]+", 
                    "maxLength": 100
                }, 
                "scopeType": {
                    "$ref": "#/definitions/ScopeType"
                }, 
                "tenant": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[A-Za-z0-9\\-\\.\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:\\@]+", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "EndsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "VisibilityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SystemRole": {
            "required": [
                "id", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "assignedPermissions": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[A-Z0-9_]+", 
                    "maxLength": 100
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "TenantRole": {
            "required": [
                "id", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "assignedPermissions": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[A-Z0-9_]+", 
                    "maxLength": 100
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "ParameterMappingCollection": {
            "type": "object", 
            "properties": {
                "params": {
                    "xml": {
                        "wrapped": true, 
                        "name": "param"
                    }, 
                    "items": {
                        "$ref": "#/definitions/ParameterMapping"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "group": {
            "xml": {
                "name": "group"
            }, 
            "required": [
                "groupType", 
                "name", 
                "principalId"
            ], 
            "type": "object", 
            "properties": {
                "groupType": {
                    "enum": [
                        "SSO", 
                        "CUSTOM"
                    ], 
                    "type": "string"
                }, 
                "domain": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 100
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "fqdn": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "principalId": {
                    "$ref": "#/definitions/principalId"
                }, 
                "emailAddress": {
                    "type": "string"
                }, 
                "netbios": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 100
                }
            }
        }, 
        "DisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "userSecurityContext": {
            "xml": {
                "name": "userSecurityContext"
            }, 
            "type": "object", 
            "properties": {
                "membershipContext": {
                    "$ref": "#/definitions/membershipContext"
                }, 
                "suite": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "authoritiesContext": {
                    "$ref": "#/definitions/context"
                }, 
                "samlToken": {
                    "type": "string"
                }, 
                "solution": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "booleanLiteral": {
            "xml": {
                "name": "booleanLiteral"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "value": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "The boolean value."
                }
            }, 
            "description": "Wraps a boolean value."
        }, 
        "money": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "money"
                    }, 
                    "type": "object", 
                    "properties": {
                        "amount": {
                            "type": "number", 
                            "description": "The amount associated with this value (with no specific currency).", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a single, precise monetary value."
                }
            ]
        }, 
        "OrClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "moneyTimeRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyTimeRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "basis": {
                            "description": "The span of time to calculate the rate of money for.", 
                            "$ref": "#/definitions/timeSpan"
                        }
                    }, 
                    "description": "Represents a rate of money over time."
                }
            ]
        }, 
        "UniqueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "stringLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "stringLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a String value."
                }
            ]
        }, 
        "auth": {
            "xml": {
                "name": "auth"
            }, 
            "required": [
                "tenant", 
                "username"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string"
                }, 
                "password": {
                    "type": "string"
                }, 
                "tenant": {
                    "type": "string"
                }
            }
        }, 
        "LayoutField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "extensionRendererContext": {
                            "$ref": "#/definitions/ExtensionRendererContext"
                        }, 
                        "description": {
                            "type": "string"
                        }, 
                        "dataType": {
                            "$ref": "#/definitions/DataType"
                        }, 
                        "permissibleValues": {
                            "$ref": "#/definitions/PermissibleValueList"
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "displayAdvice": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "TEXTBOX", 
                                "HYPERLINK", 
                                "EMAIL", 
                                "TEXTAREA", 
                                "DATE_TIME_PICKER", 
                                "CHECKBOX", 
                                "YES_NO", 
                                "CHECKBOX_GROUP", 
                                "DUAL_LIST", 
                                "RADIO_GROUP", 
                                "DROPDOWN", 
                                "LIST", 
                                "SEARCHER", 
                                "TREE", 
                                "FORM", 
                                "IMAGE", 
                                "SLIDER", 
                                "DATA_TABLE", 
                                "VALUE_PICKER"
                            ], 
                            "type": "string"
                        }, 
                        "orderIndex": {
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "isMultiValued": {
                            "xml": {
                                "attribute": true
                            }, 
                            "default": false, 
                            "type": "boolean"
                        }, 
                        "labelSize": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "columns": {
                            "xml": {
                                "wrapped": true, 
                                "name": "column"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutField"
                            }, 
                            "type": "array"
                        }, 
                        "detailLayout": {
                            "$ref": "#/definitions/LayoutReference"
                        }
                    }
                }
            ]
        }, 
        "simpleSubtenant": {
            "xml": {
                "name": "simpleSubtenant"
            }, 
            "type": "object", 
            "properties": {
                "subtenantRoles": {
                    "items": {
                        "$ref": "#/definitions/simpleSubtenantRole"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "entityRef": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRef"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier of the type or category to which the referenced entity belongs."
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The unique identifier of the referenced entity, encoded as a string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
                        }
                    }, 
                    "description": "Represents a reference to an entity defined somewhere in the suite."
                }
            ]
        }, 
        "CallbackEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "PagePrincipalData": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/principalData"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "MaxCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ElementState": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Constraint"
                    }, 
                    "type": "array"
                }, 
                "dependencies": {
                    "xml": {
                        "wrapped": true, 
                        "name": "dependency"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "type": "string"
                    }
                }
            }
        }, 
        "Clause": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ConstantClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/booleanLiteral"
                        }
                    }
                }
            ]
        }, 
        "StartsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LessThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "RestEntity": {
            "type": "object", 
            "properties": {
                "body": {
                    "type": "object"
                }, 
                "httpStatus": {
                    "enum": [
                        "CONTINUE", 
                        "SWITCHING_PROTOCOLS", 
                        "PROCESSING", 
                        "CHECKPOINT", 
                        "OK", 
                        "CREATED", 
                        "ACCEPTED", 
                        "NON_AUTHORITATIVE_INFORMATION", 
                        "NO_CONTENT", 
                        "RESET_CONTENT", 
                        "PARTIAL_CONTENT", 
                        "MULTI_STATUS", 
                        "ALREADY_REPORTED", 
                        "IM_USED", 
                        "MULTIPLE_CHOICES", 
                        "MOVED_PERMANENTLY", 
                        "FOUND", 
                        "MOVED_TEMPORARILY", 
                        "SEE_OTHER", 
                        "NOT_MODIFIED", 
                        "USE_PROXY", 
                        "TEMPORARY_REDIRECT", 
                        "PERMANENT_REDIRECT", 
                        "BAD_REQUEST", 
                        "UNAUTHORIZED", 
                        "PAYMENT_REQUIRED", 
                        "FORBIDDEN", 
                        "NOT_FOUND", 
                        "METHOD_NOT_ALLOWED", 
                        "NOT_ACCEPTABLE", 
                        "PROXY_AUTHENTICATION_REQUIRED", 
                        "REQUEST_TIMEOUT", 
                        "CONFLICT", 
                        "GONE", 
                        "LENGTH_REQUIRED", 
                        "PRECONDITION_FAILED", 
                        "PAYLOAD_TOO_LARGE", 
                        "REQUEST_ENTITY_TOO_LARGE", 
                        "URI_TOO_LONG", 
                        "REQUEST_URI_TOO_LONG", 
                        "UNSUPPORTED_MEDIA_TYPE", 
                        "REQUESTED_RANGE_NOT_SATISFIABLE", 
                        "EXPECTATION_FAILED", 
                        "I_AM_A_TEAPOT", 
                        "INSUFFICIENT_SPACE_ON_RESOURCE", 
                        "METHOD_FAILURE", 
                        "DESTINATION_LOCKED", 
                        "UNPROCESSABLE_ENTITY", 
                        "LOCKED", 
                        "FAILED_DEPENDENCY", 
                        "UPGRADE_REQUIRED", 
                        "PRECONDITION_REQUIRED", 
                        "TOO_MANY_REQUESTS", 
                        "REQUEST_HEADER_FIELDS_TOO_LARGE", 
                        "INTERNAL_SERVER_ERROR", 
                        "NOT_IMPLEMENTED", 
                        "BAD_GATEWAY", 
                        "SERVICE_UNAVAILABLE", 
                        "GATEWAY_TIMEOUT", 
                        "HTTP_VERSION_NOT_SUPPORTED", 
                        "VARIANT_ALSO_NEGOTIATES", 
                        "INSUFFICIENT_STORAGE", 
                        "LOOP_DETECTED", 
                        "BANDWIDTH_LIMIT_EXCEEDED", 
                        "NOT_EXTENDED", 
                        "NETWORK_AUTHENTICATION_REQUIRED"
                    ], 
                    "type": "string"
                }, 
                "httpHeaders": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array"
                    }, 
                    "type": "object"
                }, 
                "setLocation": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "multipleLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "multipleLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "xml": {
                                "name": "item"
                            }, 
                            "items": {
                                "$ref": "#/definitions/literal"
                            }, 
                            "type": "array", 
                            "description": "The list of specified values. NOTE: All values must be of the same data type."
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string", 
                            "description": "The data type of the items in the list."
                        }
                    }, 
                    "description": "A literal which represents multiple values. All of these component values must be of the same data type."
                }
            ]
        }, 
        "ScopeRole": {
            "allOf": [
                {
                    "$ref": "#/definitions/Role"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "scopeType": {
                            "$ref": "#/definitions/ScopeType"
                        }
                    }
                }
            ]
        }, 
        "LayoutFlow": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "parts": {
                            "xml": {
                                "wrapped": true, 
                                "name": "part"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutFlowElement"
                            }, 
                            "type": "array"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ContextPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "RefreshOnChangeBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SkipExportBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutCell": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "size": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "FixedValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "value": {
            "xml": {
                "name": "value"
            }, 
            "type": "object", 
            "properties": {
                "label": {
                    "type": "string"
                }, 
                "underlyingValue": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "moneyRange": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRange"
                    }, 
                    "type": "object", 
                    "properties": {
                        "maxValue": {
                            "type": "number", 
                            "description": "The upper limit of the range.", 
                            "format": "double"
                        }, 
                        "minValue": {
                            "type": "number", 
                            "description": "The lower limit of the range.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a range of money values, between some defined minimums and maximums."
                }
            ]
        }, 
        "IdentityStoreConnectivityStatus": {
            "xml": {
                "name": "IdentityStoreConnectivityStatus"
            }, 
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "SUCCESS", 
                        "FAILURE", 
                        "UNDEFINED"
                    ], 
                    "type": "string"
                }, 
                "message": {
                    "type": "string"
                }
            }
        }, 
        "ComplexEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "values": {
                            "additionalProperties": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "object"
                        }
                    }
                }
            ]
        }, 
        "secureString": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "secureString"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a secured string value, such as a password."
                }
            ]
        }, 
        "Permission": {
            "required": [
                "description", 
                "id", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "description": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "prereqAdminPermissions": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[A-Z0-9_]+", 
                    "maxLength": 100
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "ComplexDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }
            ]
        }, 
        "token": {
            "xml": {
                "name": "token"
            }, 
            "type": "object", 
            "properties": {
                "expires": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "id": {
                    "type": "string"
                }, 
                "tenant": {
                    "type": "string"
                }
            }
        }, 
        "IdentityStoreStatus": {
            "xml": {
                "name": "IdentityStoreStatus"
            }, 
            "type": "object", 
            "properties": {
                "syncStatus": {
                    "$ref": "#/definitions/IdentityStoreSyncStatus"
                }
            }
        }, 
        "PermissibleValueList": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "customAllowed": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "Evaluator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "principal": {
            "xml": {
                "name": "principal"
            }, 
            "required": [
                "displayName", 
                "id", 
                "principalRef", 
                "tenant"
            ], 
            "type": "object", 
            "properties": {
                "tenantRoles": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/TenantRole"
                    }, 
                    "type": "array"
                }, 
                "scopes": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Scope"
                    }, 
                    "type": "array"
                }, 
                "displayName": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "systemRoles": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/SystemRole"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "(^\\S{1,2}$)|(^\\S.+\\S$)", 
                    "maxLength": 255
                }, 
                "tenant": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[A-Za-z0-9\\-\\.\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:\\@]+", 
                    "maxLength": 255
                }, 
                "principalRef": {
                    "$ref": "#/definitions/PrincipalRef"
                }
            }
        }, 
        "IdentityStoreSyncStatus": {
            "xml": {
                "name": "IdentityStoreSyncStatus"
            }, 
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "COMPLETED", 
                        "FAILED", 
                        "RUNNING", 
                        "UNDEFINED"
                    ], 
                    "type": "string"
                }, 
                "message": {
                    "type": "string"
                }
            }
        }, 
        "literalMap": {
            "xml": {
                "name": "literalMap"
            }, 
            "type": "object", 
            "properties": {
                "entries": {
                    "xml": {
                        "name": "entry"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LiteralMapEntry"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Equivalent of java.util.Map"
        }, 
        "ExtensionRendererContext": {
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "extensionId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "elementValuesRequest": {
            "xml": {
                "name": "elementValuesRequest"
            }, 
            "type": "object", 
            "properties": {
                "text": {
                    "type": "string"
                }, 
                "userId": {
                    "type": "string"
                }, 
                "associateValue": {
                    "$ref": "#/definitions/literal"
                }, 
                "headers": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "pagingInfo": {
                    "$ref": "#/definitions/ElementValuesPagingInfo"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "dependencyValues": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "PageSubtenant": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/subtenant"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "MinimumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "RoleExtension": {
            "required": [
                "id", 
                "name", 
                "role"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "role": {
                    "$ref": "#/definitions/Role"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[A-Z0-9_]+", 
                    "maxLength": 100
                }, 
                "assignedPermissions": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "StaticPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "values": {
                            "xml": {
                                "name": "value"
                            }, 
                            "items": {
                                "$ref": "#/definitions/value"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "MandatoryConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaximumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "RegexpConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "errorMessage": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "formUpdateResponse": {
            "xml": {
                "name": "formUpdateResponse"
            }, 
            "type": "object", 
            "properties": {
                "elementUpdates": {
                    "xml": {
                        "wrapped": true, 
                        "name": "elementUpdate"
                    }, 
                    "items": {
                        "$ref": "#/definitions/updateElementEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "WrapperClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "principalData": {
            "xml": {
                "name": "principalData"
            }, 
            "required": [
                "principalId", 
                "principalType"
            ], 
            "type": "object", 
            "properties": {
                "principalType": {
                    "enum": [
                        "GROUP", 
                        "USER", 
                        "CUSTOM_GROUP", 
                        "SSO_GROUP"
                    ], 
                    "type": "string"
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "principalId": {
                    "$ref": "#/definitions/principalId"
                }
            }
        }, 
        "GreaterThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "context": {
            "xml": {
                "name": "context"
            }, 
            "type": "object", 
            "properties": {
                "authorities": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "scopeAuthorities": {
                    "items": {
                        "$ref": "#/definitions/ScopeAuthoritiesEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "subtenant": {
            "xml": {
                "name": "subtenant"
            }, 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "extensionData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "subtenantRoles": {
                    "items": {
                        "$ref": "#/definitions/subtenantRole"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "tenant": {
                    "type": "string"
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "ResourceRef": {
            "required": [
                "id", 
                "label", 
                "tenant"
            ], 
            "type": "object", 
            "properties": {
                "resourceTypeRef": {
                    "$ref": "#/definitions/ResourceTypeRef"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[\\S]+", 
                    "maxLength": 100
                }, 
                "tenant": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[A-Za-z0-9\\-\\.\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:\\@]+", 
                    "maxLength": 255
                }, 
                "label": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "decimalLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "decimalLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "number", 
                            "description": "The decimal value.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Wraps a decimal value."
                }
            ]
        }, 
        "LiteralMapEntry": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/literal"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "LayoutFlowElement": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ResetValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "dateTimeLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "dateTimeLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The date.", 
                            "format": "date-time"
                        }
                    }, 
                    "description": "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class."
                }
            ]
        }, 
        "IncrementBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "AndClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "CustomPropertyDefinitionMetadata": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "required": [
                        "field"
                    ], 
                    "type": "object", 
                    "properties": {
                        "field": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                }
            ]
        }, 
        "batchElementUpdateRequest": {
            "xml": {
                "name": "batchElementUpdateRequest"
            }, 
            "required": [
                "formValues"
            ], 
            "type": "object", 
            "properties": {
                "trigger": {
                    "type": "string"
                }, 
                "affectedElements": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "formValues": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "triggeredDetailsLayout": {
                    "$ref": "#/definitions/layout"
                }
            }
        }, 
        "ScopeAuthoritiesEntry": {
            "type": "object", 
            "properties": {
                "authorities": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "scope": {
                    "type": "string"
                }
            }
        }, 
        "EqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "principalId": {
            "xml": {
                "name": "principalId"
            }, 
            "type": "object", 
            "properties": {
                "domain": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "subtenantRole": {
            "xml": {
                "name": "subtenantRole"
            }, 
            "required": [
                "name", 
                "scopeRoleRef"
            ], 
            "type": "object", 
            "properties": {
                "scopeRoleRef": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "principalId": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "NullDisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SupersetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NotClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClause": {
                            "$ref": "#/definitions/Clause"
                        }
                    }
                }
            ]
        }, 
        "LayoutSection": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "rows": {
                    "xml": {
                        "wrapped": true, 
                        "name": "row"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutRow"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "ConditionalEvaluatorCase": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "condition": {
                    "$ref": "#/definitions/Clause"
                }
            }
        }, 
        "wrapper": {
            "xml": {
                "name": "wrapper"
            }, 
            "type": "object", 
            "properties": {
                "parentGroup": {
                    "$ref": "#/definitions/group"
                }, 
                "users": {
                    "items": {
                        "$ref": "#/definitions/user"
                    }, 
                    "type": "array"
                }, 
                "groups": {
                    "items": {
                        "$ref": "#/definitions/group"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "literal": {
            "xml": {
                "name": "literal"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "description": "Wraps a value such that values of different types can be treated generically."
        }, 
        "DynamicLayoutReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ]
        }, 
        "StaticLayout": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "required": [
                        "layout"
                    ], 
                    "type": "object", 
                    "properties": {
                        "layout": {
                            "$ref": "#/definitions/layout"
                        }
                    }
                }
            ]
        }, 
        "ScopeType": {
            "required": [
                "id", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "prereqAdminPermissions": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[A-Z0-9_]+", 
                    "maxLength": 100
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "Tenant": {
            "required": [
                "id", 
                "name", 
                "urlName"
            ], 
            "type": "object", 
            "properties": {
                "defaultTenant": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "contactEmail": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "urlName": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[A-Za-z0-9\\-\\.\\_\\~]+", 
                    "maxLength": 50
                }, 
                "password": {
                    "type": "string"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 50
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "entityRefEx": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRefEx"
                    }, 
                    "type": "object", 
                    "properties": {
                        "href": {
                            "type": "string", 
                            "description": "the Href"
                        }
                    }, 
                    "description": "Represents a reference to an entity by uri"
                }
            ]
        }, 
        "FacetValueMap": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/FacetValueMapEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "Constraint": {
            "discriminator": "type", 
            "required": [
                "value"
            ], 
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }
            }
        }, 
        "DynamicDataResponse": {
            "type": "object", 
            "properties": {
                "values": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "LayoutReference": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "BooleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/booleanLiteral"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "IaasPropertyNameBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CustomValidationConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Expression": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "operator": {
                            "$ref": "#/definitions/CriteriaOperator"
                        }, 
                        "rightOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }, 
                        "leftOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "ElementValuesPagingInfo": {
            "type": "object", 
            "properties": {
                "count": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "offset": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "DynamicValueContext": {
            "required": [
                "parameterMappings"
            ], 
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "providerEntityId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "WithinOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DefaultValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "elementValues": {
            "xml": {
                "name": "elementValues"
            }, 
            "type": "object", 
            "properties": {
                "values": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "MaxValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "simpleSubtenantRole": {
            "xml": {
                "name": "simpleSubtenantRole"
            }, 
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "PrincipalRef": {
            "required": [
                "domain", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "domain": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "EntityReferenceDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "membershipContext": {
            "xml": {
                "name": "membershipContext"
            }, 
            "type": "object", 
            "properties": {
                "currentUserPrincipal": {
                    "$ref": "#/definitions/principalId"
                }, 
                "subtenants": {
                    "items": {
                        "$ref": "#/definitions/simpleSubtenant"
                    }, 
                    "type": "array"
                }, 
                "principals": {
                    "items": {
                        "$ref": "#/definitions/principalId"
                    }, 
                    "type": "array"
                }, 
                "tenant": {
                    "type": "string"
                }
            }
        }, 
        "DynamicDataRequest": {
            "type": "object", 
            "properties": {
                "ignoreUnknownFields": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "ids": {
                    "xml": {
                        "name": "id"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "tenantId": {
                    "type": "string"
                }
            }
        }, 
        "MonetaryValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "literal"
                    }, 
                    "type": "object", 
                    "properties": {
                        "currencyCode": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The ISO 4217 code used to identify the currency (if any) associated with this value."
                        }
                    }, 
                    "description": "Base type for representing monetary values, encapsulating both some kind of quantity and a currency."
                }
            ]
        }, 
        "PrimitiveDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "typeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "TimeSpan": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "timeSpan"
                    }, 
                    "type": "object", 
                    "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
                }
            ]
        }, 
        "ExternalValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "dynamicValueProviderInfo"
                    ], 
                    "type": "object", 
                    "properties": {
                        "dynamicValueProviderInfo": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "ContainsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Field": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "dataType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "permissibleValues": {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                "label": {
                    "type": "string"
                }, 
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "displayAdvice": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "TEXTBOX", 
                        "HYPERLINK", 
                        "EMAIL", 
                        "TEXTAREA", 
                        "DATE_TIME_PICKER", 
                        "CHECKBOX", 
                        "YES_NO", 
                        "CHECKBOX_GROUP", 
                        "DUAL_LIST", 
                        "RADIO_GROUP", 
                        "DROPDOWN", 
                        "LIST", 
                        "SEARCHER", 
                        "TREE", 
                        "FORM", 
                        "IMAGE", 
                        "SLIDER", 
                        "DATA_TABLE", 
                        "VALUE_PICKER"
                    ], 
                    "type": "string"
                }, 
                "orderIndex": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "isMultiValued": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "columns": {
                    "xml": {
                        "wrapped": true, 
                        "name": "column"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "CoalesceEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "UnspecifiedEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "integerLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "integerLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "integer", 
                            "description": "The integer value.", 
                            "format": "int64"
                        }
                    }, 
                    "description": "Wraps a signed 64-bit integer value."
                }
            ]
        }, 
        "LessThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "IsDefinedOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Schema": {
            "type": "object", 
            "properties": {
                "fields": {
                    "xml": {
                        "name": "field"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                }
            }
        }, 
        "Sort": {
            "type": "object"
        }, 
        "moneyRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "cost": {
                            "description": "The cost (including optional currency code).", 
                            "$ref": "#/definitions/literal"
                        }
                    }, 
                    "description": "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB."
                }
            ]
        }, 
        "FieldReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "path": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "PageAclEntry": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/AclEntry"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "LayoutExtension": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "fieldPrefix": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "extensionId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "extensionPointId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ConditionalEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "cases": {
                            "xml": {
                                "name": "case"
                            }, 
                            "items": {
                                "$ref": "#/definitions/ConditionalEvaluatorCase"
                            }, 
                            "type": "array"
                        }, 
                        "defaulValue": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "MinValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutPlaceholderCell": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "layout": {
            "xml": {
                "name": "layout"
            }, 
            "type": "object", 
            "properties": {
                "pages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "page"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutPage"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "ReadOnlyConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MultipleEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "items"
                    ], 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "PageSubtenantRole": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/subtenantRole"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "MinCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutText": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "value": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "timeSpan": {
            "xml": {
                "name": "timeSpan"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "amount": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "description": "The amount for the time span.", 
                    "format": "int64"
                }, 
                "unit": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "MILLISECONDS", 
                        "SECONDS", 
                        "MINUTES", 
                        "HOURS", 
                        "DAYS", 
                        "WEEKS", 
                        "MONTHS", 
                        "YEARS"
                    ], 
                    "type": "string", 
                    "description": "The unit of measure for the time span. e.g: days."
                }
            }, 
            "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
        }, 
        "relyingParty": {
            "xml": {
                "name": "relyingParty"
            }, 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "signingCertificate": {
                    "type": "string"
                }, 
                "serviceId": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "FacetValueMapEntry": {
            "type": "object", 
            "properties": {
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "value": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "LayoutPage": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "sections": {
                    "xml": {
                        "wrapped": true, 
                        "name": "section"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutSection"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "AclEntry": {
            "type": "object", 
            "properties": {
                "resourceRefId": {
                    "type": "string"
                }, 
                "principalId": {
                    "type": "string"
                }, 
                "tenant": {
                    "type": "string"
                }, 
                "roleId": {
                    "type": "string"
                }
            }
        }, 
        "suiteTokenRequest": {
            "xml": {
                "name": "suiteTokenRequest"
            }, 
            "type": "object", 
            "properties": {
                "requestLifetime": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "signingCert": {
                    "type": "string"
                }, 
                "tenant": {
                    "type": "string"
                }, 
                "validity": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "principal": {
                    "type": "string"
                }
            }
        }, 
        "ResourceTypeRef": {
            "required": [
                "id", 
                "label"
            ], 
            "type": "object", 
            "properties": {
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "[\\S]+", 
                    "maxLength": 100
                }, 
                "label": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "user": {
            "xml": {
                "name": "user"
            }, 
            "required": [
                "principalId"
            ], 
            "type": "object", 
            "properties": {
                "locked": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "description": {
                    "type": "string"
                }, 
                "firstName": {
                    "type": "string"
                }, 
                "lastName": {
                    "type": "string"
                }, 
                "principalId": {
                    "$ref": "#/definitions/principalId"
                }, 
                "disabled": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "tenantName": {
                    "type": "string"
                }, 
                "emailAddress": {
                    "type": "string"
                }, 
                "password": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "CriteriaOperator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "InternalConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "updateElementEntry": {
            "xml": {
                "name": "updateElementEntry"
            }, 
            "type": "object", 
            "properties": {
                "errors": {
                    "xml": {
                        "wrapped": true, 
                        "name": "error"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "detailLayout": {
                    "$ref": "#/definitions/layout"
                }, 
                "facetValues": {
                    "$ref": "#/definitions/FacetValueMap"
                }, 
                "permissibleValues": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }, 
                "extensionRendererContext": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "DataType": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "typeId": {
                    "enum": [
                        "STRING", 
                        "INTEGER", 
                        "DECIMAL", 
                        "MONEY", 
                        "MONEY_RANGE", 
                        "MONEY_TIME_RATE", 
                        "BOOLEAN", 
                        "ENTITY_REFERENCE", 
                        "DATE_TIME", 
                        "TIME_SPAN", 
                        "SECURE_STRING", 
                        "COMPLEX"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "EditableBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DynamicPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }, 
                        "context": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "EncryptedBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ObjectDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "label": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "solutionInfo": {
            "xml": {
                "name": "solutionInfo"
            }, 
            "type": "object", 
            "properties": {
                "solutionName": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "certificate": {
                    "type": "string"
                }
            }
        }, 
        "directory": {
            "xml": {
                "name": "directory"
            }, 
            "required": [
                "domain", 
                "name", 
                "password", 
                "type", 
                "url", 
                "userNameDn"
            ], 
            "type": "object", 
            "properties": {
                "groupBaseSearchDn": {
                    "type": "string"
                }, 
                "domain": {
                    "type": "string"
                }, 
                "customDirectorySearchAttribute": {
                    "type": "string"
                }, 
                "domainAdminPassword": {
                    "type": "string"
                }, 
                "userBaseSearchDns": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "userNameDn": {
                    "type": "string"
                }, 
                "distinguishedNameAttribute": {
                    "type": "string"
                }, 
                "certificate": {
                    "type": "string"
                }, 
                "membershipAttribute": {
                    "type": "string"
                }, 
                "userBaseSearchDn": {
                    "type": "string"
                }, 
                "objectUuidAttribute": {
                    "type": "string"
                }, 
                "new": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "type": {
                    "enum": [
                        "LDAP", 
                        "AD", 
                        "NATIVE_AD", 
                        "LOCAL_DIRECTORY"
                    ], 
                    "type": "string"
                }, 
                "useGlobalCatalog": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "domainAdminUsername": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "bindUserObjectQuery": {
                    "type": "string"
                }, 
                "groupBaseSearchDns": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "trustAll": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "password": {
                    "type": "string"
                }, 
                "groupObjectQuery": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "url": {
                    "type": "string"
                }, 
                "userObjectQuery": {
                    "type": "string"
                }, 
                "subdomains": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "alias": {
                    "type": "string"
                }
            }
        }, 
        "PageIdentityStore": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/directory"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "MinLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }
    }, 
    "swagger": "2.0"
}