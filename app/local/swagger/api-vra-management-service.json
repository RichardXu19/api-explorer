{
    "info": {
        "version": "7.3.0-SNAPSHOT", 
        "description": "# Reclamation Service API Specification", 
        "title": "Reclamation Service API"
    }, 
    "paths": {
        "/api/work-item/callbacks": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/workItemCallbackAction"
                        }, 
                        "description": "instance of WorkItemCallbackAction", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Controller method, callbacks from the Work Item service to the Management service.", 
                "summary": "Callback for Work Item Service", 
                "operationId": "processCallback"
            }
        }, 
        "/api/management/endpoint/{tenantId}/isvropsconfigured": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success. Returns a boolean", 
                        "schema": {
                            "$ref": "#/definitions/booleanLiteral"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "tenant Id", 
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Utility method to check if vRops is configured", 
                "summary": "Utility method to check if vRops is configured", 
                "operationId": "isVropsConfigured"
            }
        }, 
        "/api/management/endpoint/{tenantId}/testconnection": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success."
                    }, 
                    "400": {
                        "description": "The connection was not established successfully. Check response body for details."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ManagementEndpointDetails"
                        }, 
                        "description": "Endpoint details", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "tenant Id", 
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Test connection to the Management Endpoint", 
                "summary": "Test connection to the Management Endpoint", 
                "operationId": "testConnection"
            }
        }, 
        "/api/management/metrics": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success. Returns a VmResource", 
                        "schema": {
                            "$ref": "#/definitions/vmresource"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/metricsQuery"
                        }, 
                        "description": "Performance Metrics Query", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Get VM performance metrics, based on the passed query.", 
                "summary": "Get VM performance metrics", 
                "operationId": "getVmPerformanceMetrics"
            }
        }, 
        "/api/management/endpoint/{tenantId}/certificate": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success. ", 
                        "schema": {
                            "$ref": "#/definitions/CertificateInfo"
                        }
                    }, 
                    "400": {
                        "description": "The connection was not established successfully. Check response body for details."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ManagementEndpointDetails"
                        }, 
                        "description": "Endpoint details", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "tenant Id", 
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Utility function to get the endpoint certificate.", 
                "summary": "Utility function to get the endpoint certificate", 
                "operationId": "getCertificate"
            }
        }, 
        "/api/work-item/tasks": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success. Returns a list of workitem Ids.", 
                        "schema": {
                            "items": {
                                "type": "object"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array"
                        }, 
                        "description": "List of VM ids", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "lease days", 
                        "format": "int32", 
                        "required": true, 
                        "in": "query", 
                        "type": "integer", 
                        "name": ""
                    }, 
                    {
                        "description": "delay days", 
                        "format": "int32", 
                        "required": true, 
                        "in": "query", 
                        "type": "integer", 
                        "name": ""
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "query"
                    }, 
                    {
                        "description": "mail group manager", 
                        "required": true, 
                        "type": "boolean", 
                        "name": "", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Creation of Reclamation request work items.", 
                "summary": "Create reclamation work items", 
                "operationId": "createWorkItems"
            }
        }, 
        "/api/management/endpoint/{tenantId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success. Returns the updated ManagementEndpointDetails instance.", 
                        "schema": {
                            "$ref": "#/definitions/ManagementEndpointDetails"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ManagementEndpointDetails"
                        }, 
                        "description": "endpoint Details", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "tenant Id", 
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "schema": {
                            "type": "string", 
                            "format": "uri"
                        }, 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Updation of Metrics provider Management Endpoint.", 
                "summary": "Update Management Endpoint", 
                "operationId": "updateManagementEndpoint"
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "Success.", 
                        "schema": {
                            "$ref": "#/definitions/ManagementEndpointDetails"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ManagementEndpointDetails"
                        }, 
                        "description": "endpoint Details", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "tenant Id", 
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "Paging and Sorting Info", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "schema": {
                            "type": "string", 
                            "format": "uri"
                        }, 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Creation of Metrics provider Management Endpoint.", 
                "summary": "Create Management Endpoint", 
                "operationId": "createManagementEndpoint"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success."
                    }
                }, 
                "parameters": [
                    {
                        "description": "tenant Id", 
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "schema": {
                            "type": "string", 
                            "format": "uri"
                        }, 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Removal of Metrics provider Management Endpoint. After removal, the default metric provider for vRA will be used.", 
                "summary": "Remove Management Endpoint", 
                "operationId": "removeManagementEndpoint"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success. Returns the ManagementEndpointDetails", 
                        "schema": {
                            "$ref": "#/definitions/ManagementEndpointDetails"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "tenant Id", 
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Retrieval of Metrics provider Management Endpoint. If default metrics provider is used, then response body will be empty.", 
                "summary": "Retrieve Management Endpoint", 
                "operationId": "getManagementEndpoint"
            }
        }, 
        "/api/management/metrics/{vmIaasID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success. Returns a VmResource", 
                        "schema": {
                            "$ref": "#/definitions/vmresource"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "VM Id.", 
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Get performance metrics for a specific VM.", 
                "summary": "Get performance metrics for a vm", 
                "operationId": "getVmPerformanceMetricsForVm"
            }
        }, 
        "/api/management/requests/cancel": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - return the paginated list of reclamation requests."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "items": {
                                "type": "integer", 
                                "format": "int64"
                            }, 
                            "type": "array"
                        }, 
                        "description": "List of request Ids", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Cancel a list of reclamation requests.", 
                "summary": "Cancel Reclamation Requests", 
                "operationId": "cancelReclamationRequests"
            }
        }, 
        "/api/management/requests": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return the paginated list of reclamation requests.", 
                        "schema": {
                            "$ref": "#/definitions/ReclamationDetails"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "reclamation"
                ], 
                "description": "Get all the reclamation requests.", 
                "summary": "Get Reclamation Requests", 
                "operationId": "getReclamationRequests"
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "tags": [
        {
            "name": "reclamation"
        }
    ], 
    "basePath": "/management-service", 
    "definitions": {
        "BoolCommonExpression": {
            "type": "object"
        }, 
        "dateTimeLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "dateTimeLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The date.", 
                            "format": "date-time"
                        }
                    }, 
                    "description": "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class."
                }
            ]
        }, 
        "MonetaryValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "literal"
                    }, 
                    "type": "object", 
                    "properties": {
                        "currencyCode": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The ISO 4217 code used to identify the currency (if any) associated with this value."
                        }
                    }, 
                    "description": "Base type for representing monetary values, encapsulating both some kind of quantity and a currency."
                }
            ]
        }, 
        "money": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "money"
                    }, 
                    "type": "object", 
                    "properties": {
                        "amount": {
                            "type": "number", 
                            "description": "The amount associated with this value (with no specific currency).", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a single, precise monetary value."
                }
            ]
        }, 
        "complexLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "complexLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's class."
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component type."
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The type filter for this literal."
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component."
                        }, 
                        "values": {
                            "description": "Map of values, keyed by the field ids of some complex type.", 
                            "$ref": "#/definitions/literalMap"
                        }
                    }, 
                    "description": "A complex value composed of multiple values keyed by the field ids of some complex type."
                }
            ]
        }, 
        "PageAndSortRequest": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "queryInfo": {
                    "$ref": "#/definitions/OdataQueryInfo"
                }, 
                "pageNumber": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "pageSize": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "offset": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "stringProperty": {
            "xml": {
                "name": "stringProperty"
            }, 
            "type": "object", 
            "properties": {
                "propertyName": {
                    "type": "string"
                }, 
                "value": {
                    "type": "string"
                }
            }
        }, 
        "Health": {
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "alertsDetails": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "vmresource": {
            "xml": {
                "name": "vmresource"
            }, 
            "type": "object", 
            "properties": {
                "pendingRequest": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "stats": {
                    "items": {
                        "$ref": "#/definitions/StatMetric"
                    }, 
                    "type": "array"
                }, 
                "dailyCost": {
                    "type": "number", 
                    "format": "double"
                }, 
                "iaasUuid": {
                    "type": "string"
                }, 
                "serverGuid": {
                    "type": "string"
                }, 
                "moref": {
                    "type": "string"
                }, 
                "health": {
                    "$ref": "#/definitions/Health"
                }, 
                "expirationDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "vcopsUuid": {
                    "type": "string"
                }, 
                "strings": {
                    "items": {
                        "$ref": "#/definitions/stringProperty"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "StatMetric": {
            "type": "object", 
            "properties": {
                "statName": {
                    "type": "string"
                }, 
                "value": {
                    "type": "number", 
                    "format": "double"
                }
            }
        }, 
        "moneyRange": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRange"
                    }, 
                    "type": "object", 
                    "properties": {
                        "maxValue": {
                            "type": "number", 
                            "description": "The upper limit of the range.", 
                            "format": "double"
                        }, 
                        "minValue": {
                            "type": "number", 
                            "description": "The lower limit of the range.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a range of money values, between some defined minimums and maximums."
                }
            ]
        }, 
        "moneyRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "cost": {
                            "description": "The cost (including optional currency code).", 
                            "$ref": "#/definitions/literal"
                        }
                    }, 
                    "description": "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB."
                }
            ]
        }, 
        "metricfilter": {
            "xml": {
                "name": "metricfilter"
            }, 
            "type": "object", 
            "properties": {
                "stat": {
                    "enum": [
                        "BADGE_HEALTH", 
                        "MEM", 
                        "DISK", 
                        "CPU", 
                        "NET", 
                        "VM_OVERSIZED", 
                        "VM_UNDERSIZED", 
                        "VM_IDLE"
                    ], 
                    "type": "string"
                }, 
                "operation": {
                    "enum": [
                        "GREATER_THAN", 
                        "LESS_THAN", 
                        "LESS_THAN_OR_EQUALS", 
                        "GREATER_THAN_OR_EQUALS"
                    ], 
                    "type": "string"
                }, 
                "value": {
                    "type": "number", 
                    "format": "double"
                }
            }
        }, 
        "Sort": {
            "type": "object"
        }, 
        "ReclamationDetails": {
            "required": [
                "assignedDate", 
                "dailyCost", 
                "machineName", 
                "newLeasePeriod", 
                "ownerName", 
                "requestReason", 
                "requestor", 
                "requireAdditionalNotification", 
                "state", 
                "tenant", 
                "waitBeforeForcingLeasePeriod"
            ], 
            "type": "object", 
            "properties": {
                "requestReason": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "workItemId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "dailyCost": {
                    "type": "number", 
                    "format": "double"
                }, 
                "iaasMachineId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "machineName": {
                    "type": "string"
                }, 
                "currencyCode": {
                    "type": "string"
                }, 
                "userComments": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "currentLeaseExpiryDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "state": {
                    "enum": [
                        "PENDING", 
                        "APPROVED", 
                        "REJECTED", 
                        "EXPIRED", 
                        "CANCELED"
                    ], 
                    "type": "string"
                }, 
                "requestor": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "requireAdditionalNotification": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "ownerName": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "waitBeforeForcingLeasePeriod": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "assignedDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "newLeasePeriod": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "resourceId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "id": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "tenant": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "TimeSpan": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "timeSpan"
                    }, 
                    "type": "object", 
                    "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
                }
            ]
        }, 
        "booleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "default": false, 
                            "type": "boolean", 
                            "description": "The boolean value."
                        }
                    }, 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "literal": {
            "xml": {
                "name": "literal"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "description": "Wraps a value such that values of different types can be treated generically."
        }, 
        "CommonExpression": {
            "type": "object"
        }, 
        "OrderByExpression": {
            "type": "object", 
            "properties": {
                "direction": {
                    "enum": [
                        "ASCENDING", 
                        "DESCENDING"
                    ], 
                    "type": "string"
                }, 
                "expression": {
                    "$ref": "#/definitions/CommonExpression"
                }
            }
        }, 
        "OdataQueryInfo": {
            "type": "object", 
            "properties": {
                "orderBy": {
                    "items": {
                        "$ref": "#/definitions/OrderByExpression"
                    }, 
                    "type": "array"
                }, 
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "rawOrderBy": {
                    "type": "string"
                }, 
                "skip": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "top": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "inlineCount": {
                    "enum": [
                        "NONE", 
                        "ALLPAGES"
                    ], 
                    "type": "string"
                }, 
                "filter": {
                    "$ref": "#/definitions/BoolCommonExpression"
                }, 
                "select": {
                    "items": {
                        "$ref": "#/definitions/EntitySimpleProperty"
                    }, 
                    "type": "array"
                }, 
                "rawFilter": {
                    "type": "string"
                }, 
                "customOptions": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object"
                }, 
                "skipToken": {
                    "type": "string"
                }, 
                "expand": {
                    "items": {
                        "$ref": "#/definitions/EntitySimpleProperty"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "integerLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "integerLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "integer", 
                            "description": "The integer value.", 
                            "format": "int64"
                        }
                    }, 
                    "description": "Wraps a signed 64-bit integer value."
                }
            ]
        }, 
        "CertificateInfo": {
            "type": "object", 
            "properties": {
                "notValidAfter": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "notValidBefore": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "principalName": {
                    "type": "string"
                }, 
                "thumbprint": {
                    "type": "string"
                }, 
                "issuerName": {
                    "type": "string"
                }, 
                "identityCertificateExists": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "literalMap": {
            "xml": {
                "name": "literalMap"
            }, 
            "type": "object", 
            "properties": {
                "entries": {
                    "xml": {
                        "name": "entry"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LiteralMapEntry"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Equivalent of java.util.Map"
        }, 
        "entityRefEx": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRefEx"
                    }, 
                    "type": "object", 
                    "properties": {
                        "href": {
                            "type": "string", 
                            "description": "the Href"
                        }
                    }, 
                    "description": "Represents a reference to an entity by uri"
                }
            ]
        }, 
        "secureString": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "secureString"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a secured string value, such as a password."
                }
            ]
        }, 
        "stringLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "stringLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a String value."
                }
            ]
        }, 
        "decimalLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "decimalLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "number", 
                            "description": "The decimal value.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Wraps a decimal value."
                }
            ]
        }, 
        "entityRef": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRef"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier of the type or category to which the referenced entity belongs."
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The unique identifier of the referenced entity, encoded as a string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
                        }
                    }, 
                    "description": "Represents a reference to an entity defined somewhere in the suite."
                }
            ]
        }, 
        "workItemCallbackAction": {
            "xml": {
                "name": "workItemCallbackAction"
            }, 
            "type": "object", 
            "properties": {
                "completeActionId": {
                    "type": "string"
                }, 
                "formData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "workItemId": {
                    "type": "string"
                }, 
                "targetId": {
                    "type": "string"
                }, 
                "workItemTypeId": {
                    "type": "string"
                }, 
                "assignee": {
                    "type": "string"
                }, 
                "completedDate": {
                    "type": "string", 
                    "format": "date-time"
                }
            }
        }, 
        "moneyTimeRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyTimeRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "basis": {
                            "description": "The span of time to calculate the rate of money for.", 
                            "$ref": "#/definitions/timeSpan"
                        }
                    }, 
                    "description": "Represents a rate of money over time."
                }
            ]
        }, 
        "ManagementEndpointDetails": {
            "required": [
                "endpointUrl", 
                "tenant", 
                "username"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "password": {
                    "type": "string"
                }, 
                "endpointUrl": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2083
                }, 
                "tenant": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "timeSpan": {
            "xml": {
                "name": "timeSpan"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "amount": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "description": "The amount for the time span.", 
                    "format": "int64"
                }, 
                "unit": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "MILLISECONDS", 
                        "SECONDS", 
                        "MINUTES", 
                        "HOURS", 
                        "DAYS", 
                        "WEEKS", 
                        "MONTHS", 
                        "YEARS"
                    ], 
                    "type": "string", 
                    "description": "The unit of measure for the time span. e.g: days."
                }
            }, 
            "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
        }, 
        "metricsQuery": {
            "xml": {
                "name": "metricsQuery"
            }, 
            "type": "object", 
            "properties": {
                "toExpirationDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "fromExpirationDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "statFilters": {
                    "items": {
                        "$ref": "#/definitions/metricfilter"
                    }, 
                    "type": "array"
                }, 
                "stringFilters": {
                    "items": {
                        "$ref": "#/definitions/stringfilter"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "multipleLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "multipleLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "xml": {
                                "name": "item"
                            }, 
                            "items": {
                                "$ref": "#/definitions/literal"
                            }, 
                            "type": "array", 
                            "description": "The list of specified values. NOTE: All values must be of the same data type."
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string", 
                            "description": "The data type of the items in the list."
                        }
                    }, 
                    "description": "A literal which represents multiple values. All of these component values must be of the same data type."
                }
            ]
        }, 
        "EntitySimpleProperty": {
            "type": "object", 
            "properties": {
                "propertyName": {
                    "type": "string"
                }
            }
        }, 
        "LiteralMapEntry": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/literal"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "stringfilter": {
            "xml": {
                "name": "stringfilter"
            }, 
            "type": "object", 
            "properties": {
                "value": {
                    "type": "string"
                }, 
                "key": {
                    "enum": [
                        "DEPLOYMENT_NAME", 
                        "VM_NAME", 
                        "OWNER", 
                        "STATUS", 
                        "GROUP", 
                        "INTERFACE_TYPE", 
                        "INTERFACE_DISPLAY_NAME", 
                        "MACHINE_TYPE", 
                        "IS_COMPONENT"
                    ], 
                    "type": "string"
                }
            }
        }
    }, 
    "swagger": "2.0"
}