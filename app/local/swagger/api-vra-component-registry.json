{
    "info": {
        "version": "7.3.0-SNAPSHOT", 
        "description": "# Component Registry Service API Specification", 
        "title": "Component Registry API"
    }, 
    "paths": {
        "/endpoints/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "the endpoint id to be updated", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/EndPoint"
                        }, 
                        "description": "the endpoint containing the desired updates", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "This method will throw a 404 NOT_FOUND exception if the endpoint doesn't existalready. To create an endpoint, execute a POST against /services/{id}/endpoints/{endpointTypeId} Only available to solution userO", 
                "summary": "This method updates the endpoint identified by the id", 
                "operationId": "updateEndpoint"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "the endpoint id to be deleted", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "Only available to solution users", 
                "summary": "the endpoint containing the desired updates the id", 
                "operationId": "deleteEndpoint"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/EndPoint"
                        }
                    }
                }, 
                "summary": "Gets the endpoint identified by id", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the endpoint id to be found", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/docs/auth": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ModelAndView"
                        }
                    }
                }, 
                "summary": "Gets a new ModelAndView object with 'docs/auth' view name and sets the base bath to /services", 
                "description": "", 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/{id}/endpoints/{endpointTypeId}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Updates or creates an endpoint associated with the provided service id and endpointTypeId.", 
                "description": "Only available to solution users", 
                "parameters": [
                    {
                        "description": "the id of the service", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "the id of the endpoint type", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointTypeId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/EndPoint"
                        }, 
                        "description": "the endpoint to update or create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Deletes the endpoint associated with the provided service id and endpointTypeId.", 
                "description": "Only available to solution users", 
                "parameters": [
                    {
                        "description": "the id of the service", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "the id of the endpoint type", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointTypeId"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/EndPoint"
                        }
                    }
                }, 
                "summary": "Gets the endpoint instance that implements endpointTypeId for a given service instance.", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the service", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "the id of the endpoint type", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointTypeId"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/types/{endpointTypeId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageEndPoint"
                        }
                    }
                }, 
                "summary": "Gets all endpoint instances that implement the provided endpointTypeId", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the endpoint type id to query by", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointTypeId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "providing the currently requested pagination and sorting parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageEndPoint"
                        }
                    }
                }, 
                "summary": "Gets all endpoints", 
                "description": "", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "providing the currently requested pagination and sorting parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/types/identity/token": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/EndPoint"
                        }
                    }
                }, 
                "summary": "Gets the default endpoint associated with the identity service's token endpoint (used to create Bearer tokens).", 
                "description": "", 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/logging": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "405": {
                        "description": ""
                    }
                }, 
                "summary": "POST Method not allowed", 
                "description": "", 
                "tags": [
                    "component-registry"
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "405": {
                        "description": ""
                    }
                }, 
                "summary": "DELETE Method not allowed", 
                "description": "", 
                "tags": [
                    "component-registry"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "405": {
                        "description": ""
                    }
                }, 
                "summary": "GET Method not allowed", 
                "description": "", 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ServiceInfo"
                        }
                    }
                }, 
                "summary": "Registers a new service to the component registry.", 
                "description": "Only available to solution users.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInfo"
                        }, 
                        "description": "the service to register", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Gets all registered services", 
                "description": "", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "providing the currently requested pagination and sorting parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/types": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/entities"
                        }
                    }
                }, 
                "summary": "Gets all distinct service types in the system.", 
                "description": "", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "providing the currently requested pagination and sorting parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/forms/{endpointId}": {
            "put": {
                "responses": {
                    "404": {
                        "description": "Not found"
                    }, 
                    "204": {
                        "description": "Updated successfuly"
                    }
                }, 
                "summary": "Submits an updated version of an EndPoint through the EndPointFormData resource. The values in the form submitted will be used to update an existing EndPoint with the provided endpointId as part of the URL parameters.", 
                "description": "Beta - experimental not supported API! System and tenant admin only.", 
                "parameters": [
                    {
                        "description": "the instance id of an existing EndPoint", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/EndPointFormData"
                        }, 
                        "description": "EndPointFormData resource containing the updated values for an existing  EndPoint instance", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Form resource", 
                        "schema": {
                            "$ref": "#/definitions/form"
                        }
                    }, 
                    "404": {
                        "description": "Not found"
                    }
                }, 
                "summary": "Gets an edit  Form resource by endpointId. The form provided will be a composition of all forms registered via an  EndPointTypeExtension instance and the base Form generated based on the  EndPointTypeSpec ", 
                "description": "Beta - experimental not supported API! System and tenant admi only.", 
                "parameters": [
                    {
                        "description": "the id of an  EndPoint instance.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointId"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/types/{endpointTypeId}/default": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/EndPoint"
                        }
                    }
                }, 
                "summary": "Gets the 'default' endpoint instance that implements the provided endpointTypeId. The 'default' endpoint is the most recently updated endpoint associated to an available service instance. If no endpoints exist with an available service, then the most recently updated endpoint is returned.", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the endpoint type id for which to get the default instance", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointTypeId"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/types/{serviceTypeId}/endpoints": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageEndPoint"
                        }
                    }
                }, 
                "summary": "Gets all endpoints associated with services that match the provided serviceTypeId.", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the serviceTypeId to use to use for filtering", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "serviceTypeId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "providing the currently requested pagination and sorting parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/types/specs/{id}": {
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "the id of the EndPointTypeSpec", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/EndPointTypeSpec"
                        }, 
                        "description": "the EndPointTypeSpec resource to be created or updated.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "Beta - experimental not supported API!\n\nSolution users only", 
                "summary": "Updates an already existing EndPointTypeSpec resource.", 
                "operationId": "updateEndpointTypeSpec"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "EndPointTypeSpec deleted"
                    }, 
                    "400": {
                        "description": "More then one EndPointTypeSpec exists with the provided id"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the ID of the EndPointTypeSpec to be deleted", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "Beta - experimental not supported API!\n\nSolution user only.", 
                "summary": "Deletes a EndPointTypeSpec resource by typeId. No action will be performed if such a resource does not exist and a successful completion will be reported. ", 
                "operationId": "deleteEndpointTypeSpec"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "EndPointTypeSpec resource", 
                        "schema": {
                            "$ref": "#/definitions/EndPointTypeSpec"
                        }
                    }, 
                    "404": {
                        "description": "No EndPointTypeSpec found"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the id of the EndPointTypeSpec", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "Beta - experimental not supported API!", 
                "summary": " Gets the EndPointTypeSpec resource by typeId.", 
                "operationId": "getEndpointTypeSpec"
            }
        }, 
        "/services/types/{serviceTypeId}/endpoints/types": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/entities"
                        }
                    }
                }, 
                "summary": "Gets all distinct endpoint types associated with endpoints with services that match the provided serviceTypeId.", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the serviceTypeId to use to use for filtering", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "serviceTypeId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "providing the currently requested pagination and sorting parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/links": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "API to generate a resolved link which points to a specific UI page and takes into account anyrequired parameters for the UI view page to render properly. The best way to see how to usethis API is by looking at a real-world example.", 
                "description": "Here's the scenario: you want to generate a clickable link that takes the end user to the page that lets them see the details of a specific catalog request. Here's what you will need in order to use this API:\nthe place identifying the page in the UI to display. If you use the UI in a browser, you'll see this in the URL. In our example, visit a page that displays a specific request, and you'll see that the place associated with that page is: csp.catalog.request.submitteddetails next, you'll need to populate all necessary params that the UI page requires. Again, if you use a browser, you can see what these params are. For our scenario, the necessary param keys are:\n\trequestId\n\tcatalogItemId\nOnce you have this information (along with the value to our required keys mentioned earlier, you are ready to craft a linkResolveRequest. Below is example JSON. Clearly, you'll need to supply your appropriate values for requestId and catalogItemId\n\n{\n\t\t\"links\" : [ {\n\t\t\t\t\"place\" : \"csp.catalog.request.submitteddetails\",\n\t\t\t\t\"params\" : [ {\n\t\t\t\t\t\t\"key\" : \"requestId\",\n\t\t\t\t\t\t\"value\" : \"f301558a-4789-4d64-ae84-736d9245a243\"\n\t\t\t\t}, {\n\t\t\t\t\t\t\"key\" : \"catalogItemId\",\n\t\t\t\t\t\t\"value\" : \"de3ac822-6f97-40bc-a53d-d034deb95b3d\"\n\t\t\t\t} ]\n\t\t} ]\n}\n\nOnce you POST against this API supplying your link request, you'll get the hrefs that you can embed in emails or use directly. If properly submitted, This API's response might look something like below, which can be used to direct a user to the configured page in the UI:\n\n{\n\t\t\"hrefs\":[\"https://vra-host.company.com/vcac/org/qe/#csp.catalog.request.submitteddetails%5BrequestId:=f301558a-4789-4d64-ae84-736d9245a243,catalogItemId:=de3ac822f97-40bc-a53d-d034deb95b3d\"]\n}\n\nSolution users only", 
                "parameters": [
                    {
                        "description": "id of the tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/LinkResolveRequest"
                        }, 
                        "description": "the request containing details on the link to resolve", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/types": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/entities"
                        }
                    }
                }, 
                "summary": "Gets all distinct endpoint types", 
                "description": "", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "providing the currently requested pagination and sorting parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/forms/types/{endpointTypeId}": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }
                }, 
                "summary": "Submits a new  EndPointFormData resource by endpointTypeId. The values in the form submitted will be used to create a new  EndPoint of the provided enpointTypeId.", 
                "description": "Beta - experimental not supported API! System or tenant admin only.", 
                "parameters": [
                    {
                        "description": "the endpointTypeId of an  EndPointType that corresponds to an instance of an  EndPointTypeSpec.", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointTypeId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/EndPointFormData"
                        }, 
                        "description": "EndPointFormData resource containing the values for the new Endpoint instance to be created", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Form resource by endpointTypeId", 
                        "schema": {
                            "$ref": "#/definitions/form"
                        }
                    }, 
                    "404": {
                        "description": "Not found"
                    }
                }, 
                "summary": "Gets a new Form resource by endpointTypeId. The form provided will be a composition of all forms registered via an EndPointTypeExtension instance and the base Form generated based on the EndPointTypeSpec.", 
                "description": "Beta - experimental not supported API! System or tenant admins only.", 
                "parameters": [
                    {
                        "description": "the endpointTypeId of an  EndPointType that corresponds to an instance of an  EndPointTypeSpec.", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointTypeId"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/types/sso": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/EndPoint"
                        }
                    }
                }, 
                "summary": "Gets the default endpoint associated with the SSO server endpoint type.", 
                "description": "", 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/status/current": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageServiceStatus"
                        }
                    }
                }, 
                "summary": "Similar to /services/status, this API gets all serviceStatuses for services with registered status type endpoints.", 
                "description": "This API returns the maximum amount of status information by making a connection to the url defined in the status type endpoint. It gathers the data from the ServiceRegistryStatus responses and populates it in the serviceStatus objects.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/logging/{serviceTypeId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "405": {
                        "description": ""
                    }
                }, 
                "summary": "PUT calls are not allowed", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the ID of the service", 
                        "required": true, 
                        "type": "string", 
                        "name": "serviceTypeId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "405": {
                        "description": ""
                    }
                }, 
                "summary": "POST calls are not allowed", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the ID of the service", 
                        "required": true, 
                        "type": "string", 
                        "name": "serviceTypeId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "405": {
                        "description": ""
                    }
                }, 
                "summary": "DELETE calls are not allowed", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the ID of the service", 
                        "required": true, 
                        "type": "string", 
                        "name": "serviceTypeId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/logging/{serviceTypeId}/{category}": {
            "get": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "Gets the LoggerEntity of the given category for provided serviceTypeId", 
                "description": "Only for solution and system admin users", 
                "parameters": [
                    {
                        "description": "target service", 
                        "required": true, 
                        "type": "string", 
                        "name": "serviceTypeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "target category", 
                        "required": true, 
                        "type": "string", 
                        "name": "category", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/types/specs": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created with the newly created resource URL in the location header of the HTTP Response"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/EndPointTypeSpec"
                        }
                    }, 
                    "204": {
                        "description": "if a EndPointTypeSpec resource with the provided id exists"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/EndPointTypeSpec"
                        }, 
                        "description": "the EndPointTypeSpec resource to be created or updated.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "Beta - experimental not supported API!\n\nSolution users only.", 
                "summary": "Creates a new EndPointTypeSpec resource or updates an already existing one.", 
                "operationId": "createEndpointTypeSpec"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageEndPointTypeSpec"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "paging, sorting and filtering parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "", 
                "summary": "the id of the EndPointTypeSpec", 
                "operationId": "listEndpointTypeSpec"
            }
        }, 
        "/services/docs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ModelAndView"
                        }
                    }
                }, 
                "summary": "Gets all documentation endpoints", 
                "description": "", 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/types/{serviceTypeId}/endpoints/{endpointTypeId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageEndPoint"
                        }
                    }
                }, 
                "summary": "Gets all endpoints associated with services that match the provided serviceTypeId AND that match the provided endpointTypeId.", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the serviceTypeId to use to use for filtering", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "serviceTypeId"
                    }, 
                    {
                        "description": "the endpointTypeId to use to use for filtering", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointTypeId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "providing the currently requested pagination and sorting parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/registration": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "This is a convenience method which creates a new solution user, registers it with the SSO server, and then registers the provided service as new solution user in a single call. The serviceRegistration object passed into this method is used as a holder for solutionInfo and serviceInfo objects: 1.) solutionInfo contains info on the new solution user. 2.)serviceInfo contains info on the new service to register (created by the newly created solution user)", 
                "description": "This should not be used by a user that's already a solution user. If you are a solution user, do a POST against /services instead. You should be logged in as the SSO administrator to call this API.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceRegistration"
                        }, 
                        "description": "contains both the ServiceInfo and SolutionInfo objects so that both registrations can be done with a single call", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/logging/{category}/level": {
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Sets the given level to category to all services with endpoint", 
                "description": "Only for solution and system admin users", 
                "parameters": [
                    {
                        "description": "the category to set the severity for", 
                        "required": true, 
                        "type": "string", 
                        "name": "category", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "value for logging level to set", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/types/{serviceTypeId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageServiceInfo"
                        }
                    }
                }, 
                "summary": "Gets all services associated with the provided serviceTypeId.", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the serviceTypeId to use to use for filtering", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "serviceTypeId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "providing the currently requested pagination and sorting parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/status": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "405": {
                        "description": ""
                    }
                }, 
                "summary": "Handler for PUT HTTP operations", 
                "description": "Simply returns HTTP 405 Method not allowed and marks in the HTTP Header that GET is allowed", 
                "tags": [
                    "component-registry"
                ]
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "405": {
                        "description": ""
                    }
                }, 
                "summary": "Handler for POST HTTP operations", 
                "description": "Simply returns HTTP 405 Method not allowed and marks in the HTTP Header that GET is allowed", 
                "tags": [
                    "component-registry"
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "405": {
                        "description": ""
                    }
                }, 
                "summary": "Handler for DELETE HTTP operations", 
                "description": "Simply returns HTTP 405 Method not allowed and marks in the HTTP Header that GET is allowed", 
                "tags": [
                    "component-registry"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageServiceStatus"
                        }
                    }
                }, 
                "summary": "Get all serviceStatuses for services with registered status type endpoints.", 
                "description": "This API returns minimal status information (service id/name/type, last updated timestamp, not available flag and the status endpoint URL). This API does not make a call to the status endpoint URL to populate more details... for that functionality, see /services/status/current", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/logging/{serviceTypeId}/{category}/level": {
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Sets the given severity level to category for the provided serviceTypeId", 
                "description": "Only for solution and system admin users", 
                "parameters": [
                    {
                        "description": "the ID of the service type to set the severity for", 
                        "required": true, 
                        "type": "string", 
                        "name": "serviceTypeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the category to set the severity for", 
                        "required": true, 
                        "type": "string", 
                        "name": "category", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "Value for logging level", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/types/{serviceTypeId}/default": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ServiceInfo"
                        }
                    }
                }, 
                "summary": "Gets the default service associated with the provided serviceTypeId. The 'default' service is the service instance that was most recently updated and is available. If there are no available services matching serviceTypeId, then it returns the service most recently updated ", 
                "description": "", 
                "parameters": [
                    {
                        "description": "The serviceTypeId to use to use for filtering", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "serviceTypeId"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/types/extensions/{id}": {
            "put": {
                "responses": {
                    "201": {
                        "description": "Created with the newly created resource URL in the location header of the HTTP Response."
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "204": {
                        "description": "EndPointTypeExtension resource with the provided id exists"
                    }
                }, 
                "parameters": [
                    {
                        "description": "ID of the EndPointTypeExtension to be updated", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/EndPointTypeExtension"
                        }, 
                        "description": "the EndPointTypeExtension resource to be created or updated", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "Beta - experimental not supported API!\n\nSolution user only", 
                "summary": "Creates a new EndPointTypeExtension resource or updates an already existing one. The id of the EndPointTypeExtension must be provided by the client and have to be unique within the system. The recommended format is namespace notation (ex: id=\"com.company.type....).", 
                "operationId": "updateEndpointTypeExtension"
            }, 
            "delete": {
                "responses": {
                    "403": {
                        "description": "other user tries to update an EndPointTypeExtension resource"
                    }, 
                    "204": {
                        "description": "EndPointTypeExtension deleted"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the ID of the EndPointTypeExtension to be deleted", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "Beta - experimental not supported API!\n\nSolution user only", 
                "summary": "Deletes a EndPointTypeExtension resource by ID. No action will be performed if such a resource does not exist and a successful completion will be reported.  Only the initial owner of the EndPointTypeExtension resource can delete it. HTTP Status 403 - Forbidden will be returned if other user tries to update a EndPointTypeExtension resource.", 
                "operationId": "deleteEndpointTypeExtension"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "the found EndPointTypeExtension", 
                        "schema": {
                            "$ref": "#/definitions/EndPointTypeExtension"
                        }
                    }, 
                    "404": {
                        "description": "EndPointTypeExtension not found"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the ID of the EndPointTypeExtension", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "Beta - experimental not supported API!\n\nSolution users only.", 
                "summary": "Gets the EndPointTypeExtension resource by ID.", 
                "operationId": "getEndpointTypeExtension"
            }
        }, 
        "/services/docs/odata": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ModelAndView"
                        }
                    }
                }, 
                "summary": "Creates a new ModelAndView object with 'docs/odata'view name and sets the base bath to /services ", 
                "description": "", 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/{id}/endpoints": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageEndPoint"
                        }
                    }
                }, 
                "summary": "Gets all endpoint instances for a given service instance.", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the service", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Update or create a service.", 
                "description": "Only available to solution users", 
                "parameters": [
                    {
                        "description": "the id of the service", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInfo"
                        }, 
                        "description": "the full details of the service to save", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Create or update a service.", 
                "description": "Only available to solution users", 
                "parameters": [
                    {
                        "description": "the id of the service", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInfo"
                        }, 
                        "description": "the full details of the service to save", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Removes (i.e.: deregisters) the service matching the provided id.", 
                "description": "Only available to solution users", 
                "parameters": [
                    {
                        "description": "the id of the service", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ServiceInfo"
                        }
                    }
                }, 
                "summary": "Gets the service identified by id.", 
                "description": "", 
                "parameters": [
                    {
                        "description": "the id of the service", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/services/status/current/{serviceId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ServiceStatus"
                        }
                    }
                }, 
                "summary": "Gets the serviceStatus for the specified serviceId.", 
                "description": "This API returns the maximum amount of status information by making a connection to the url defined in the status type endpoint. It gathers the data from then ServiceRegistryStatus responses and populates it in the ServiceStatus objects. Note: This service request makes a call to an external system.", 
                "parameters": [
                    {
                        "description": "the id of a given service instance", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "serviceId"
                    }
                ], 
                "tags": [
                    "component-registry"
                ]
            }
        }, 
        "/endpoints/types/extensions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "the newly created resource URL in the location header of the HTTP Response"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "403": {
                        "description": "Only the initial owner of the EndPointTypeExtension resource can update the resource"
                    }, 
                    "204": {
                        "description": "resource with the provided id exists"
                    }, 
                    "400": {
                        "description": "EndPointTypeSpec resource with a typeId correlated to the EndPointTypeExtension#getEndpointTypeId() does not exist"
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/EndPointTypeExtension"
                        }, 
                        "description": "EndPointTypeExtension resource to be created or updated.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "Beta - experimental not supported API!\n\nSolution users only.", 
                "summary": "Creates a new EndPointTypeExtension resource or updates an already existing one. The id of the EndPointTypeExtension must be provided by the client and have to be unique within the system. The recommended format is namespace notation (ex: id=\"com.company.type....).", 
                "operationId": "createEndpointTypeExtension"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageEndPointTypeExtension"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "paging, sorting and filtering parameters", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-registry"
                ], 
                "description": "Beta - experimental not supported API!", 
                "summary": "Retrieves all or filtered by a criteria EndPointTypeExtension resources in the system.", 
                "operationId": "listEndpointTypeExtension"
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "tags": [
        {
            "name": "component-registry"
        }
    ], 
    "basePath": "/component-registry", 
    "definitions": {
        "BoolCommonExpression": {
            "type": "object"
        }, 
        "ConstantValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/literal"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutRow": {
            "type": "object", 
            "properties": {
                "items": {
                    "xml": {
                        "wrapped": true, 
                        "name": "item"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutCell"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "EndPointAttribute": {
            "allOf": [
                {
                    "$ref": "#/definitions/Attribute"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NotEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Param": {
            "type": "object", 
            "properties": {
                "value": {
                    "type": "string", 
                    "description": "The parameter value"
                }, 
                "key": {
                    "type": "string", 
                    "description": "The parameter key"
                }
            }
        }, 
        "complexLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "complexLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's class."
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component type."
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The type filter for this literal."
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component."
                        }, 
                        "values": {
                            "description": "Map of values, keyed by the field ids of some complex type.", 
                            "$ref": "#/definitions/literalMap"
                        }
                    }, 
                    "description": "A complex value composed of multiple values keyed by the field ids of some complex type."
                }
            ]
        }, 
        "ParameterMapping": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "SubsetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "moneyRange": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRange"
                    }, 
                    "type": "object", 
                    "properties": {
                        "maxValue": {
                            "type": "number", 
                            "description": "The upper limit of the range.", 
                            "format": "double"
                        }, 
                        "minValue": {
                            "type": "number", 
                            "description": "The lower limit of the range.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a range of money values, between some defined minimums and maximums."
                }
            ]
        }, 
        "EndsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "VisibilityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ParameterMappingCollection": {
            "type": "object", 
            "properties": {
                "params": {
                    "xml": {
                        "wrapped": true, 
                        "name": "param"
                    }, 
                    "items": {
                        "$ref": "#/definitions/ParameterMapping"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "layout": {
            "xml": {
                "name": "layout"
            }, 
            "type": "object", 
            "properties": {
                "pages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "page"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutPage"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "DisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "booleanLiteral": {
            "xml": {
                "name": "booleanLiteral"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "value": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "The boolean value."
                }
            }, 
            "description": "Wraps a boolean value."
        }, 
        "PageServiceStatus": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/ServiceStatus"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "PageEndPointTypeSpec": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/EndPointTypeSpec"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "OrClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "PageEndPointTypeExtension": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/EndPointTypeExtension"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "moneyTimeRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyTimeRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "basis": {
                            "description": "The span of time to calculate the rate of money for.", 
                            "$ref": "#/definitions/timeSpan"
                        }
                    }, 
                    "description": "Represents a rate of money over time."
                }
            ]
        }, 
        "UniqueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ExtensionForm": {
            "allOf": [
                {
                    "$ref": "#/definitions/FormReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "extensionId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "extensionPointId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "stringLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "stringLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a String value."
                }
            ]
        }, 
        "LayoutField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "extensionRendererContext": {
                            "$ref": "#/definitions/ExtensionRendererContext"
                        }, 
                        "description": {
                            "type": "string"
                        }, 
                        "dataType": {
                            "$ref": "#/definitions/DataType"
                        }, 
                        "permissibleValues": {
                            "$ref": "#/definitions/PermissibleValueList"
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "displayAdvice": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "TEXTBOX", 
                                "HYPERLINK", 
                                "EMAIL", 
                                "TEXTAREA", 
                                "DATE_TIME_PICKER", 
                                "CHECKBOX", 
                                "YES_NO", 
                                "CHECKBOX_GROUP", 
                                "DUAL_LIST", 
                                "RADIO_GROUP", 
                                "DROPDOWN", 
                                "LIST", 
                                "SEARCHER", 
                                "TREE", 
                                "FORM", 
                                "IMAGE", 
                                "SLIDER", 
                                "DATA_TABLE", 
                                "VALUE_PICKER"
                            ], 
                            "type": "string"
                        }, 
                        "orderIndex": {
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "isMultiValued": {
                            "xml": {
                                "attribute": true
                            }, 
                            "default": false, 
                            "type": "boolean"
                        }, 
                        "labelSize": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "columns": {
                            "xml": {
                                "wrapped": true, 
                                "name": "column"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutField"
                            }, 
                            "type": "array"
                        }, 
                        "detailLayout": {
                            "$ref": "#/definitions/LayoutReference"
                        }
                    }
                }
            ]
        }, 
        "entityRef": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRef"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier of the type or category to which the referenced entity belongs."
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The unique identifier of the referenced entity, encoded as a string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
                        }
                    }, 
                    "description": "Represents a reference to an entity defined somewhere in the suite."
                }
            ]
        }, 
        "EndPointTypeExtension": {
            "type": "object", 
            "properties": {
                "providerServiceTypeId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "endpointTypeId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 300
                }, 
                "formReference": {
                    "$ref": "#/definitions/FormReference"
                }, 
                "tenantId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "version": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "ownerId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "schema": {
                    "$ref": "#/definitions/Schema"
                }
            }, 
            "description": "EndpointSpec model is optional association of the EndPoint model defining schema of theproperties and the Form (UI) representation for that schema. The schema and the Form definitionare based primarily on the Authentication type specified. Addition extension definitions couldbe specified with EndpointSpecExtension."
        }, 
        "CallbackEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ElementState": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Constraint"
                    }, 
                    "type": "array"
                }, 
                "dependencies": {
                    "xml": {
                        "wrapped": true, 
                        "name": "dependency"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "type": "string"
                    }
                }
            }
        }, 
        "PageServiceInfo": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/ServiceInfo"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "Clause": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ComplexEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "values": {
                            "additionalProperties": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "object"
                        }
                    }
                }
            ]
        }, 
        "StartsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LessThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "RestEntity": {
            "type": "object", 
            "properties": {
                "body": {
                    "type": "object"
                }, 
                "httpStatus": {
                    "enum": [
                        "CONTINUE", 
                        "SWITCHING_PROTOCOLS", 
                        "PROCESSING", 
                        "CHECKPOINT", 
                        "OK", 
                        "CREATED", 
                        "ACCEPTED", 
                        "NON_AUTHORITATIVE_INFORMATION", 
                        "NO_CONTENT", 
                        "RESET_CONTENT", 
                        "PARTIAL_CONTENT", 
                        "MULTI_STATUS", 
                        "ALREADY_REPORTED", 
                        "IM_USED", 
                        "MULTIPLE_CHOICES", 
                        "MOVED_PERMANENTLY", 
                        "FOUND", 
                        "MOVED_TEMPORARILY", 
                        "SEE_OTHER", 
                        "NOT_MODIFIED", 
                        "USE_PROXY", 
                        "TEMPORARY_REDIRECT", 
                        "PERMANENT_REDIRECT", 
                        "BAD_REQUEST", 
                        "UNAUTHORIZED", 
                        "PAYMENT_REQUIRED", 
                        "FORBIDDEN", 
                        "NOT_FOUND", 
                        "METHOD_NOT_ALLOWED", 
                        "NOT_ACCEPTABLE", 
                        "PROXY_AUTHENTICATION_REQUIRED", 
                        "REQUEST_TIMEOUT", 
                        "CONFLICT", 
                        "GONE", 
                        "LENGTH_REQUIRED", 
                        "PRECONDITION_FAILED", 
                        "PAYLOAD_TOO_LARGE", 
                        "REQUEST_ENTITY_TOO_LARGE", 
                        "URI_TOO_LONG", 
                        "REQUEST_URI_TOO_LONG", 
                        "UNSUPPORTED_MEDIA_TYPE", 
                        "REQUESTED_RANGE_NOT_SATISFIABLE", 
                        "EXPECTATION_FAILED", 
                        "I_AM_A_TEAPOT", 
                        "INSUFFICIENT_SPACE_ON_RESOURCE", 
                        "METHOD_FAILURE", 
                        "DESTINATION_LOCKED", 
                        "UNPROCESSABLE_ENTITY", 
                        "LOCKED", 
                        "FAILED_DEPENDENCY", 
                        "UPGRADE_REQUIRED", 
                        "PRECONDITION_REQUIRED", 
                        "TOO_MANY_REQUESTS", 
                        "REQUEST_HEADER_FIELDS_TOO_LARGE", 
                        "INTERNAL_SERVER_ERROR", 
                        "NOT_IMPLEMENTED", 
                        "BAD_GATEWAY", 
                        "SERVICE_UNAVAILABLE", 
                        "GATEWAY_TIMEOUT", 
                        "HTTP_VERSION_NOT_SUPPORTED", 
                        "VARIANT_ALSO_NEGOTIATES", 
                        "INSUFFICIENT_STORAGE", 
                        "LOOP_DETECTED", 
                        "BANDWIDTH_LIMIT_EXCEEDED", 
                        "NOT_EXTENDED", 
                        "NETWORK_AUTHENTICATION_REQUIRED"
                    ], 
                    "type": "string"
                }, 
                "httpHeaders": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array"
                    }, 
                    "type": "object"
                }, 
                "setLocation": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "multipleLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "multipleLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "xml": {
                                "name": "item"
                            }, 
                            "items": {
                                "$ref": "#/definitions/literal"
                            }, 
                            "type": "array", 
                            "description": "The list of specified values. NOTE: All values must be of the same data type."
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string", 
                            "description": "The data type of the items in the list."
                        }
                    }, 
                    "description": "A literal which represents multiple values. All of these component values must be of the same data type."
                }
            ]
        }, 
        "LayoutFlow": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "parts": {
                            "xml": {
                                "wrapped": true, 
                                "name": "part"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutFlowElement"
                            }, 
                            "type": "array"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ContextPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LinkResolveRequest": {
            "type": "object", 
            "properties": {
                "links": {
                    "items": {
                        "$ref": "#/definitions/Path"
                    }, 
                    "type": "array", 
                    "description": "A list of links to resolve"
                }
            }
        }, 
        "RefreshOnChangeBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SkipExportBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutCell": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "size": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "FixedValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "EndPointTypeSpec": {
            "required": [
                "authType", 
                "protocol"
            ], 
            "type": "object", 
            "properties": {
                "category": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "typeId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 300
                }, 
                "authType": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "NOT_AVAILABLE", 
                        "NONE", 
                        "BASIC", 
                        "DIGEST", 
                        "HTTPS_CLIENT", 
                        "FORM_BASED", 
                        "OAUTH", 
                        "OAUTH2", 
                        "SAML", 
                        "OTHER"
                    ], 
                    "type": "string"
                }, 
                "endpointTypeExtensions": {
                    "items": {
                        "$ref": "#/definitions/EndPointTypeExtension"
                    }, 
                    "type": "array"
                }, 
                "protocol": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "VMOMI", 
                        "WSTRUST", 
                        "REST", 
                        "HTTP", 
                        "FILE", 
                        "UNKNOWN"
                    ], 
                    "type": "string"
                }, 
                "description": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "tenantId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "version": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "ownerId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 555
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "CoalesceEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "moneyRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "cost": {
                            "description": "The cost (including optional currency code).", 
                            "$ref": "#/definitions/literal"
                        }
                    }, 
                    "description": "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB."
                }
            ]
        }, 
        "secureString": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "secureString"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a secured string value, such as a password."
                }
            ]
        }, 
        "entities": {
            "xml": {
                "name": "entities"
            }, 
            "type": "object", 
            "properties": {
                "content": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "items": {
                        "$ref": "#/definitions/EndPointType"
                    }, 
                    "type": "array"
                }, 
                "links": {
                    "xml": {
                        "wrapped": true, 
                        "name": "links"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "LoggerEntity": {
            "type": "object", 
            "properties": {
                "category": {
                    "type": "string"
                }, 
                "loggingLevel": {
                    "enum": [
                        "OFF", 
                        "FATAL", 
                        "ERROR", 
                        "WARN", 
                        "INFO", 
                        "DEBUG", 
                        "TRACE", 
                        "ALL"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "StaticForm": {
            "allOf": [
                {
                    "$ref": "#/definitions/FormReference"
                }, 
                {
                    "required": [
                        "layout"
                    ], 
                    "type": "object", 
                    "properties": {
                        "layout": {
                            "$ref": "#/definitions/layout"
                        }
                    }
                }
            ]
        }, 
        "ComplexDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }
            ]
        }, 
        "ExternalFormReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/FormReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "formId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "Link": {
            "type": "object", 
            "properties": {
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "rel": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "CommonExpression": {
            "type": "object"
        }, 
        "PermissibleValueList": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "customAllowed": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "Evaluator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ConstantClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/booleanLiteral"
                        }
                    }
                }
            ]
        }, 
        "literalMap": {
            "xml": {
                "name": "literalMap"
            }, 
            "type": "object", 
            "properties": {
                "entries": {
                    "xml": {
                        "name": "entry"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LiteralMapEntry"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Equivalent of java.util.Map"
        }, 
        "ExtensionRendererContext": {
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "extensionId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "MinimumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "StaticPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "values": {
                            "xml": {
                                "name": "value"
                            }, 
                            "items": {
                                "$ref": "#/definitions/value"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "MandatoryConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaximumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "RegexpConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "errorMessage": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "WrapperClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ServiceStatus": {
            "type": "object", 
            "properties": {
                "sslTrust": {
                    "type": "string", 
                    "description": "The default ssl trust for a service."
                }, 
                "lastUpdated": {
                    "type": "string", 
                    "description": "The last updated date.", 
                    "format": "date-time"
                }, 
                "statusEndPointUrl": {
                    "type": "string", 
                    "description": "The service status/health endpoint url where information about service status could be retrieved. No authentication is required.", 
                    "format": "url"
                }, 
                "serviceId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "The service id from the registration in the Component Registry.", 
                    "format": "uuid"
                }, 
                "serviceName": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "The name of the service."
                }, 
                "notAvailable": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean", 
                    "description": "Indicates whether the service is not currently available."
                }, 
                "serviceStatus": {
                    "description": "Full information about the status of the service. It could be either collected by the Component Registry or directly retrieved from the service. The url is provided in statusEndPointUrl", 
                    "$ref": "#/definitions/ServiceRegistryStatus"
                }, 
                "serviceTypeId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "The service type id. Generated based on the productId and typeId."
                }
            }
        }, 
        "LiteralMapEntry": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/literal"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "LayoutFlowElement": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ResetValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "dateTimeLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "dateTimeLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The date.", 
                            "format": "date-time"
                        }
                    }, 
                    "description": "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class."
                }
            ]
        }, 
        "IncrementBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "AndClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "PageEndPoint": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/EndPoint"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "CustomPropertyDefinitionMetadata": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "required": [
                        "field"
                    ], 
                    "type": "object", 
                    "properties": {
                        "field": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                }
            ]
        }, 
        "EqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SolutionInfo": {
            "required": [
                "certificate", 
                "solutionName"
            ], 
            "type": "object", 
            "properties": {
                "solutionName": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "The solution username registered with the SSO server.", 
                    "maxLength": 255
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "The description of this solution user.", 
                    "maxLength": 2000
                }, 
                "certificate": {
                    "type": "string", 
                    "description": "The certificate to associated with this solution user."
                }
            }
        }, 
        "ResolvedLinks": {
            "type": "object", 
            "properties": {
                "hrefs": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "A list of the resolved links."
                }
            }
        }, 
        "NullDisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ModelAndView": {
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "CONTINUE", 
                        "SWITCHING_PROTOCOLS", 
                        "PROCESSING", 
                        "CHECKPOINT", 
                        "OK", 
                        "CREATED", 
                        "ACCEPTED", 
                        "NON_AUTHORITATIVE_INFORMATION", 
                        "NO_CONTENT", 
                        "RESET_CONTENT", 
                        "PARTIAL_CONTENT", 
                        "MULTI_STATUS", 
                        "ALREADY_REPORTED", 
                        "IM_USED", 
                        "MULTIPLE_CHOICES", 
                        "MOVED_PERMANENTLY", 
                        "FOUND", 
                        "MOVED_TEMPORARILY", 
                        "SEE_OTHER", 
                        "NOT_MODIFIED", 
                        "USE_PROXY", 
                        "TEMPORARY_REDIRECT", 
                        "PERMANENT_REDIRECT", 
                        "BAD_REQUEST", 
                        "UNAUTHORIZED", 
                        "PAYMENT_REQUIRED", 
                        "FORBIDDEN", 
                        "NOT_FOUND", 
                        "METHOD_NOT_ALLOWED", 
                        "NOT_ACCEPTABLE", 
                        "PROXY_AUTHENTICATION_REQUIRED", 
                        "REQUEST_TIMEOUT", 
                        "CONFLICT", 
                        "GONE", 
                        "LENGTH_REQUIRED", 
                        "PRECONDITION_FAILED", 
                        "PAYLOAD_TOO_LARGE", 
                        "REQUEST_ENTITY_TOO_LARGE", 
                        "URI_TOO_LONG", 
                        "REQUEST_URI_TOO_LONG", 
                        "UNSUPPORTED_MEDIA_TYPE", 
                        "REQUESTED_RANGE_NOT_SATISFIABLE", 
                        "EXPECTATION_FAILED", 
                        "I_AM_A_TEAPOT", 
                        "INSUFFICIENT_SPACE_ON_RESOURCE", 
                        "METHOD_FAILURE", 
                        "DESTINATION_LOCKED", 
                        "UNPROCESSABLE_ENTITY", 
                        "LOCKED", 
                        "FAILED_DEPENDENCY", 
                        "UPGRADE_REQUIRED", 
                        "PRECONDITION_REQUIRED", 
                        "TOO_MANY_REQUESTS", 
                        "REQUEST_HEADER_FIELDS_TOO_LARGE", 
                        "INTERNAL_SERVER_ERROR", 
                        "NOT_IMPLEMENTED", 
                        "BAD_GATEWAY", 
                        "SERVICE_UNAVAILABLE", 
                        "GATEWAY_TIMEOUT", 
                        "HTTP_VERSION_NOT_SUPPORTED", 
                        "VARIANT_ALSO_NEGOTIATES", 
                        "INSUFFICIENT_STORAGE", 
                        "LOOP_DETECTED", 
                        "BANDWIDTH_LIMIT_EXCEEDED", 
                        "NOT_EXTENDED", 
                        "NETWORK_AUTHENTICATION_REQUIRED"
                    ], 
                    "type": "string"
                }, 
                "reference": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "viewName": {
                    "type": "string"
                }, 
                "modelMap": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object"
                }, 
                "model": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object"
                }, 
                "empty": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "view": {
                    "$ref": "#/definitions/View"
                }
            }
        }, 
        "SupersetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NotClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClause": {
                            "$ref": "#/definitions/Clause"
                        }
                    }
                }
            ]
        }, 
        "LayoutSection": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "rows": {
                    "xml": {
                        "wrapped": true, 
                        "name": "row"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutRow"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "ConditionalEvaluatorCase": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "condition": {
                    "$ref": "#/definitions/Clause"
                }
            }
        }, 
        "FormReference": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "literal": {
            "xml": {
                "name": "literal"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "description": "Wraps a value such that values of different types can be treated generically."
        }, 
        "DynamicLayoutReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ]
        }, 
        "OrderByExpression": {
            "type": "object", 
            "properties": {
                "direction": {
                    "enum": [
                        "ASCENDING", 
                        "DESCENDING"
                    ], 
                    "type": "string"
                }, 
                "expression": {
                    "$ref": "#/definitions/CommonExpression"
                }
            }
        }, 
        "StaticLayout": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "required": [
                        "layout"
                    ], 
                    "type": "object", 
                    "properties": {
                        "layout": {
                            "$ref": "#/definitions/layout"
                        }
                    }
                }
            ]
        }, 
        "CertificateInfo": {
            "type": "object", 
            "properties": {
                "notValidAfter": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "notValidBefore": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "principalName": {
                    "type": "string"
                }, 
                "thumbprint": {
                    "type": "string"
                }, 
                "issuerName": {
                    "type": "string"
                }, 
                "identityCertificateExists": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "entityRefEx": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRefEx"
                    }, 
                    "type": "object", 
                    "properties": {
                        "href": {
                            "type": "string", 
                            "description": "the Href"
                        }
                    }, 
                    "description": "Represents a reference to an entity by uri"
                }
            ]
        }, 
        "form": {
            "xml": {
                "name": "form"
            }, 
            "type": "object", 
            "properties": {
                "values": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "layout": {
                    "$ref": "#/definitions/layout"
                }, 
                "fieldPrefixes": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "Constraint": {
            "discriminator": "type", 
            "required": [
                "value"
            ], 
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }
            }
        }, 
        "LayoutReference": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "BooleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "IaasPropertyNameBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CustomValidationConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Path": {
            "type": "object", 
            "properties": {
                "params": {
                    "items": {
                        "$ref": "#/definitions/Param"
                    }, 
                    "type": "array", 
                    "description": "The parameters required to render the desired UI page."
                }, 
                "place": {
                    "type": "string", 
                    "description": "The place identifier for the UI. i.e.: csp.catalog.request.submitteddetails"
                }
            }
        }, 
        "Expression": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "operator": {
                            "$ref": "#/definitions/CriteriaOperator"
                        }, 
                        "rightOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }, 
                        "leftOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "DynamicValueContext": {
            "required": [
                "parameterMappings"
            ], 
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "providerEntityId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "EndPointFormData": {
            "required": [
                "data", 
                "endpointTypeSpecId"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "endpointTypeSpecId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 555
                }
            }, 
            "description": "Endpoint form data to be used to create an new instance of an EndPoint."
        }, 
        "ServiceType": {
            "type": "object", 
            "properties": {
                "typeId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "description": "The type ID of the service.We recommend the use of Java package-style names to ensure uniqueness.", 
                    "maxLength": 125
                }, 
                "productId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "description": "The product ID of the service. The product ID can be used to group related services by organization. We recommend the use of Java package-style names to ensure uniqueness ", 
                    "maxLength": 125
                }, 
                "serviceName": {
                    "type": "string", 
                    "description": "The name of the service type."
                }, 
                "serviceTypeId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "description": "The id of the serviceType should be generated based on productId and typeId.", 
                    "maxLength": 255
                }
            }, 
            "description": "Class describing the type of a service. A service is a logical feature unit. One service may have multiple instances or several services. A service is identified by it service type. Services of the same service type should have identical features. A ServiceType (the combination of productId+typeId) should be globally unique. Product Id is used to identify a product. Type Id is used to identify a service type."
        }, 
        "WithinOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "PageAndSortRequest": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "queryInfo": {
                    "$ref": "#/definitions/OdataQueryInfo"
                }, 
                "pageNumber": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "pageSize": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "offset": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "DefaultValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Attribute": {
            "type": "object", 
            "properties": {
                "value": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "description": "value", 
                    "maxLength": 2000
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "description": "key", 
                    "maxLength": 255
                }
            }, 
            "description": "Key/value pair representing a service or endpoint property."
        }, 
        "timeSpan": {
            "xml": {
                "name": "timeSpan"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "amount": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "description": "The amount for the time span.", 
                    "format": "int64"
                }, 
                "unit": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "MILLISECONDS", 
                        "SECONDS", 
                        "MINUTES", 
                        "HOURS", 
                        "DAYS", 
                        "WEEKS", 
                        "MONTHS", 
                        "YEARS"
                    ], 
                    "type": "string", 
                    "description": "The unit of measure for the time span. e.g: days."
                }
            }, 
            "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
        }, 
        "MaxValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "EntityReferenceDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MonetaryValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "literal"
                    }, 
                    "type": "object", 
                    "properties": {
                        "currencyCode": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The ISO 4217 code used to identify the currency (if any) associated with this value."
                        }
                    }, 
                    "description": "Base type for representing monetary values, encapsulating both some kind of quantity and a currency."
                }
            ]
        }, 
        "PrimitiveDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "typeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "money": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "money"
                    }, 
                    "type": "object", 
                    "properties": {
                        "amount": {
                            "type": "number", 
                            "description": "The amount associated with this value (with no specific currency).", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a single, precise monetary value."
                }
            ]
        }, 
        "TimeSpan": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "timeSpan"
                    }, 
                    "type": "object", 
                    "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
                }
            ]
        }, 
        "ExternalValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "dynamicValueProviderInfo"
                    ], 
                    "type": "object", 
                    "properties": {
                        "dynamicValueProviderInfo": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "ContainsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ServiceRegistryStatus": {
            "type": "object", 
            "properties": {
                "sslCertificateInfo": {
                    "$ref": "#/definitions/CertificateInfo"
                }, 
                "solutionUser": {
                    "type": "string"
                }, 
                "errorMessage": {
                    "type": "string"
                }, 
                "defaultServiceEndpointType": {
                    "type": "string"
                }, 
                "startedTime": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "serviceInitializationStatus": {
                    "type": "string"
                }, 
                "identityCertificateInfo": {
                    "$ref": "#/definitions/CertificateInfo"
                }, 
                "serviceName": {
                    "type": "string"
                }, 
                "serviceRegistrationId": {
                    "type": "string"
                }, 
                "initialized": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "Field": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "dataType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "permissibleValues": {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                "label": {
                    "type": "string"
                }, 
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "displayAdvice": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "TEXTBOX", 
                        "HYPERLINK", 
                        "EMAIL", 
                        "TEXTAREA", 
                        "DATE_TIME_PICKER", 
                        "CHECKBOX", 
                        "YES_NO", 
                        "CHECKBOX_GROUP", 
                        "DUAL_LIST", 
                        "RADIO_GROUP", 
                        "DROPDOWN", 
                        "LIST", 
                        "SEARCHER", 
                        "TREE", 
                        "FORM", 
                        "IMAGE", 
                        "SLIDER", 
                        "DATA_TABLE", 
                        "VALUE_PICKER"
                    ], 
                    "type": "string"
                }, 
                "orderIndex": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "isMultiValued": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "columns": {
                    "xml": {
                        "wrapped": true, 
                        "name": "column"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "UnspecifiedEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "integerLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "integerLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "integer", 
                            "description": "The integer value.", 
                            "format": "int64"
                        }
                    }, 
                    "description": "Wraps a signed 64-bit integer value."
                }
            ]
        }, 
        "LessThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "IsDefinedOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Schema": {
            "type": "object", 
            "properties": {
                "fields": {
                    "xml": {
                        "name": "field"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                }
            }
        }, 
        "Sort": {
            "type": "object"
        }, 
        "EndPoint": {
            "type": "object", 
            "properties": {
                "serviceInfoId": {
                    "type": "string", 
                    "description": "The service info id associated with this end point.", 
                    "format": "uuid"
                }, 
                "url": {
                    "type": "string", 
                    "description": "The URL of this end point.", 
                    "format": "url"
                }, 
                "endPointAttributes": {
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    }, 
                    "type": "array", 
                    "description": "The specific attributes associated with this end point, if any."
                }, 
                "lastUpdated": {
                    "type": "string", 
                    "description": "The last updated date.", 
                    "format": "date-time"
                }, 
                "endPointType": {
                    "description": "The type identifying this end point.", 
                    "$ref": "#/definitions/EndPointType"
                }, 
                "createdDate": {
                    "type": "string", 
                    "description": "The created date.", 
                    "format": "date-time"
                }, 
                "id": {
                    "type": "string", 
                    "description": "The id.", 
                    "format": "uuid"
                }, 
                "sslTrusts": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The trust anchor certificates used to validate the SSL certificate path for this endpoint. If specified, the elements of this field should contain base64-encoded DER representations of X509 certificates. Multiple certificates may be included to eliminate certificate expiration gap for a single endpoint"
                }
            }, 
            "description": "Represents a service end point. A service may have sub features. These sub features are called service endpoints. A service endpoint lets a service consumer know where to access the endpoint. However the endpoint does not provide automatic service binding. The service consumer needs to know how to use the API provided by service provider endpoint without any assistance from the component registry. Every service can have multiple endpoints. The endpoint is defined by its endpoint type. There could be only one endpoint instances for a given endpoint type and a given service instance."
        }, 
        "FieldReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "path": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "LayoutExtension": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "fieldPrefix": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "extensionId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "extensionPointId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ConditionalEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "cases": {
                            "xml": {
                                "name": "case"
                            }, 
                            "items": {
                                "$ref": "#/definitions/ConditionalEvaluatorCase"
                            }, 
                            "type": "array"
                        }, 
                        "defaulValue": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "MinValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutPlaceholderCell": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ReadOnlyConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MultipleEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "items"
                    ], 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "MinCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "OdataQueryInfo": {
            "type": "object", 
            "properties": {
                "orderBy": {
                    "items": {
                        "$ref": "#/definitions/OrderByExpression"
                    }, 
                    "type": "array"
                }, 
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "rawOrderBy": {
                    "type": "string"
                }, 
                "skip": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "top": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "inlineCount": {
                    "enum": [
                        "NONE", 
                        "ALLPAGES"
                    ], 
                    "type": "string"
                }, 
                "filter": {
                    "$ref": "#/definitions/BoolCommonExpression"
                }, 
                "select": {
                    "items": {
                        "$ref": "#/definitions/EntitySimpleProperty"
                    }, 
                    "type": "array"
                }, 
                "rawFilter": {
                    "type": "string"
                }, 
                "customOptions": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object"
                }, 
                "skipToken": {
                    "type": "string"
                }, 
                "expand": {
                    "items": {
                        "$ref": "#/definitions/EntitySimpleProperty"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "LayoutText": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "value": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ServiceAttribute": {
            "allOf": [
                {
                    "$ref": "#/definitions/Attribute"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutPage": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "sections": {
                    "xml": {
                        "wrapped": true, 
                        "name": "section"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutSection"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "ServiceInfo": {
            "type": "object", 
            "properties": {
                "serviceType": {
                    "description": "Describes the type of the service. A service is identified by it service type. Services of the same service type should have identical features.", 
                    "$ref": "#/definitions/ServiceType"
                }, 
                "endPoints": {
                    "items": {
                        "$ref": "#/definitions/EndPoint"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "The name of the service. NOTE: Services of the same serviceType should have same name.", 
                    "maxLength": 255
                }, 
                "nameMsgKey": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "The service name message key used for localization", 
                    "maxLength": 255
                }, 
                "lastUpdated": {
                    "type": "string", 
                    "description": "The last updated date.", 
                    "format": "date-time"
                }, 
                "serviceVersion": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "The service version. For example, \"1.0.0\".", 
                    "maxLength": 20
                }, 
                "createdDate": {
                    "type": "string", 
                    "description": "The created date.", 
                    "format": "date-time"
                }, 
                "ownerId": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "The solution username of the SSO principal owning the service.", 
                    "maxLength": 255
                }, 
                "serviceAttributes": {
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    }, 
                    "type": "array", 
                    "description": "Service specific attributes to be advertised to service consumers (optional)."
                }, 
                "id": {
                    "type": "string", 
                    "description": "The id.", 
                    "format": "uuid"
                }
            }, 
            "description": "A service is a logical feature unit. One service may have multiple instances. A service may have sub ?features. These sub features are called service end points. A service end point lets a service consumer know where to access the end point. However the end point does not provide automatic service binding. The service consumer needs to know how to use the API provided by service provider end point without any assistance from the component registry. ServiceType: A service is identified by it service type. Services of the same service type should have identical features. Instance identity: A service may register multiple instances. Each instance is identified by a service instance UUID. Service registration, update, and deregistration are on the basis of service instance. If a service has multiple instances registered, unregistering one instance does not affect other instances of the service. Attributes: Services may provide key/value pairs as service attributes.These attributes should not be used for storing significant amount of data. Endpoints: A service may provide a list of endpoints. An endpoint is an interface point and is typically associated with an IP address and a port number. An end point only shows where the service location is, but it does not provide any binding. A client that uses an end point should know how to use the end point independent of the service registration data. The ServiceInfo class provide information about a given registered Service with the ComponentRegistry and its properties."
        }, 
        "EndPointType": {
            "type": "object", 
            "properties": {
                "typeId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "description": "The id of this endpoint type. This is a string understood by both the service and the clientto identify this function of an end point. We recommend the use of Java package-style namesto ensure uniqueness. Some common service end points types are defined by theComponentRegistry.Use the format \"aaa.bbb.ccc...\". For example, the Component Registry end point type id forit's API is \"com.vmware.csp.core.componentregistry.api\" which represents: VMware > CloudAutomation Suite> Common Services > Component Registry > API. Another example: the typeId forthe \"status\" endpoint is \"com.vmware.csp.core.cafe.service.registry.status\".", 
                    "maxLength": 300
                }, 
                "protocol": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "VMOMI", 
                        "WSTRUST", 
                        "REST", 
                        "HTTP", 
                        "FILE", 
                        "UNKNOWN"
                    ], 
                    "type": "string", 
                    "description": "Describes the protocol supported by the endpoint. Primarily used to enable clients to select from multiple end points of the same type."
                }
            }, 
            "description": "Service end point type description. EndPointType typeId together with the endpoint protocol is used to identify an EndPoint."
        }, 
        "decimalLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "decimalLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "number", 
                            "description": "The decimal value.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Wraps a decimal value."
                }
            ]
        }, 
        "value": {
            "xml": {
                "name": "value"
            }, 
            "type": "object", 
            "properties": {
                "label": {
                    "type": "string"
                }, 
                "underlyingValue": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "CriteriaOperator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "InternalConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "View": {
            "type": "object", 
            "properties": {
                "contentType": {
                    "type": "string"
                }
            }
        }, 
        "DataType": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "typeId": {
                    "enum": [
                        "STRING", 
                        "INTEGER", 
                        "DECIMAL", 
                        "MONEY", 
                        "MONEY_RANGE", 
                        "MONEY_TIME_RATE", 
                        "BOOLEAN", 
                        "ENTITY_REFERENCE", 
                        "DATE_TIME", 
                        "TIME_SPAN", 
                        "SECURE_STRING", 
                        "COMPLEX"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "EditableBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DynamicPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }, 
                        "context": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "EncryptedBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ObjectDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "label": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "EntitySimpleProperty": {
            "type": "object", 
            "properties": {
                "propertyName": {
                    "type": "string"
                }
            }
        }, 
        "ServiceRegistration": {
            "required": [
                "serviceInfo", 
                "solutionInfo"
            ], 
            "type": "object", 
            "properties": {
                "solutionInfo": {
                    "description": "The solution user information. This should contain details on a new solution user (to be registered with the SSO werver), which will then register the serviceInfo service..", 
                    "$ref": "#/definitions/SolutionInfo"
                }, 
                "serviceInfo": {
                    "description": "The service to register, using the solution user created from ?solutionInfo.", 
                    "$ref": "#/definitions/ServiceInfo"
                }
            }, 
            "description": "Class used as a holder for ServiceInfo and SolutionInfo in order for the solution info registration and service registration to be performed with one call."
        }, 
        "MinLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }
    }, 
    "swagger": "2.0"
}