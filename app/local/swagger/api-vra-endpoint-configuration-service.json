{
    "info": {
        "version": "7.3.0-SNAPSHOT", 
        "description": "# Endpoint Configuration Service API Specification", 
        "title": "Endpoint Configuration Service API"
    }, 
    "paths": {
        "/api/types": {
            "post": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "$ref": "#/definitions/EndpointType"
                        }
                    }, 
                    "405": {
                        "description": "Request failed validation."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "501": {
                        "description": "Tenantable endpoint types cannot be created."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/EndpointType"
                        }, 
                        "description": "Endpoint type to be created.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "EndpointTypes"
                ], 
                "description": "The API creates a new endpoint type. The API performs the following validation before updating the endpoint type: <br>1. There is an no existing endpoint type with the specified id.</br><br>2. Another endpoint type wth the same name does not exist.</br>", 
                "summary": "Creates a new endpoint type", 
                "operationId": "Create a new endpoint type"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/EndpointType"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "EndpointTypes"
                ], 
                "description": "The API returns paged list of endpoint types.", 
                "summary": "Gets paged list of endpoint types", 
                "operationId": "Get the list of endpoint types"
            }
        }, 
        "/api/categories/{id}": {
            "put": {
                "responses": {
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "204": {
                        "description": ""
                    }, 
                    "503": {
                        "description": "Dependent service is unavailable."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Id of the endpoint type category to be updated.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/EndpointTypeCategory"
                        }, 
                        "description": "Endpoint type category to be updated.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "EndpointTypeCategories"
                ], 
                "description": "The API updates an existing endpoint type category. If the category exists, it is updated.Otherwise, a new endpoint type category is created", 
                "summary": "Updates an existing endpoint type category", 
                "operationId": "Update an existing unified endpoint"
            }, 
            "delete": {
                "responses": {
                    "405": {
                        "description": "Cannot delete endpoint type category that is referenced by other endpoint types."
                    }, 
                    "404": {
                        "description": "Endpoint type category with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "204": {
                        "description": ""
                    }, 
                    "503": {
                        "description": "Dependent service is unavailable."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Id of the endpoint type category to be deleted.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "EndpointTypeCategories"
                ], 
                "description": "The API deletes an existing endpoint type category. The API returns an error, ifendpoint type category with the specified id does not exist or if there are existing endpoint types under the specified category.", 
                "summary": "Deletes an existing endpoint type category", 
                "operationId": "Delete an existing endpoint type category"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "$ref": "#/definitions/EndpointTypeCategory"
                        }
                    }, 
                    "404": {
                        "description": "Endpoint type category <id> does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "400": {
                        "description": "Bad Request."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the endpoint type category to be retrieved.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "EndpointTypeCategories"
                ], 
                "description": "The API returns a specific endpoint type category, based on the category id.", 
                "summary": "Get endpoint type category, based on the category id", 
                "operationId": "Get the endpoint type category based on id"
            }
        }, 
        "/api/data-service/schema/{classId}/default": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }, 
                    "404": {
                        "description": "The endpoint type is not found."
                    }
                }, 
                "summary": "Get the schema for the specified object class", 
                "description": "Get the schema for the specified object class.", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "data-service"
                ]
            }
        }, 
        "/api/data-service/data/{classId}/{id}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The specific instance data is retrieved.", 
                        "schema": {
                            "$ref": "#/definitions/DynamicDataResponse"
                        }
                    }, 
                    "404": {
                        "description": "The endpoint is not found."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The endpoint type id of endpoint object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The endpoint unique identifier.", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/DynamicDataRequest"
                        }, 
                        "description": "The dynamic data request object.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "data-service"
                ], 
                "description": "Retrieve the instance data for service and class", 
                "summary": "Retrieve the instance data.", 
                "operationId": "getInstanceData"
            }
        }, 
        "/api/types/{endpoint-type-id}/endpoints": {
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Endpoint"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the endpoint to be retrieved.", 
                        "required": true, 
                        "type": "string", 
                        "name": "endpoint-type-id", 
                        "in": "path"
                    }, 
                    {
                        "description": "Whether to retrieve secure data.", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "secureFields", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "Endpoints"
                ], 
                "description": "The API returns paged list of endpoints.", 
                "summary": "Gets paged list of endpoints, based on type", 
                "operationId": "Get the list of endpoints by type"
            }
        }, 
        "/api/endpoints": {
            "post": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    }, 
                    "405": {
                        "description": "Request failed validation."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "503": {
                        "description": "Dependent service is unavailable."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }, 
                        "description": "Endpoint to be created.", 
                        "required": true, 
                        "name": "endpoint", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "Endpoints"
                ], 
                "description": "The API creates a new endpoint. The API performs the following validation before creating the endpoint:<br>1. The id of the endpoint is null.</br><br>2. Another endpoint wth the same name exist.</br><br>3. The type of the endpoint is already registered.</br><br>4. The endpoint passes schema validation, based on the endpoint type's schema.</br>", 
                "summary": "Creates a new endpoint", 
                "operationId": "Create a new endpoint"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Endpoint"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "**DEPRECATED** The category of the endpoints to be retrieved.", 
                        "required": false, 
                        "type": "string", 
                        "name": "category", 
                        "in": "query"
                    }, 
                    {
                        "description": "**DEPRECATED** The type of the endpoints to be retrieved.", 
                        "required": false, 
                        "type": "string", 
                        "name": "type", 
                        "in": "query"
                    }, 
                    {
                        "description": "Whether to retrieve secure data.", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "secureFields", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "Endpoints"
                ], 
                "description": "The API returns paged list of endpoints.", 
                "summary": "Gets paged list of endpoints, optionally based on type or category", 
                "operationId": "Get the list of endpoints"
            }
        }, 
        "/api/categories": {
            "post": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "$ref": "#/definitions/EndpointTypeCategory"
                        }
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "503": {
                        "description": "Dependent service is unavailable."
                    }, 
                    "400": {
                        "description": "Bad request."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/EndpointTypeCategory"
                        }, 
                        "description": "Endpoint type category to be created.", 
                        "required": true, 
                        "name": "endpointCategory", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "EndpointTypeCategories"
                ], 
                "description": "The API creates a new endpoint type category. The API validates that the endpoint type category does not exist already, before creating new endpoint type category", 
                "summary": "Creates a new endpoint type category", 
                "operationId": "Create a new endpoint type category"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/EndpointTypeCategory"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "EndpointTypeCategories"
                ], 
                "description": "The API returns paged list of endpoint type categories.", 
                "summary": "Gets paged list of endpoint type categories", 
                "operationId": "Get the list of endpoint type categories"
            }
        }, 
        "/api/associationtypes/{id}": {
            "put": {
                "responses": {
                    "405": {
                        "description": "Request failed validation."
                    }, 
                    "404": {
                        "description": "Association type with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "Id of the association type to be updated.", 
                        "format": "uuid", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/AssociationType"
                        }, 
                        "description": "Association type to be updated with.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "AssocationTypes"
                ], 
                "description": "The API updates an existing association type. The API performs the following validation before updating the association type:<br>1. There is an existing association type with the specified id.</br><br>2. Another association type wth the same name does not exist.</br>", 
                "summary": "Updates an existing association type", 
                "operationId": "Update an existing association type"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "405": {
                        "description": "Cannot delete association type, when endpoints of that type exist."
                    }, 
                    "404": {
                        "description": "Association type with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Id of the association type to be deleted.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "AssocationTypes"
                ], 
                "description": "The API deletes an existing association type. The API returns an error, ifassociation type with the specified id does not exist.", 
                "summary": "Deletes an existing association type", 
                "operationId": "Delete an existing association type"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "$ref": "#/definitions/AssociationType"
                        }
                    }, 
                    "404": {
                        "description": "Association type with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the association type to be retrieved.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "AssocationTypes"
                ], 
                "description": "The API returns a specific association type, based on the association type id.", 
                "summary": "Get association type", 
                "operationId": "Get association type, based on id"
            }
        }, 
        "/api/types/{id}/associationtypes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/AssociationType"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "404": {
                        "description": "Endpoint type with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the endpoint type for which association types need to be retrieved.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "EndpointTypes"
                ], 
                "description": "The API returns list of association types, based on the endpoint type id.", 
                "summary": "Get association types for an endpoint type", 
                "operationId": "Get association types, based on an endpoint id"
            }
        }, 
        "/api/endpoints/validate": {
            "post": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "$ref": "#/definitions/EndpointValidationResult"
                        }
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }, 
                        "description": "Endpoint to be validated.", 
                        "required": true, 
                        "name": "endpoint", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "Endpoints"
                ], 
                "description": "The API validates an endpoint", 
                "summary": "Validate endpoint data", 
                "operationId": "Validate endpoint"
            }
        }, 
        "/api/associationtypes": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/AssociationType"
                        }
                    }, 
                    "405": {
                        "description": "Request failed validation."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "501": {
                        "description": "Tenantable association types cannot be created."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AssociationType"
                        }, 
                        "description": "Association type to be created.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "AssocationTypes"
                ], 
                "description": "The API creates a new association type. The API performs the following validation before creating the association type: <br>1. There is an no existing association type with the specified id.</br><br>2. The From Endpoint Type and To Endpoint Type values are checked  to make sure they exist.</br><br>3. Make sure the cardinality value is valid (0-3). </br>", 
                "summary": "Creates a new association type", 
                "operationId": "Create a new association type"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/AssociationType"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The type  of the endpoints to be retrieved.", 
                        "required": false, 
                        "type": "string", 
                        "name": "endpointType", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "AssocationTypes"
                ], 
                "description": "The API returns paged list of association types.", 
                "summary": "Gets paged list of association types", 
                "operationId": "Get the list of association types"
            }
        }, 
        "/api/endpoints/{id}": {
            "put": {
                "responses": {
                    "405": {
                        "description": "Request failed validation."
                    }, 
                    "404": {
                        "description": "Endpoint with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "204": {
                        "description": ""
                    }, 
                    "503": {
                        "description": "Dependent service is unavailable."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Id of the endpoint to be updated.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }, 
                        "description": "Endpoint to be updated.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "Endpoints"
                ], 
                "description": "The API updates an existing endpoint. The API performs the following validation before updating the endpoint:<br>1. There is an existing endpoint with the specified id.</br><br>2. Another endpoint wth the same name does exist.</br><br>3. The type of the endpoint is already registered.</br><br>4. The endpoint passes schema validation, based on the endpoint type's schema.</br>", 
                "summary": "Updates an existing endpoint", 
                "operationId": "Update an existing endpoint"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "404": {
                        "description": "Endpoint with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "503": {
                        "description": "Dependent service is unavailable."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Id of the endpoint to be deleted.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "Endpoints"
                ], 
                "description": "The API deletes an existing endpoint. The API returns an error, ifendpoint with the specified id does not exist.", 
                "summary": "Deletes an existing endpoint", 
                "operationId": "Delete an existing endpoint"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    }, 
                    "404": {
                        "description": "Endpoint with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "400": {
                        "description": "Bad request."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the endpoint to be retrieved.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "Whether to return secure fields such as password or encrypted custom properties.", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "secureFields", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "Endpoints"
                ], 
                "description": "The API returns a specific endpoint, based on the endpoint id.", 
                "summary": "Get endpoint, based on the endpoint id", 
                "operationId": "Get the endpoint based on id"
            }
        }, 
        "/api/types/{id}": {
            "put": {
                "responses": {
                    "405": {
                        "description": "Request failed validation."
                    }, 
                    "404": {
                        "description": "Endpoint type with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }, 
                    "204": {
                        "description": ""
                    }, 
                    "501": {
                        "description": "Tenantable endpoint types cannot be created."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Id of the endpoint type to be updated.", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/EndpointType"
                        }, 
                        "description": "Endpoint type to be updated with.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "EndpointTypes"
                ], 
                "description": "The API updates an existing endpoint type. The API performs the following validation before updating the endpoint type:<br>1. There is an existing endpoint type with the specified id.</br><br>2. Another endpoint type wth the same name does not exist.</br>", 
                "summary": "Updates an existing endpoint type", 
                "operationId": "Update an existing endpoint type"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "405": {
                        "description": "Cannot delete endpoint type, when endpoints of that type exist."
                    }, 
                    "404": {
                        "description": "Endpoint type with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Id of the endpoint type to be deleted.", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "EndpointTypes"
                ], 
                "description": "The API deletes an existing endpoint type. The API returns an error, ifendpoint type with the specified id does not exist.", 
                "summary": "Deletes an existing endpoint type", 
                "operationId": "Delete an existing endpoint type"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "$ref": "#/definitions/EndpointType"
                        }
                    }, 
                    "404": {
                        "description": "Endpoint type with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the endpoint type to be retrieved.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "EndpointTypes"
                ], 
                "description": "The API returns a specific endpoint type, based on the endpoint type id.", 
                "summary": "Get endpoint type", 
                "operationId": "Get endpoint type, based on id"
            }
        }, 
        "/api/endpoints/{id}/canedit": {
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "type": "boolean"
                        }
                    }, 
                    "404": {
                        "description": "Endpoint with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Id of the endpoint to check if it can be edited.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "Endpoints"
                ], 
                "description": "The API checks an existing endpoint to see if it can be edited. The API returns falseendpoint with the specified id cannot be edited. It returns true otherwise.", 
                "summary": "Can edit an existing endpoint", 
                "operationId": "Can edit an existing endpoint"
            }
        }, 
        "/api/categories/{endpoint-category-id}/endpoints": {
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Endpoint"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the endpoint to be retrieved.", 
                        "required": true, 
                        "type": "string", 
                        "name": "endpoint-category-id", 
                        "in": "path"
                    }, 
                    {
                        "description": "Whether to retrieve secure data.", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "secureFields", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "Endpoints"
                ], 
                "description": "The API returns paged list of endpoints.", 
                "summary": "Gets paged list of endpoints, optionally based on category", 
                "operationId": "Get the list of endpoints by category"
            }
        }, 
        "/api/endpoints/{id}/candelete": {
            "get": {
                "responses": {
                    "200": {
                        "description": "", 
                        "schema": {
                            "type": "boolean"
                        }
                    }, 
                    "404": {
                        "description": "Endpoint with the specified id does not exist."
                    }, 
                    "403": {
                        "description": "Unauthorized."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Id of the endpoint to check if it can be deleted.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "Endpoints"
                ], 
                "description": "The API checks an existing endpoint to see if it can be deleted. The API returns falseendpoint with the specified id cannot be deleted. It returns true otherwise.", 
                "summary": "Can delete an existing endpoint", 
                "operationId": "Can delete an existing endpoint"
            }
        }, 
        "/api/data-service/schema/{classId}/types/{typeFilter}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "summary": "Get the schema for the specified object type", 
                "description": "This returns the schema of a particular type within a class of object.", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "data-service"
                ]
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "tags": [
        {
            "name": "AssocationTypes"
        }, 
        {
            "name": "EndpointTypeCategories"
        }, 
        {
            "name": "EndpointTypes"
        }, 
        {
            "name": "Endpoints"
        }, 
        {
            "name": "data-service"
        }
    ], 
    "basePath": "/endpoint-configuration-service", 
    "definitions": {
        "ConstantValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/literal"
                        }
                    }
                }
            ]
        }, 
        "EndpointTypeCategory": {
            "type": "object", 
            "properties": {
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }
            }
        }, 
        "GreaterThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NotEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "complexLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "complexLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's class."
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component type."
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The type filter for this literal."
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component."
                        }, 
                        "values": {
                            "description": "Map of values, keyed by the field ids of some complex type.", 
                            "$ref": "#/definitions/literalMap"
                        }
                    }, 
                    "description": "A complex value composed of multiple values keyed by the field ids of some complex type."
                }
            ]
        }, 
        "ParameterMapping": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "SubsetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "moneyRange": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRange"
                    }, 
                    "type": "object", 
                    "properties": {
                        "maxValue": {
                            "type": "number", 
                            "description": "The upper limit of the range.", 
                            "format": "double"
                        }, 
                        "minValue": {
                            "type": "number", 
                            "description": "The lower limit of the range.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a range of money values, between some defined minimums and maximums."
                }
            ]
        }, 
        "EndsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "VisibilityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ParameterMappingCollection": {
            "type": "object", 
            "properties": {
                "params": {
                    "xml": {
                        "wrapped": true, 
                        "name": "param"
                    }, 
                    "items": {
                        "$ref": "#/definitions/ParameterMapping"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "DisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "booleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "default": false, 
                            "type": "boolean", 
                            "description": "The boolean value."
                        }
                    }, 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "money": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "money"
                    }, 
                    "type": "object", 
                    "properties": {
                        "amount": {
                            "type": "number", 
                            "description": "The amount associated with this value (with no specific currency).", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a single, precise monetary value."
                }
            ]
        }, 
        "OrClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "moneyTimeRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyTimeRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "basis": {
                            "description": "The span of time to calculate the rate of money for.", 
                            "$ref": "#/definitions/timeSpan"
                        }
                    }, 
                    "description": "Represents a rate of money over time."
                }
            ]
        }, 
        "UniqueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "stringLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "stringLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a String value."
                }
            ]
        }, 
        "entityRef": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRef"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier of the type or category to which the referenced entity belongs."
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The unique identifier of the referenced entity, encoded as a string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
                        }
                    }, 
                    "description": "Represents a reference to an entity defined somewhere in the suite."
                }
            ]
        }, 
        "CallbackEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ElementState": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Constraint"
                    }, 
                    "type": "array"
                }, 
                "dependencies": {
                    "xml": {
                        "wrapped": true, 
                        "name": "dependency"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "type": "string"
                    }
                }
            }
        }, 
        "Clause": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "EndpointValidationResult": {
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "SUCCESS", 
                        "INVALID_CERTIFICATE", 
                        "AGENT_NOT_FOUND", 
                        "HOST_NOT_REACHABLE", 
                        "INVALID_CREDENTIALS", 
                        "UNKNOWN_FAILURE", 
                        "TIMEOUT"
                    ], 
                    "type": "string"
                }, 
                "message": {
                    "type": "string"
                }, 
                "certificateInfo": {
                    "$ref": "#/definitions/CertificateInfo"
                }
            }
        }, 
        "ComplexEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "values": {
                            "additionalProperties": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "object"
                        }
                    }
                }
            ]
        }, 
        "StartsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LessThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "multipleLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "multipleLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "xml": {
                                "name": "item"
                            }, 
                            "items": {
                                "$ref": "#/definitions/literal"
                            }, 
                            "type": "array", 
                            "description": "The list of specified values. NOTE: All values must be of the same data type."
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string", 
                            "description": "The data type of the items in the list."
                        }
                    }, 
                    "description": "A literal which represents multiple values. All of these component values must be of the same data type."
                }
            ]
        }, 
        "PageAssociationType": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/AssociationType"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "ContextPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "RefreshOnChangeBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SkipExportBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "FixedValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "value": {
            "xml": {
                "name": "value"
            }, 
            "type": "object", 
            "properties": {
                "label": {
                    "type": "string"
                }, 
                "underlyingValue": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "CoalesceEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "moneyRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "cost": {
                            "description": "The cost (including optional currency code).", 
                            "$ref": "#/definitions/literal"
                        }
                    }, 
                    "description": "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB."
                }
            ]
        }, 
        "PageEndpointType": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/EndpointType"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "secureString": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "secureString"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a secured string value, such as a password."
                }
            ]
        }, 
        "ComplexDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }
            ]
        }, 
        "PermissibleValueList": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "customAllowed": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "Evaluator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ConstantClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/booleanLiteral"
                        }
                    }
                }
            ]
        }, 
        "literalMap": {
            "xml": {
                "name": "literalMap"
            }, 
            "type": "object", 
            "properties": {
                "entries": {
                    "xml": {
                        "name": "entry"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LiteralMapEntry"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Equivalent of java.util.Map"
        }, 
        "AssociationType": {
            "required": [
                "cardinality"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "toType": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "fromType": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "cardinality": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "uuid"
                }, 
                "description": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 2000
                }
            }
        }, 
        "EndpointMenuItem": {
            "type": "object", 
            "properties": {
                "extensionId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "displayName": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "menuId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "location": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 2083
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "icon": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "MinimumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "StaticPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "values": {
                            "xml": {
                                "name": "value"
                            }, 
                            "items": {
                                "$ref": "#/definitions/value"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "MandatoryConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaximumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "RegexpConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "errorMessage": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "PageEndpoint": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/Endpoint"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "WrapperClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LiteralMapEntry": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/literal"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "ResetValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "dateTimeLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "dateTimeLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The date.", 
                            "format": "date-time"
                        }
                    }, 
                    "description": "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class."
                }
            ]
        }, 
        "IncrementBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "AndClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "CustomPropertyDefinitionMetadata": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "required": [
                        "field"
                    ], 
                    "type": "object", 
                    "properties": {
                        "field": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                }
            ]
        }, 
        "EqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NullDisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SupersetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NotClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClause": {
                            "$ref": "#/definitions/Clause"
                        }
                    }
                }
            ]
        }, 
        "ConditionalEvaluatorCase": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "condition": {
                    "$ref": "#/definitions/Clause"
                }
            }
        }, 
        "EndpointType": {
            "type": "object", 
            "properties": {
                "category": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "displayName": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "description": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "serviceProviderId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "menuItems": {
                    "items": {
                        "$ref": "#/definitions/EndpointMenuItem"
                    }, 
                    "type": "array"
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "tenantId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "capabilities": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "categoryDisplayName": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "tenantable": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "schema": {
                    "$ref": "#/definitions/Schema"
                }
            }
        }, 
        "literal": {
            "xml": {
                "name": "literal"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "description": "Wraps a value such that values of different types can be treated generically."
        }, 
        "Association": {
            "type": "object", 
            "properties": {
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "toEndpointId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "uuid"
                }, 
                "fromEndpointId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "uuid"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "customProperties": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "uuid"
                }, 
                "associationTypeInfoId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "uuid"
                }
            }
        }, 
        "entityRefEx": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRefEx"
                    }, 
                    "type": "object", 
                    "properties": {
                        "href": {
                            "type": "string", 
                            "description": "the Href"
                        }
                    }, 
                    "description": "Represents a reference to an entity by uri"
                }
            ]
        }, 
        "Constraint": {
            "discriminator": "type", 
            "required": [
                "value"
            ], 
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }
            }
        }, 
        "DynamicDataResponse": {
            "type": "object", 
            "properties": {
                "values": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "BooleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "IaasPropertyNameBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CustomValidationConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Expression": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "operator": {
                            "$ref": "#/definitions/CriteriaOperator"
                        }, 
                        "rightOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }, 
                        "leftOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "DynamicValueContext": {
            "required": [
                "parameterMappings"
            ], 
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "providerEntityId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "WithinOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DefaultValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "timeSpan": {
            "xml": {
                "name": "timeSpan"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "amount": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "description": "The amount for the time span.", 
                    "format": "int64"
                }, 
                "unit": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "MILLISECONDS", 
                        "SECONDS", 
                        "MINUTES", 
                        "HOURS", 
                        "DAYS", 
                        "WEEKS", 
                        "MONTHS", 
                        "YEARS"
                    ], 
                    "type": "string", 
                    "description": "The unit of measure for the time span. e.g: days."
                }
            }, 
            "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
        }, 
        "MaxValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CertificateInfo": {
            "type": "object", 
            "properties": {
                "notValidAfter": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "notValidBefore": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "principalName": {
                    "type": "string"
                }, 
                "thumbprint": {
                    "type": "string"
                }, 
                "issuerName": {
                    "type": "string"
                }, 
                "identityCertificateExists": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "EntityReferenceDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DynamicDataRequest": {
            "type": "object", 
            "properties": {
                "ignoreUnknownFields": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "ids": {
                    "xml": {
                        "name": "id"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "tenantId": {
                    "type": "string"
                }
            }
        }, 
        "MonetaryValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "literal"
                    }, 
                    "type": "object", 
                    "properties": {
                        "currencyCode": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The ISO 4217 code used to identify the currency (if any) associated with this value."
                        }
                    }, 
                    "description": "Base type for representing monetary values, encapsulating both some kind of quantity and a currency."
                }
            ]
        }, 
        "PrimitiveDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "typeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "TimeSpan": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "timeSpan"
                    }, 
                    "type": "object", 
                    "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
                }
            ]
        }, 
        "ExternalValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "dynamicValueProviderInfo"
                    ], 
                    "type": "object", 
                    "properties": {
                        "dynamicValueProviderInfo": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "PageEndpointTypeCategory": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/EndpointTypeCategory"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "ContainsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Field": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "dataType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "permissibleValues": {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                "label": {
                    "type": "string"
                }, 
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "displayAdvice": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "TEXTBOX", 
                        "HYPERLINK", 
                        "EMAIL", 
                        "TEXTAREA", 
                        "DATE_TIME_PICKER", 
                        "CHECKBOX", 
                        "YES_NO", 
                        "CHECKBOX_GROUP", 
                        "DUAL_LIST", 
                        "RADIO_GROUP", 
                        "DROPDOWN", 
                        "LIST", 
                        "SEARCHER", 
                        "TREE", 
                        "FORM", 
                        "IMAGE", 
                        "SLIDER", 
                        "DATA_TABLE", 
                        "VALUE_PICKER"
                    ], 
                    "type": "string"
                }, 
                "orderIndex": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "isMultiValued": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "columns": {
                    "xml": {
                        "wrapped": true, 
                        "name": "column"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "UnspecifiedEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LessThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "IsDefinedOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Schema": {
            "type": "object", 
            "properties": {
                "fields": {
                    "xml": {
                        "name": "field"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                }
            }
        }, 
        "Sort": {
            "type": "object"
        }, 
        "FieldReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "path": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ConditionalEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "cases": {
                            "xml": {
                                "name": "case"
                            }, 
                            "items": {
                                "$ref": "#/definitions/ConditionalEvaluatorCase"
                            }, 
                            "type": "array"
                        }, 
                        "defaulValue": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "MinValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ReadOnlyConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MultipleEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "items"
                    ], 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "MinCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "integerLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "integerLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "integer", 
                            "description": "The integer value.", 
                            "format": "int64"
                        }
                    }, 
                    "description": "Wraps a signed 64-bit integer value."
                }
            ]
        }, 
        "Endpoint": {
            "required": [
                "extensionData"
            ], 
            "type": "object", 
            "properties": {
                "associations": {
                    "items": {
                        "$ref": "#/definitions/Association"
                    }, 
                    "type": "array"
                }, 
                "typeId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "extensionData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "typeDisplayName": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "uri": {
                    "type": "string"
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "tenantId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "uuid"
                }, 
                "description": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }
            }
        }, 
        "decimalLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "decimalLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "number", 
                            "description": "The decimal value.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Wraps a decimal value."
                }
            ]
        }, 
        "CriteriaOperator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "InternalConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DataType": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "typeId": {
                    "enum": [
                        "STRING", 
                        "INTEGER", 
                        "DECIMAL", 
                        "MONEY", 
                        "MONEY_RANGE", 
                        "MONEY_TIME_RATE", 
                        "BOOLEAN", 
                        "ENTITY_REFERENCE", 
                        "DATE_TIME", 
                        "TIME_SPAN", 
                        "SECURE_STRING", 
                        "COMPLEX"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "EditableBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DynamicPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }, 
                        "context": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "EncryptedBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ObjectDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "label": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "MinLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }
    }, 
    "swagger": "2.0"
}