{
    "info": {
        "version": "7.3.0-SNAPSHOT", 
        "description": "# Catalog Service API Specification", 
        "title": "Catalog Service API"
    }, 
    "paths": {
        "/api/consumer/resources/{id}/form/{elementId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get Resource Details Form Element Values", 
                "description": "Retrieves a list of the permissible values for a specified element within the details form.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "The identifier of the element within the form.", 
                        "required": true, 
                        "type": "string", 
                        "name": "elementId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "Specifies information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/requests/{id}/forms/details/{elementId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get Details Form Field Values", 
                "description": "Retrieves the list of values for an element within the details form of a specified request.", 
                "parameters": [
                    {
                        "description": "The request identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "The identifier of a target element within the request.", 
                        "required": true, 
                        "type": "string", 
                        "name": "elementId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "Specifies information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/requests/{id}/forms/submission/{elementId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get Submission Form Field Values", 
                "description": "Retrieves the list of values for an element within the submission form of a specified request.", 
                "parameters": [
                    {
                        "description": "The request identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "The identifier of a target element within the request.", 
                        "required": true, 
                        "type": "string", 
                        "name": "elementId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "Specifies information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resourceTypes/{id}/descendants": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/entities"
                        }
                    }
                }, 
                "summary": "Get Descendant Resource Type", 
                "description": "Gets a hierarchy of descendant resource types for given primary type.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the primary resource type", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/resourceOperations/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ResourceOperation"
                        }
                    }
                }, 
                "summary": "Update Resource Operation", 
                "description": "Update an existing ResourceOperation.", 
                "parameters": [
                    {
                        "description": "The id of the resource operation to update.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ResourceOperationUpdateRequest"
                        }, 
                        "description": "The updated data for the resource operation.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ResourceOperation"
                        }
                    }
                }, 
                "summary": "Get Operation", 
                "description": "Get a ResourceOperation specified by its id.", 
                "parameters": [
                    {
                        "description": "The unique id of the resource operation to retrieve.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/icons/{id}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Delete an Icon", 
                "description": "Delet an Icon from the service catalog. If the icon is one of the default system icons, it will be reverted to its default state instead of being deleted.", 
                "parameters": [
                    {
                        "description": "The id of the icon to delete", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "Get Icon", 
                "description": "Retrieve an existing Icon that was published to the service catalog.", 
                "parameters": [
                    {
                        "description": "The id which identifies a icon.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/entitledCatalogItems/{id}/requests/schema": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "summary": "Get Resource Action Request Schema", 
                "description": "Get the schema for requesting a Catalog Item to be provisioned.", 
                "parameters": [
                    {
                        "description": "The UUID of a catalog item", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/requests/{id}/forms/details": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/form"
                        }
                    }
                }, 
                "summary": "Get Details Form", 
                "description": "Retrieve a read-only details form for presenting an existing request.", 
                "parameters": [
                    {
                        "description": "The request identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/entitledCatalogItems/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/consumerEntitledCatalogItem"
                        }
                    }
                }, 
                "summary": "Get a Consumer Entitled Catalog Item", 
                "description": "Get a ConsumerEntitledCatalogItem by its unique Id.ConsumerEntitledCatalogItem are basically catalog items: - in an active state. - the current user has the right to consume. - the current user is entitled to consume. - associated to a service.", 
                "parameters": [
                    {
                        "description": "The UUID of a catalog item", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/icons/{id}/download": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "summary": "Download Icon", 
                "description": "Download an existing Icon from service catalog.", 
                "parameters": [
                    {
                        "description": "The id which identifies a icon.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/catalogItems/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "Update Catalog Item", 
                "description": "Updates an existing {@link CatalogItem} upon the existence and validation of CatalogItem. e.g. it validates for allowed state transitions before making the update to the catalog item.", 
                "parameters": [
                    {
                        "description": "The unique identifier for the catalog item.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/CatalogItem"
                        }, 
                        "description": "The catalog item to be updated.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/CatalogItem"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The unique identifier for the CatalogItem.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ], 
                "description": "Retrieve an existing CatalogItem that the user is permitted to review, even if it were not published or entitled to them.", 
                "summary": "Find catalog item", 
                "operationId": "getCatalogItemCanReview"
            }
        }, 
        "/api/catalogItems": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageCatalogItem"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ], 
                "description": "Finds all CatalogItems that the current user is allowed to review.", 
                "summary": "Find catalog items", 
                "operationId": "getCatalogItemsForUser"
            }
        }, 
        "/api/consumer/requests/{id}/forms/submission/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get Submission Form Element Metadata", 
                "description": "Retrieves the metadata of one or more elements within the submission form of a specified request.", 
                "parameters": [
                    {
                        "description": "The request identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "description": "Specifies information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/requests/{requestId}": {
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Update request", 
                "description": "Update a {@link Request} upon the existence of the Request and validation of Request fields. This will save a Request creation event as well.", 
                "parameters": [
                    {
                        "description": "UUID of the Request to be updated", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "requestId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }, 
                        "description": "The Request to be updated", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Delete Request", 
                "description": "Deletes a Request corresponding to its unique Id. The Request is owned by the current user. To be deleted, a request must be in an {@link RequestState}.UNSUBMITTED state. This will delete physically the request.", 
                "parameters": [
                    {
                        "description": "The uuid of a Request.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "requestId"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }
                    }
                }, 
                "summary": "Get Request", 
                "description": "Gets a Request corresponding to its unique Id. The Request is owned by the current user.", 
                "parameters": [
                    {
                        "description": "UUID of a Request.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "requestId"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/entitledCatalogItemViews": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageConsumerEntitledCatalogItemView"
                        }
                    }
                }, 
                "summary": "Get Consumer Catalog Item Views", 
                "description": "Get all ConsumerEntitledCatalogItemView for the current user.ConsumerEntitledCatalogItemView are basically catalog items: - in an active state. - the current user has the right to consume. - the current user is entitled to consume. - associated to a service.", 
                "parameters": [
                    {
                        "description": "optional query parameter to filter the returned Catalog Items by one specific Service.", 
                        "format": "uuid", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "serviceId"
                    }, 
                    {
                        "description": "optional query parameter providing the value of the user Id to use when the intention is to request on behalf of someone else.", 
                        "required": false, 
                        "type": "string", 
                        "name": "onBehalfOf", 
                        "in": "query"
                    }, 
                    {
                        "description": "optional query parameter which dictates if the output should be filtered for given subtenant only.", 
                        "required": false, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/providers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageProvider"
                        }
                    }
                }, 
                "summary": "Get Providers", 
                "description": "Finds all Providers.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/requests/template": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/CatalogResourceRequest"
                        }
                    }
                }, 
                "summary": "Get Catalog Resource Request Template", 
                "description": "Retrieve a template CatalogResourceRequest for the given context. This object may be updated as desired and posted/submitted to /{resourceId}/actions/{resourceActionId}/requests (submitCatalogResourceRequest) in order to trigger a 'day 2 action' on the requested resource.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }, 
                    {
                        "description": "The id of the action to perform.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceActionId"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/requests/{id}/forms/submission": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/form"
                        }
                    }
                }, 
                "summary": "Get Submission Form", 
                "description": "Retrieve an editable form for submitting an existing, un-submitted request.", 
                "parameters": [
                    {
                        "description": "The uuid of a Request.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/{id}/icon": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "summary": "Get Icon For Resource", 
                "description": "Get the icon for a given resource", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/forms/request": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/form"
                        }
                    }
                }, 
                "summary": "Get Resource Action Request Form", 
                "description": "Get the form for triggering a resource action.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }, 
                    {
                        "description": "The id of the action to perform.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceActionId"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resourceOperations/{id}/icon": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "summary": "Get Resource Operation Icon", 
                "description": "Get a Resource Operation's Icon according to its unique id provided in the path.", 
                "parameters": [
                    {
                        "description": "The UUID of an resource operation", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/catalogItems/{catalogItemId}/entitlements": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageEntitlement"
                        }
                    }
                }, 
                "summary": "Find all entitlements for catalog item", 
                "description": "Retrieve all entitlements for a CatalogItem and the service to which the catalog item belongs.If the service identifier is not supplied while making the API call ; it is computed on the server side.", 
                "parameters": [
                    {
                        "description": "The catalog item Id for which all the entitlements have to be returned.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "catalogItemId"
                    }, 
                    {
                        "description": "The service Id for which all the entitlements have to be returned.This is an optional parameter", 
                        "format": "uuid", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "serviceId"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/catalogItems/{id}/forms/details/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get details form element metadata", 
                "description": "Retrieves the metadata of one or more elements within the details form of a specified catalog item.", 
                "parameters": [
                    {
                        "description": "The catalog item identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "The ID of the Business Group used for viewing a Catalog Item.", 
                        "required": false, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "description": "The value of the user Id to use when the intention is to request on behalf of someone else.", 
                        "required": false, 
                        "type": "string", 
                        "name": "requestedFor", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "description": "Specifies information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/{resourceId}/actions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/entities"
                        }
                    }
                }, 
                "summary": "Get Available Resource Operations", 
                "description": "Retrieves the complete list of available operations that can be performed on a given resource.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/requests/{id}/forms/details/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get Details Form Element Metadata", 
                "description": "Retrieves the metadata of one or more elements within the details form of a specified request.", 
                "parameters": [
                    {
                        "description": "The request identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "description": "Specifies information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/catalogItems/{id}/forms/request/{elementId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get request form field value", 
                "description": "Retrieves the paged list of values for an element within the request form of a specified catalog item.", 
                "parameters": [
                    {
                        "description": "The catalog item identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "The identifier of a target element within the catalog item.", 
                        "required": true, 
                        "type": "string", 
                        "name": "elementId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The ID of the Business Group used for viewing a Catalog Item.", 
                        "required": false, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "description": "The value of the user Id to use when the intention is to request on behalf of someone else.", 
                        "required": false, 
                        "type": "string", 
                        "name": "requestedFor", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "Specifies information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/entitledCatalogItems/{id}/requests": {
            "post": {
                "description": "Create and save a CatalogItemProvisioningRequest for the specified Catalog Item. If successful, the request will be saved in a 'Submitted' state. Its state should change to 'InProgress' during provisioning, and if all goes well, eventually become 'Success'. If any errors are encountered, its state will become 'Failed'.", 
                "parameters": [
                    {
                        "description": "The UUID of a catalog item", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "A business group (i.e. subtenant) identifier.", 
                        "required": false, 
                        "type": "string", 
                        "name": "businessGroupId", 
                        "in": "query"
                    }, 
                    {
                        "description": "The fully qualified username of the user whom this request is being made in behalf of.", 
                        "required": false, 
                        "type": "string", 
                        "name": "requestedFor", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/CatalogItemProvisioningRequest"
                        }, 
                        "description": "The CatalogItemProvisioningRequest to be submitted.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/json"
                ], 
                "tags": [
                    "catalog"
                ], 
                "summary": "Submit Catalog Item Provisioning Request", 
                "consumes": [
                    "application/json"
                ], 
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/CatalogItemRequest"
                        }
                    }
                }
            }
        }, 
        "/api/consumer/catalogItems/{id}/icon": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "summary": "Find catalog item icon", 
                "description": "Get a CatalogItem's Icon according to its unique id provided in the path.", 
                "parameters": [
                    {
                        "description": "The UUID of a catalog item", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/catalogItemTypes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageCatalogItemType"
                        }
                    }
                }, 
                "summary": "Get catalog item types", 
                "description": "Find all CatalogItemTypes that are available in the system.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/services": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageService"
                        }
                    }
                }, 
                "summary": "Get Services", 
                "description": "Get all Active Services the current user is entitled to see. Each returned services must own at least one Catalog Item the current user is entitled to.", 
                "parameters": [
                    {
                        "description": "The value of the user Id when the intention is to request on behalf of someone else", 
                        "required": false, 
                        "type": "string", 
                        "name": "onBehalfOf", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/catalogResource"
                        }
                    }
                }, 
                "summary": "Get Resource", 
                "description": "Get a resource by its unique identifier. It retrieves a specific resource with its up to date Provider Data by its unique id.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource, which has been generated by the service catalog.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/requests": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }
                    }
                }, 
                "summary": "Create request", 
                "description": "Create and save a Request upon validation on Request fields. This will save a Request creation event as well.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }, 
                        "description": "The Request to be created and saved.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/requests/schema": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "summary": "Get Resource Action Request Schema", 
                "description": "Get the schema for triggering a resource action.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }, 
                    {
                        "description": "The id of the action to perform.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceActionId"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/resourceTypes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageResourceType"
                        }
                    }
                }, 
                "summary": "Get Resource Types", 
                "description": "Finds all ResourceTypes that the user has permissions to review.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/entitlements": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Entitlement"
                        }
                    }
                }, 
                "summary": "Create Entitlement", 
                "description": "Create an {@link Entitlement}.This will check the existence of the Entitlement and validate its fields according to business rules.For e.g.it validates that an organization is specified for the entitlement.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/Entitlement"
                        }, 
                        "description": "The Entitlement to create.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/catalogItems/{id}/forms/request": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/form"
                        }
                    }
                }, 
                "summary": "Get request form", 
                "description": "Retrieve an editable form for submitting a request for the specified catalog item.", 
                "parameters": [
                    {
                        "description": "The catalog item identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "The ID of the Business Group used for viewing a Catalog Item.", 
                        "required": false, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "description": "The value of the user Id to use when the intention is to request on behalf of someone else.", 
                        "required": false, 
                        "type": "string", 
                        "name": "requestedFor", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/requests/{id}/resourceViews": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageConsumerResourceView"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "UUID of a Request.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/json"
                ], 
                "tags": [
                    "catalog"
                ], 
                "summary": "Get User Friendly Resource Provisioned By Request", 
                "description": "Retrieves the resources (using a domain object targetted for direct REST API users) that were provisioned as a result of a given request."
            }
        }, 
        "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/forms/request/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get Resource Action Request Form Element State", 
                "description": "Retrieves the metadata of one or more elements within the request form of a resource action.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }, 
                    {
                        "description": "The id of the action to perform.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceActionId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "description": "Specifies information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/resourceOperations": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageResourceOperation"
                        }
                    }
                }, 
                "summary": "Get Operations", 
                "description": "Get the ResourceOperations that the current user has permission to read.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/types/{resourceTypeId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageConsumerResource"
                        }
                    }
                }, 
                "summary": "Get Resources By Resource Type", 
                "description": "Fetches the resources given a Resource Type, accessible to the current user from the CAFE database.", 
                "parameters": [
                    {
                        "description": "The Resource Type Id", 
                        "required": true, 
                        "type": "string", 
                        "name": "resourceTypeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Managed Only Boolean", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "managedOnly", 
                        "in": "query"
                    }, 
                    {
                        "description": "With Extended Data Boolean", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "withExtendedData", 
                        "in": "query"
                    }, 
                    {
                        "description": "With Operations Boolean", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "withOperations", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/requests/{id}/resources": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageConsumerResource"
                        }
                    }
                }, 
                "summary": "Get provisioned resources", 
                "description": "Retrieves the resources that were provisioned as a result of a given request.In addition results can be filtered down using odata i.e ?$filter=resourceType/id = 'Infrastructure.Virtual'", 
                "parameters": [
                    {
                        "description": "UUID of a Request", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/services": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    }
                }, 
                "summary": "Create Service", 
                "description": "Create a new Service.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }, 
                        "description": "The Service to be created.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageService"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ], 
                "description": "Finds all Services that the currently logged in user has access to.", 
                "summary": "Get Services", 
                "operationId": "getServicesForUser"
            }
        }, 
        "/api/consumer/resourceTypes/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ResourceType"
                        }
                    }
                }, 
                "summary": "Get Resource Type", 
                "description": "Get a resource type by its unique identifier.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource type", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/catalogItems/available": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageCatalogItem"
                        }
                    }
                }, 
                "summary": "Find all catalog items with no service association", 
                "description": "Retrieve all the catalog Items that are not associated with any service and are in the same tenant as the current request.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/resourceOperations/{id}/entitlements": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageEntitlement"
                        }
                    }
                }, 
                "summary": "Find Entitlements For Operation", 
                "description": "Get all the Entitlements that entitle the specified resource operation.", 
                "parameters": [
                    {
                        "description": "The unique id of the resource operation to retrieve.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/icons": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Icon"
                        }
                    }
                }, 
                "summary": "Create or Update Icon", 
                "description": "Publish a Icon to the service catalog. Updates an existing icon or creates a new one if none has been published with the given id.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/Icon"
                        }, 
                        "description": "The icon object", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/providerTypes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageProviderType"
                        }
                    }
                }, 
                "summary": "Get Provider Types", 
                "description": "Finds all ProviderTypes.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resourceViews": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageConsumerResourceView"
                        }
                    }
                }, 
                "summary": "Get Resource Views", 
                "description": "Retrieves the resources (using a domain object targeted for direct REST API users) that were provisioned. <p/> This API is very similar to <tt>/api/consumer/resources</tt>, with only difference being that the <tt>ConsumerResource</tt> objects are transformed into the more API-friendly <tt>ConsumerResourceView</tt> objects", 
                "parameters": [
                    {
                        "description": "Managed Only Boolean", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "managedOnly", 
                        "in": "query"
                    }, 
                    {
                        "description": "With Extended Data Boolean", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "withExtendedData", 
                        "in": "query"
                    }, 
                    {
                        "description": "With Operations Boolean", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "withOperations", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/catalogItems/{id}/icon": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The unique identifier for the catalog item.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ], 
                "description": "Get a CatalogItem's Icon according to its unique id provided in the path. This icon is displayed in the vRA catalog UI.", 
                "summary": "Find catalog item icon", 
                "operationId": "findCatalogItemIconAdmin"
            }
        }, 
        "/api/consumer/entitledCatalogItemViews/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/consumerEntitledCatalogItemView"
                        }
                    }
                }, 
                "summary": "Get a Consumer Entitled Catalog Item View", 
                "description": "Get a ConsumerEntitledCatalogItemView by its unique Id.ConsumerEntitledCatalogItemView are basically catalog items: - in an active state. - the current user has the right to consume. - the current user is entitled to consume. - associated to a service.", 
                "parameters": [
                    {
                        "description": "The UUID of a catalog item", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/services/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "Update Service", 
                "description": "Updates an existing Service.", 
                "parameters": [
                    {
                        "description": "The unique identifier for the Service.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }, 
                        "description": "The service to be updated.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    }
                }, 
                "summary": "Get Service", 
                "description": "Retrieve an existing Service. It checks if the user is permitted to view the service.", 
                "parameters": [
                    {
                        "description": "The unique identifier for the Service.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/{id}/form/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get Resource Details Form Element Values", 
                "description": "Retrieves the metadata of multiple dynamic elements in single call. It combines the retrieval of element's {@link ElementState} and the list of {@link PermissibleValue} for each element.  <p> This method is not used for retrieving a subset of all the potential values of a field based on some search text or criteria. It should be used for retrieving all the possible values for a field, which is expected to be limited in size.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "description": "Specifies information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/catalogItems/{id}/forms/details": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/form"
                        }
                    }
                }, 
                "summary": "Get details form", 
                "description": "Retrieve a read-only details form for presenting the specified catalog item.", 
                "parameters": [
                    {
                        "description": "The catalog item identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "The ID of the Business Group used for viewing a Catalog Item.", 
                        "required": false, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "description": "The value of the user Id to use when the intention is to request on behalf of someone else.", 
                        "required": false, 
                        "type": "string", 
                        "name": "requestedFor", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resourceOperations/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ResourceOperation"
                        }
                    }
                }, 
                "summary": "Get Resource Operation", 
                "description": "Get a resource operation.", 
                "parameters": [
                    {
                        "description": "The UUID of an resource operation", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/forms/request/{elementId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get Resource Action Request Form Field Values", 
                "description": "This retrieves the permissible values for the specified field.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }, 
                    {
                        "description": "The id of the action to perform.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceActionId"
                    }, 
                    {
                        "description": "The identifier of a target element within the resource action.", 
                        "required": true, 
                        "type": "string", 
                        "name": "elementId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "Specifies information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/requests": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }
                }, 
                "summary": "Submit Catalog Resource Request", 
                "description": "Make a day-two resource action request.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceId"
                    }, 
                    {
                        "description": "The id of the action to perform.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceActionId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/CatalogResourceRequest"
                        }, 
                        "description": "The request data.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/entitlements/{id}": {
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "The UUID of the Entitlement to be updated", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/Entitlement"
                        }, 
                        "description": "The Entitlement to be updated", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ], 
                "description": "Update an Entitlement upon the existence and validation of Entitlement.", 
                "summary": "Update entitlement", 
                "operationId": "updateEntitlement"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Delete an entitlement", 
                "description": "Delete entitlement corresponding to the given id.", 
                "parameters": [
                    {
                        "description": "The uuid of an Entitlement.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Entitlement"
                        }
                    }
                }, 
                "summary": "Get entitlement", 
                "description": "Gets an Entitlement corresponding to its unique Id.", 
                "parameters": [
                    {
                        "description": "The uuid of an Entitlement.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resources/{id}/form": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/form"
                        }
                    }
                }, 
                "summary": "Get Resource Details Form", 
                "description": "Retrieve a read only form for the details of a resource.", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/resourceOperations/{id}/icon": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "summary": "Find Operation Icon", 
                "description": "Get the icon for a resource operation.", 
                "parameters": [
                    {
                        "description": "The id of the resource operation to update.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/resourceViews/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/CatalogResourceView"
                        }
                    }
                }, 
                "description": "Retrieves the resource (using a domain object targeted for direct REST API users) by its unique identifier. It retrieves a specific resource with its up to date Provider Data by its: unique id. <p/> This API is very similar to <tt>/api/consumer/resources/{id}</tt>, with only difference being that the <tt>ConsumerResource</tt> objects are transformed into the more API-friendly <tt>ConsumerResourceView</tt> objects", 
                "parameters": [
                    {
                        "description": "A unique identifier for the resource", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "summary": ""
            }
        }, 
        "/api/consumer/catalogItems": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageCatalogItem"
                        }
                    }
                }, 
                "summary": "Get catalog items", 
                "description": "Retrieve a page of catalog items a catalog consumer is permitted to see.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/catalogItems/{id}/forms/request/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get request form elment metadata", 
                "description": "Retrieves the updated state of one or more layout elements in the request form of a specified catalog item.", 
                "parameters": [
                    {
                        "description": "The catalog item identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "The ID of the Business Group used for viewing a Catalog Item.", 
                        "required": false, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "description": "The value of the user Id to use when the intention is to request on behalf of someone else.", 
                        "required": false, 
                        "type": "string", 
                        "name": "requestedFor", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "description": "The specific information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/catalogItems/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/CatalogItem"
                        }
                    }
                }, 
                "summary": "Get catalog item", 
                "description": "Retrieve a catalog item a catalog consumer is permitted to see.", 
                "parameters": [
                    {
                        "description": "The UUID of a catalog item", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/services/{id}/catalogItems": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageCatalogItem"
                        }
                    }
                }, 
                "summary": "Find All Catalog Items For A Service", 
                "description": "Retrieve all the catalog items belonging to a given service.", 
                "parameters": [
                    {
                        "description": "The unique identifier for the Service.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/entitledCatalogItems/{id}/requests/template": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/CatalogItemProvisioningRequest"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The UUID of a catalog item", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "Optional business Group Id. If not specified, the business group associated with the catalog item is used", 
                        "required": false, 
                        "type": "string", 
                        "name": "businessGroupId", 
                        "in": "query"
                    }, 
                    {
                        "description": "Optional userId for whom this request is being made. The currently logged in user is the default value.", 
                        "required": false, 
                        "type": "string", 
                        "name": "requestedFor", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/json"
                ], 
                "tags": [
                    "catalog"
                ], 
                "summary": "Get Catalog Item Provisioning Request Template", 
                "description": "Retrieve a template request in preparation for submitting a CatalogItemProvisioningRequest."
            }
        }, 
        "/api/consumer/catalogItems/{id}/forms/details/{elementId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get details form field values", 
                "description": "Retrieves the paged list of values for an element within the details form of a specified", 
                "parameters": [
                    {
                        "description": "The catalog item identifier.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "The identifier of a target element within the catalog item.", 
                        "required": true, 
                        "type": "string", 
                        "name": "elementId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The ID of the Business Group used for viewing a Catalog Item.", 
                        "required": false, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "description": "The value of the user Id to use when the intention is to request on behalf of someone else.", 
                        "required": false, 
                        "type": "string", 
                        "name": "requestedFor", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "Information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/consumer/entitledCatalogItems": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageConsumerEntitledCatalogItem"
                        }
                    }
                }, 
                "summary": "Get a Consumer Entitled Catalog Items", 
                "description": "Get a ConsumerEntitledCatalogItem by its unique Id.ConsumerEntitledCatalogItem are basically catalog items: - in an active state. - the current user has the right to consume. - the current user is entitled to consume. - associated to a service.", 
                "parameters": [
                    {
                        "description": "Optional query parameter to filter the returned Catalog Items by one specific Service.", 
                        "format": "uuid", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "serviceId"
                    }, 
                    {
                        "description": "optional query parameter providing the value of the user Id to use when the intention is to request on behalf of someone else", 
                        "required": false, 
                        "type": "string", 
                        "name": "onBehalfOf", 
                        "in": "query"
                    }, 
                    {
                        "description": "optional query parameter which dictates if the output should be filtered for given subtenant only", 
                        "required": false, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }, 
        "/api/entitlements/order": {
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Set the Ordering", 
                "description": "Update the order of existing entitlements for a Tenant.", 
                "parameters": [
                    {
                        "description": "The subtenant Id of the subtenant that the entitlement is a part of.", 
                        "required": true, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/multipleLiteral"
                        }, 
                        "description": "A MultipleLiteral} comprising a list of String literals which are Entitlement IDs.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog"
                ]
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "tags": [
        {
            "name": "catalog"
        }
    ], 
    "basePath": "/catalog-service", 
    "definitions": {
        "ConstantValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/literal"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Entitlement": {
            "required": [
                "status"
            ], 
            "type": "object", 
            "properties": {
                "entitledCatalogItems": {
                    "items": {
                        "$ref": "#/definitions/EntitledCatalogItem"
                    }, 
                    "type": "array"
                }, 
                "status": {
                    "enum": [
                        "DRAFT", 
                        "ACTIVE", 
                        "INACTIVE"
                    ], 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "entitledServices": {
                    "items": {
                        "$ref": "#/definitions/EntitledService"
                    }, 
                    "type": "array"
                }, 
                "allUsers": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "expiryDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "localScopeForActions": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "lastUpdatedBy": {
                    "type": "string"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "lastUpdatedDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "statusName": {
                    "type": "string"
                }, 
                "organization": {
                    "$ref": "#/definitions/Organization"
                }, 
                "principals": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Principal"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "priorityOrder": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "entitledResourceOperations": {
                    "items": {
                        "$ref": "#/definitions/EntitledResourceOperation"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "LayoutRow": {
            "type": "object", 
            "properties": {
                "items": {
                    "xml": {
                        "wrapped": true, 
                        "name": "item"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutCell"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "ResourceType": {
            "required": [
                "providerTypeId"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "ACTIVE", 
                        "RETIRED", 
                        "DELETED"
                    ], 
                    "type": "string"
                }, 
                "schema": {
                    "$ref": "#/definitions/SchemaInfo"
                }, 
                "costFeatures": {
                    "$ref": "#/definitions/ResourceCostFeatures"
                }, 
                "pluralizedName": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "deleteIfNoChildren": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "iconId": {
                    "$ref": "#/definitions/Icon"
                }, 
                "parentTypeId": {
                    "$ref": "#/definitions/ResourceType"
                }, 
                "listDescendantTypesSeparately": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "primary": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "forms": {
                    "$ref": "#/definitions/ResourceForms"
                }, 
                "callbacks": {
                    "$ref": "#/definitions/ResourceCallbackSupport"
                }, 
                "showChildrenOutsideParent": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "organization": {
                    "$ref": "#/definitions/Organization"
                }, 
                "listView": {
                    "$ref": "#/definitions/TableView"
                }, 
                "id": {
                    "type": "string"
                }, 
                "providerTypeId": {
                    "$ref": "#/definitions/ProviderType"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "NotEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ResourceAction": {
            "allOf": [
                {
                    "$ref": "#/definitions/ResourceOperation"
                }, 
                {
                    "required": [
                        "bindingId", 
                        "providerTypeRef"
                    ], 
                    "type": "object", 
                    "properties": {
                        "requestSchema": {
                            "$ref": "#/definitions/SchemaInfo"
                        }, 
                        "forms": {
                            "$ref": "#/definitions/ResourceActionForms"
                        }, 
                        "callbacks": {
                            "$ref": "#/definitions/ResourceActionCallbackSupport"
                        }, 
                        "lifecycleAction": {
                            "type": "string"
                        }, 
                        "providerTypeRef": {
                            "$ref": "#/definitions/ProviderType"
                        }, 
                        "organization": {
                            "$ref": "#/definitions/Organization"
                        }, 
                        "bindingId": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "CatalogItemForms": {
            "type": "object", 
            "properties": {
                "itemDetails": {
                    "$ref": "#/definitions/FormReference"
                }, 
                "requestPreApproval": {
                    "$ref": "#/definitions/FormReference"
                }, 
                "requestPostApproval": {
                    "$ref": "#/definitions/FormReference"
                }, 
                "requestDetails": {
                    "$ref": "#/definitions/FormReference"
                }, 
                "requestFormScale": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "SMALL", 
                        "BIG"
                    ], 
                    "type": "string"
                }, 
                "requestSubmission": {
                    "$ref": "#/definitions/FormReference"
                }, 
                "catalogRequestInfoHidden": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "complexLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "complexLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's class."
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component type."
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The type filter for this literal."
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component."
                        }, 
                        "values": {
                            "description": "Map of values, keyed by the field ids of some complex type.", 
                            "$ref": "#/definitions/literalMap"
                        }
                    }, 
                    "description": "A complex value composed of multiple values keyed by the field ids of some complex type."
                }
            ]
        }, 
        "PageService": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/Service"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "Organization": {
            "type": "object"
        }, 
        "SubsetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "moneyRange": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRange"
                    }, 
                    "type": "object", 
                    "properties": {
                        "maxValue": {
                            "type": "number", 
                            "description": "The upper limit of the range.", 
                            "format": "double"
                        }, 
                        "minValue": {
                            "type": "number", 
                            "description": "The lower limit of the range.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a range of money values, between some defined minimums and maximums."
                }
            ]
        }, 
        "EndsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "VisibilityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ParameterMappingCollection": {
            "type": "object", 
            "properties": {
                "params": {
                    "xml": {
                        "wrapped": true, 
                        "name": "param"
                    }, 
                    "items": {
                        "$ref": "#/definitions/ParameterMapping"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "layout": {
            "xml": {
                "name": "layout"
            }, 
            "type": "object", 
            "properties": {
                "pages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "page"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutPage"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "Service": {
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "ACTIVE", 
                        "RETIRED", 
                        "DELETED"
                    ], 
                    "type": "string"
                }, 
                "changeWindow": {
                    "$ref": "#/definitions/ChangeWindow"
                }, 
                "iconId": {
                    "$ref": "#/definitions/Icon"
                }, 
                "description": {
                    "type": "string"
                }, 
                "supportTeam": {
                    "$ref": "#/definitions/Principal"
                }, 
                "lastUpdatedBy": {
                    "type": "string"
                }, 
                "newDuration": {
                    "$ref": "#/definitions/timeSpan"
                }, 
                "hours": {
                    "$ref": "#/definitions/TimeRange"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "lastUpdatedDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "organization": {
                    "$ref": "#/definitions/Organization"
                }, 
                "owner": {
                    "$ref": "#/definitions/Principal"
                }, 
                "statusName": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "DisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CatalogItemType": {
            "required": [
                "requestable"
            ], 
            "type": "object", 
            "properties": {
                "requestable": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "description": {
                    "type": "string"
                }, 
                "iconId": {
                    "$ref": "#/definitions/Icon"
                }, 
                "requestSchema": {
                    "$ref": "#/definitions/SchemaInfo"
                }, 
                "forms": {
                    "$ref": "#/definitions/CatalogItemForms"
                }, 
                "callbacks": {
                    "$ref": "#/definitions/CatalogItemCallbackSupport"
                }, 
                "providerId": {
                    "$ref": "#/definitions/Provider"
                }, 
                "outputResourceTypeId": {
                    "$ref": "#/definitions/ResourceType"
                }, 
                "createCustomApprovalTypes": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "itemSchema": {
                    "$ref": "#/definitions/SchemaInfo"
                }, 
                "id": {
                    "type": "string"
                }, 
                "providerTypeId": {
                    "$ref": "#/definitions/ProviderType"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "entities": {
            "xml": {
                "name": "entities"
            }, 
            "type": "object", 
            "properties": {
                "content": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "items": {
                        "$ref": "#/definitions/resourceTypeNode"
                    }, 
                    "type": "array"
                }, 
                "links": {
                    "xml": {
                        "wrapped": true, 
                        "name": "links"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "money": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "money"
                    }, 
                    "type": "object", 
                    "properties": {
                        "amount": {
                            "type": "number", 
                            "description": "The amount associated with this value (with no specific currency).", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a single, precise monetary value."
                }
            ]
        }, 
        "OrClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "ResourceOperationUpdateRequest": {
            "required": [
                "publishStatus"
            ], 
            "type": "object", 
            "properties": {
                "publishStatus": {
                    "enum": [
                        "STAGING", 
                        "PUBLISHED", 
                        "RETIRED", 
                        "DELETED"
                    ], 
                    "type": "string"
                }, 
                "iconId": {
                    "$ref": "#/definitions/Icon"
                }
            }
        }, 
        "Icon": {
            "type": "object", 
            "properties": {
                "organization": {
                    "$ref": "#/definitions/Organization"
                }, 
                "image": {
                    "items": {
                        "type": "string", 
                        "format": "byte"
                    }, 
                    "type": "array"
                }, 
                "contentType": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "fileName": {
                    "type": "string"
                }
            }
        }, 
        "moneyTimeRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyTimeRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "basis": {
                            "description": "The span of time to calculate the rate of money for.", 
                            "$ref": "#/definitions/timeSpan"
                        }
                    }, 
                    "description": "Represents a rate of money over time."
                }
            ]
        }, 
        "EntitledService": {
            "type": "object", 
            "properties": {
                "approvalPolicyId": {
                    "type": "string"
                }, 
                "active": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "serviceRef": {
                    "$ref": "#/definitions/Service"
                }
            }
        }, 
        "UniqueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ExtensionForm": {
            "allOf": [
                {
                    "$ref": "#/definitions/FormReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "extensionId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "extensionPointId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "PageConsumerEntitledCatalogItemView": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/consumerEntitledCatalogItemView"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "stringLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "stringLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a String value."
                }
            ]
        }, 
        "EqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ResourceActionForms": {
            "type": "object", 
            "properties": {
                "requestPreApproval": {
                    "$ref": "#/definitions/FormReference"
                }, 
                "requestPostApproval": {
                    "$ref": "#/definitions/FormReference"
                }, 
                "requestDetails": {
                    "$ref": "#/definitions/FormReference"
                }, 
                "requestFormScale": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "SMALL", 
                        "BIG"
                    ], 
                    "type": "string"
                }, 
                "requestSubmission": {
                    "$ref": "#/definitions/FormReference"
                }, 
                "catalogRequestInfoHidden": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "ProviderBinding": {
            "type": "object", 
            "properties": {
                "bindingId": {
                    "type": "string"
                }, 
                "providerRef": {
                    "$ref": "#/definitions/Provider"
                }
            }
        }, 
        "entityRef": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRef"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier of the type or category to which the referenced entity belongs."
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The unique identifier of the referenced entity, encoded as a string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
                        }
                    }, 
                    "description": "Represents a reference to an entity defined somewhere in the suite."
                }
            ]
        }, 
        "CallbackEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ElementState": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Constraint"
                    }, 
                    "type": "array"
                }, 
                "dependencies": {
                    "xml": {
                        "wrapped": true, 
                        "name": "dependency"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "type": "string"
                    }
                }
            }
        }, 
        "ParameterMapping": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "PageConsumerEntitledCatalogItem": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/consumerEntitledCatalogItem"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "Clause": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ComplexEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "values": {
                            "additionalProperties": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "object"
                        }
                    }
                }
            ]
        }, 
        "StartsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LessThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "RestEntity": {
            "type": "object", 
            "properties": {
                "body": {
                    "type": "object"
                }, 
                "httpStatus": {
                    "enum": [
                        "CONTINUE", 
                        "SWITCHING_PROTOCOLS", 
                        "PROCESSING", 
                        "CHECKPOINT", 
                        "OK", 
                        "CREATED", 
                        "ACCEPTED", 
                        "NON_AUTHORITATIVE_INFORMATION", 
                        "NO_CONTENT", 
                        "RESET_CONTENT", 
                        "PARTIAL_CONTENT", 
                        "MULTI_STATUS", 
                        "ALREADY_REPORTED", 
                        "IM_USED", 
                        "MULTIPLE_CHOICES", 
                        "MOVED_PERMANENTLY", 
                        "FOUND", 
                        "MOVED_TEMPORARILY", 
                        "SEE_OTHER", 
                        "NOT_MODIFIED", 
                        "USE_PROXY", 
                        "TEMPORARY_REDIRECT", 
                        "PERMANENT_REDIRECT", 
                        "BAD_REQUEST", 
                        "UNAUTHORIZED", 
                        "PAYMENT_REQUIRED", 
                        "FORBIDDEN", 
                        "NOT_FOUND", 
                        "METHOD_NOT_ALLOWED", 
                        "NOT_ACCEPTABLE", 
                        "PROXY_AUTHENTICATION_REQUIRED", 
                        "REQUEST_TIMEOUT", 
                        "CONFLICT", 
                        "GONE", 
                        "LENGTH_REQUIRED", 
                        "PRECONDITION_FAILED", 
                        "PAYLOAD_TOO_LARGE", 
                        "REQUEST_ENTITY_TOO_LARGE", 
                        "URI_TOO_LONG", 
                        "REQUEST_URI_TOO_LONG", 
                        "UNSUPPORTED_MEDIA_TYPE", 
                        "REQUESTED_RANGE_NOT_SATISFIABLE", 
                        "EXPECTATION_FAILED", 
                        "I_AM_A_TEAPOT", 
                        "INSUFFICIENT_SPACE_ON_RESOURCE", 
                        "METHOD_FAILURE", 
                        "DESTINATION_LOCKED", 
                        "UNPROCESSABLE_ENTITY", 
                        "LOCKED", 
                        "FAILED_DEPENDENCY", 
                        "UPGRADE_REQUIRED", 
                        "PRECONDITION_REQUIRED", 
                        "TOO_MANY_REQUESTS", 
                        "REQUEST_HEADER_FIELDS_TOO_LARGE", 
                        "INTERNAL_SERVER_ERROR", 
                        "NOT_IMPLEMENTED", 
                        "BAD_GATEWAY", 
                        "SERVICE_UNAVAILABLE", 
                        "GATEWAY_TIMEOUT", 
                        "HTTP_VERSION_NOT_SUPPORTED", 
                        "VARIANT_ALSO_NEGOTIATES", 
                        "INSUFFICIENT_STORAGE", 
                        "LOOP_DETECTED", 
                        "BANDWIDTH_LIMIT_EXCEEDED", 
                        "NOT_EXTENDED", 
                        "NETWORK_AUTHENTICATION_REQUIRED"
                    ], 
                    "type": "string"
                }, 
                "httpHeaders": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array"
                    }, 
                    "type": "object"
                }, 
                "setLocation": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "multipleLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "multipleLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "xml": {
                                "name": "item"
                            }, 
                            "items": {
                                "$ref": "#/definitions/literal"
                            }, 
                            "type": "array", 
                            "description": "The list of specified values. NOTE: All values must be of the same data type."
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string", 
                            "description": "The data type of the items in the list."
                        }
                    }, 
                    "description": "A literal which represents multiple values. All of these component values must be of the same data type."
                }
            ]
        }, 
        "PageConsumerResource": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/catalogResource"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "LayoutFlow": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "parts": {
                            "xml": {
                                "wrapped": true, 
                                "name": "part"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutFlowElement"
                            }, 
                            "type": "array"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ContextPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ProviderType": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "Provider": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string"
                }, 
                "providerTypeId": {
                    "$ref": "#/definitions/ProviderType"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "SkipExportBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutCell": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "size": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "PageEntitlement": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/Entitlement"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "FixedValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "PageConsumerResourceView": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/CatalogResourceView"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "CoalesceEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "moneyRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "cost": {
                            "description": "The cost (including optional currency code).", 
                            "$ref": "#/definitions/literal"
                        }
                    }, 
                    "description": "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB."
                }
            ]
        }, 
        "ResourceForms": {
            "type": "object", 
            "properties": {
                "catalogResourceInfoHidden": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "details": {
                    "$ref": "#/definitions/FormReference"
                }
            }
        }, 
        "MoneyTimeRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/moneyTimeRate"
                }, 
                {
                    "xml": {
                        "name": "moneyTimeRate"
                    }, 
                    "type": "object", 
                    "description": "Represents a rate of money over time."
                }
            ]
        }, 
        "SupersetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "StaticForm": {
            "allOf": [
                {
                    "$ref": "#/definitions/FormReference"
                }, 
                {
                    "required": [
                        "layout"
                    ], 
                    "type": "object", 
                    "properties": {
                        "layout": {
                            "$ref": "#/definitions/layout"
                        }
                    }
                }
            ]
        }, 
        "ComplexDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }
            ]
        }, 
        "PageProviderType": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/ProviderType"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "elementValues": {
            "xml": {
                "name": "elementValues"
            }, 
            "type": "object", 
            "properties": {
                "values": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "ExternalFormReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/FormReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "formId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "Link": {
            "type": "object", 
            "properties": {
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "rel": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "PermissibleValueList": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "customAllowed": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "Evaluator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ConstantClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/booleanLiteral"
                        }
                    }
                }
            ]
        }, 
        "literalMap": {
            "xml": {
                "name": "literalMap"
            }, 
            "type": "object", 
            "properties": {
                "entries": {
                    "xml": {
                        "name": "entry"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LiteralMapEntry"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Equivalent of java.util.Map"
        }, 
        "ExtensionRendererContext": {
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "extensionId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "elementValuesRequest": {
            "xml": {
                "name": "elementValuesRequest"
            }, 
            "type": "object", 
            "properties": {
                "text": {
                    "type": "string"
                }, 
                "userId": {
                    "type": "string"
                }, 
                "associateValue": {
                    "$ref": "#/definitions/literal"
                }, 
                "headers": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "pagingInfo": {
                    "$ref": "#/definitions/ElementValuesPagingInfo"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "dependencyValues": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "resourceTypeNode": {
            "xml": {
                "name": "resourceTypeNode"
            }, 
            "required": [
                "resourceType"
            ], 
            "type": "object", 
            "properties": {
                "resourceType": {
                    "$ref": "#/definitions/ResourceType"
                }, 
                "children": {
                    "items": {
                        "$ref": "#/definitions/resourceTypeNode"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "MinimumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "StaticPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "values": {
                            "xml": {
                                "name": "value"
                            }, 
                            "items": {
                                "$ref": "#/definitions/value"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "catalogResource": {
            "xml": {
                "namespace": "http://www.vmware.com/vcac/schema/catalog-service/v7.0", 
                "name": "catalogResource"
            }, 
            "type": "object", 
            "properties": {
                "operations": {
                    "items": {
                        "$ref": "#/definitions/ConsumerResourceOperation"
                    }, 
                    "type": "array"
                }, 
                "destroyDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "pendingRequests": {
                    "items": {
                        "$ref": "#/definitions/ResourceActionRequest"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "type": "string"
                }, 
                "totalCost": {
                    "description": "Deprecated since version 7.3. Use expenseMonthToDate to get the expense information.", 
                    "$ref": "#/definitions/literal"
                }, 
                "parentResourceRef": {
                    "$ref": "#/definitions/Resource"
                }, 
                "hasChildren": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "iconId": {
                    "type": "string"
                }, 
                "forms": {
                    "$ref": "#/definitions/ResourceForms"
                }, 
                "providerBinding": {
                    "$ref": "#/definitions/ProviderBinding"
                }, 
                "requestId": {
                    "$ref": "#/definitions/Request"
                }, 
                "costToDate": {
                    "description": "Deprecated since version 7.3. Use expenseMonthToDate to get the expense information.", 
                    "$ref": "#/definitions/literal"
                }, 
                "lease": {
                    "$ref": "#/definitions/ResourceLease"
                }, 
                "status": {
                    "enum": [
                        "ACTIVE", 
                        "PENDING_APPROVAL", 
                        "REJECTED", 
                        "DELETED"
                    ], 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "lastUpdated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "dateCreated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "catalogItem": {
                    "$ref": "#/definitions/CatalogItem"
                }, 
                "leaseForDisplay": {
                    "$ref": "#/definitions/timeSpan"
                }, 
                "owners": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Principal"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string"
                }, 
                "hasCosts": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "resourceData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "expenseMonthToDate": {
                    "$ref": "#/definitions/CostToDate"
                }, 
                "costs": {
                    "description": "Deprecated since version 7.3. Use expenseMonthToDate to get the expense information.", 
                    "$ref": "#/definitions/ResourceCosts"
                }, 
                "resourceTypeRef": {
                    "$ref": "#/definitions/ResourceType"
                }, 
                "organization": {
                    "$ref": "#/definitions/Organization"
                }, 
                "hasLease": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "requestState": {
                    "enum": [
                        "UNSUBMITTED", 
                        "SUBMITTED", 
                        "DELETED", 
                        "PENDING_PRE_APPROVAL", 
                        "PRE_APPROVAL_SEND_ERROR", 
                        "PRE_APPROVED", 
                        "PRE_REJECTED", 
                        "PROVIDER_DELETION_ERROR", 
                        "IN_PROGRESS", 
                        "PROVIDER_SEND_ERROR", 
                        "PROVIDER_COMPLETED", 
                        "PROVIDER_FAILED", 
                        "PENDING_POST_APPROVAL", 
                        "POST_APPROVAL_SEND_ERROR", 
                        "POST_APPROVED", 
                        "POST_REJECTION_RECEIVED", 
                        "ROLLBACK_ERROR", 
                        "POST_REJECTED", 
                        "SUCCESSFUL", 
                        "PARTIALLY_SUCCESSFUL", 
                        "FAILED"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "MandatoryConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaximumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "EntitledCatalogItem": {
            "type": "object", 
            "properties": {
                "approvalPolicyId": {
                    "type": "string"
                }, 
                "active": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "hidden": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "catalogItemRequestable": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "catalogItemRef": {
                    "$ref": "#/definitions/CatalogItem"
                }
            }
        }, 
        "TimeRange": {
            "type": "object", 
            "properties": {
                "endTime": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "startTime": {
                    "type": "string", 
                    "format": "date-time"
                }
            }
        }, 
        "RegexpConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "errorMessage": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "TableView": {
            "type": "object", 
            "properties": {
                "columns": {
                    "xml": {
                        "wrapped": true, 
                        "name": "column"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Column"
                    }
                }, 
                "defaultSequence": {
                    "xml": {
                        "wrapped": true, 
                        "name": "column"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "WrapperClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "Resource": {
            "type": "object", 
            "properties": {
                "parentResource": {
                    "$ref": "#/definitions/Resource"
                }, 
                "childResources": {
                    "items": {
                        "$ref": "#/definitions/Resource"
                    }, 
                    "type": "array"
                }, 
                "leaseForDisplay": {
                    "$ref": "#/definitions/timeSpan"
                }, 
                "subTenantId": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "dateDeleted": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "activeChildResources": {
                    "items": {
                        "$ref": "#/definitions/Resource"
                    }, 
                    "type": "array"
                }, 
                "linkedIcon": {
                    "$ref": "#/definitions/Icon"
                }, 
                "providerBinding": {
                    "$ref": "#/definitions/ProviderBinding"
                }, 
                "archiveDays": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "costToDate": {
                    "description": "Deprecated since version 7.3. Use expenseMonthToDate to get the expense information.", 
                    "$ref": "#/definitions/literal"
                }, 
                "lease": {
                    "$ref": "#/definitions/ResourceLease"
                }, 
                "status": {
                    "enum": [
                        "ACTIVE", 
                        "PENDING_APPROVAL", 
                        "REJECTED", 
                        "DELETED"
                    ], 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "requestBindingId": {
                    "type": "string"
                }, 
                "lastUpdated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "dateCreated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "catalogItem": {
                    "$ref": "#/definitions/CatalogItem"
                }, 
                "pendingRequests": {
                    "items": {
                        "$ref": "#/definitions/ResourceActionRequest"
                    }, 
                    "type": "array"
                }, 
                "tenant": {
                    "$ref": "#/definitions/CatalogTenant"
                }, 
                "icon": {
                    "$ref": "#/definitions/Icon"
                }, 
                "totalLeaseCost": {
                    "$ref": "#/definitions/literal"
                }, 
                "owners": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Principal"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string"
                }, 
                "destructionDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "resourceType": {
                    "$ref": "#/definitions/ResourceType"
                }, 
                "expenseMonthToDate": {
                    "$ref": "#/definitions/CostToDate"
                }, 
                "request": {
                    "$ref": "#/definitions/Request"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "resourceData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "costs": {
                    "description": "Deprecated since version 7.3. Use expenseMonthToDate to get the expense information.", 
                    "$ref": "#/definitions/ResourceCosts"
                }, 
                "organization": {
                    "$ref": "#/definitions/Organization"
                }
            }
        }, 
        "ResourceExtension": {
            "allOf": [
                {
                    "$ref": "#/definitions/ResourceOperation"
                }, 
                {
                    "required": [
                        "extensionId"
                    ], 
                    "type": "object", 
                    "properties": {
                        "extensionId": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ResourceCosts": {
            "type": "object", 
            "properties": {
                "leaseRate": {
                    "$ref": "#/definitions/moneyTimeRate"
                }
            }
        }, 
        "LiteralMapEntry": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/literal"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "LayoutFlowElement": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ResetValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "dateTimeLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "dateTimeLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The date.", 
                            "format": "date-time"
                        }
                    }, 
                    "description": "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class."
                }
            ]
        }, 
        "IncrementBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "AndClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "MonetaryValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "literal"
                    }, 
                    "type": "object", 
                    "properties": {
                        "currencyCode": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The ISO 4217 code used to identify the currency (if any) associated with this value."
                        }
                    }, 
                    "description": "Base type for representing monetary values, encapsulating both some kind of quantity and a currency."
                }
            ]
        }, 
        "ResourceActionRequest": {
            "allOf": [
                {
                    "$ref": "#/definitions/Request"
                }, 
                {
                    "required": [
                        "resourceActionRef", 
                        "resourceRef"
                    ], 
                    "type": "object", 
                    "properties": {
                        "resourceRef": {
                            "$ref": "#/definitions/Resource"
                        }, 
                        "resourceActionRef": {
                            "$ref": "#/definitions/ResourceAction"
                        }
                    }
                }
            ]
        }, 
        "CustomPropertyDefinitionMetadata": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "required": [
                        "field"
                    ], 
                    "type": "object", 
                    "properties": {
                        "field": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                }
            ]
        }, 
        "batchElementUpdateRequest": {
            "xml": {
                "name": "batchElementUpdateRequest"
            }, 
            "required": [
                "formValues"
            ], 
            "type": "object", 
            "properties": {
                "trigger": {
                    "type": "string"
                }, 
                "affectedElements": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "formValues": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "triggeredDetailsLayout": {
                    "$ref": "#/definitions/layout"
                }
            }
        }, 
        "LayoutField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "extensionRendererContext": {
                            "$ref": "#/definitions/ExtensionRendererContext"
                        }, 
                        "description": {
                            "type": "string"
                        }, 
                        "dataType": {
                            "$ref": "#/definitions/DataType"
                        }, 
                        "permissibleValues": {
                            "$ref": "#/definitions/PermissibleValueList"
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "displayAdvice": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "TEXTBOX", 
                                "HYPERLINK", 
                                "EMAIL", 
                                "TEXTAREA", 
                                "DATE_TIME_PICKER", 
                                "CHECKBOX", 
                                "YES_NO", 
                                "CHECKBOX_GROUP", 
                                "DUAL_LIST", 
                                "RADIO_GROUP", 
                                "DROPDOWN", 
                                "LIST", 
                                "SEARCHER", 
                                "TREE", 
                                "FORM", 
                                "IMAGE", 
                                "SLIDER", 
                                "DATA_TABLE", 
                                "VALUE_PICKER"
                            ], 
                            "type": "string"
                        }, 
                        "orderIndex": {
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "isMultiValued": {
                            "xml": {
                                "attribute": true
                            }, 
                            "default": false, 
                            "type": "boolean"
                        }, 
                        "labelSize": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "columns": {
                            "xml": {
                                "wrapped": true, 
                                "name": "column"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutField"
                            }, 
                            "type": "array"
                        }, 
                        "detailLayout": {
                            "$ref": "#/definitions/LayoutReference"
                        }
                    }
                }
            ]
        }, 
        "CatalogItemCallbackSupport": {
            "type": "object", 
            "properties": {
                "itemInitialize": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "validate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "rollback": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "itemInformation": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "timeSpan": {
            "xml": {
                "name": "timeSpan"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "amount": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "description": "The amount for the time span.", 
                    "format": "int64"
                }, 
                "unit": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "MILLISECONDS", 
                        "SECONDS", 
                        "MINUTES", 
                        "HOURS", 
                        "DAYS", 
                        "WEEKS", 
                        "MONTHS", 
                        "YEARS"
                    ], 
                    "type": "string", 
                    "description": "The unit of measure for the time span. e.g: days."
                }
            }, 
            "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
        }, 
        "consumerEntitledCatalogItem": {
            "xml": {
                "name": "consumerEntitledCatalogItem"
            }, 
            "type": "object", 
            "properties": {
                "catalogItem": {
                    "$ref": "#/definitions/CatalogItem"
                }, 
                "entitledOrganizations": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Organization"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "ResourceCostFeatures": {
            "type": "object", 
            "properties": {
                "leaseCost": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "lease": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "NullDisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "RequestCompletion": {
            "required": [
                "requestCompletionState"
            ], 
            "type": "object", 
            "properties": {
                "resourceBindingIds": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "requestCompletionState": {
                    "enum": [
                        "SUCCESSFUL", 
                        "PARTIALLY_SUCCESSFUL", 
                        "FAILED", 
                        "REJECTED"
                    ], 
                    "type": "string"
                }, 
                "completionDetails": {
                    "type": "string"
                }
            }
        }, 
        "ResourceActionCallbackSupport": {
            "type": "object", 
            "properties": {
                "itemInitialize": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "validate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "rollback": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "itemInformation": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "ConsumerResourceOperation": {
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "extensionId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "iconId": {
                    "type": "string"
                }, 
                "hasForm": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "bindingId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "formScale": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "SMALL", 
                        "BIG"
                    ], 
                    "type": "string"
                }, 
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "ACTION", 
                        "EXTENSION"
                    ], 
                    "type": "string"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "providerTypeId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "ResourceLease": {
            "required": [
                "end", 
                "start"
            ], 
            "type": "object", 
            "properties": {
                "start": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "end": {
                    "type": "string", 
                    "format": "date-time"
                }
            }
        }, 
        "NotClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClause": {
                            "$ref": "#/definitions/Clause"
                        }
                    }
                }
            ]
        }, 
        "LayoutSection": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "rows": {
                    "xml": {
                        "wrapped": true, 
                        "name": "row"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutRow"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "RefreshOnChangeBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ConditionalEvaluatorCase": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "condition": {
                    "$ref": "#/definitions/Clause"
                }
            }
        }, 
        "FormReference": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "literal": {
            "xml": {
                "name": "literal"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "description": "Wraps a value such that values of different types can be treated generically."
        }, 
        "DynamicLayoutReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ]
        }, 
        "StaticLayout": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "required": [
                        "layout"
                    ], 
                    "type": "object", 
                    "properties": {
                        "layout": {
                            "$ref": "#/definitions/layout"
                        }
                    }
                }
            ]
        }, 
        "entityRefEx": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRefEx"
                    }, 
                    "type": "object", 
                    "properties": {
                        "href": {
                            "type": "string", 
                            "description": "the Href"
                        }
                    }, 
                    "description": "Represents a reference to an entity by uri"
                }
            ]
        }, 
        "FacetValueMap": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/FacetValueMapEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "booleanLiteral": {
            "xml": {
                "name": "booleanLiteral"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "value": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "The boolean value."
                }
            }, 
            "description": "Wraps a boolean value."
        }, 
        "consumerEntitledCatalogItemView": {
            "xml": {
                "name": "consumerEntitledCatalogItemView"
            }, 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string"
                }, 
                "links": {
                    "xml": {
                        "wrapped": true, 
                        "name": "links"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "isNoteworthy": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "catalogItemId": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "entitledOrganizations": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/Organization"
                    }, 
                    "type": "array"
                }, 
                "catalogItemTypeRef": {
                    "$ref": "#/definitions/CatalogItemType"
                }, 
                "serviceRef": {
                    "$ref": "#/definitions/Service"
                }, 
                "dateCreated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "outputResourceTypeRef": {
                    "$ref": "#/definitions/ResourceType"
                }, 
                "lastUpdatedDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "iconId": {
                    "$ref": "#/definitions/Icon"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "form": {
            "xml": {
                "name": "form"
            }, 
            "type": "object", 
            "properties": {
                "values": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "layout": {
                    "$ref": "#/definitions/layout"
                }, 
                "fieldPrefixes": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "Constraint": {
            "discriminator": "type", 
            "required": [
                "value"
            ], 
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }
            }
        }, 
        "Column": {
            "required": [
                "dataType"
            ], 
            "type": "object", 
            "properties": {
                "sortable": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "description": {
                    "type": "string"
                }, 
                "dataType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "permissibleValues": {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                "label": {
                    "type": "string"
                }, 
                "filterable": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "displayAdvice": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "TEXTBOX", 
                        "HYPERLINK", 
                        "EMAIL", 
                        "TEXTAREA", 
                        "DATE_TIME_PICKER", 
                        "CHECKBOX", 
                        "YES_NO", 
                        "CHECKBOX_GROUP", 
                        "DUAL_LIST", 
                        "RADIO_GROUP", 
                        "DROPDOWN", 
                        "LIST", 
                        "SEARCHER", 
                        "TREE", 
                        "FORM", 
                        "IMAGE", 
                        "SLIDER", 
                        "DATA_TABLE", 
                        "VALUE_PICKER"
                    ], 
                    "type": "string"
                }, 
                "orderIndex": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "isMultiValued": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "LayoutReference": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "BooleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "IaasPropertyNameBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CustomValidationConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CatalogResourceRequest": {
            "xml": {
                "name": "CatalogResourceRequest"
            }, 
            "type": "object", 
            "properties": {
                "resourceId": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "data": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object"
                }, 
                "actionId": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "Expression": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "operator": {
                            "$ref": "#/definitions/CriteriaOperator"
                        }, 
                        "rightOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }, 
                        "leftOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "ElementValuesPagingInfo": {
            "type": "object", 
            "properties": {
                "count": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "offset": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "DynamicValueContext": {
            "required": [
                "parameterMappings"
            ], 
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "providerEntityId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "WithinOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "formUpdateResponse": {
            "xml": {
                "name": "formUpdateResponse"
            }, 
            "type": "object", 
            "properties": {
                "elementUpdates": {
                    "xml": {
                        "wrapped": true, 
                        "name": "elementUpdate"
                    }, 
                    "items": {
                        "$ref": "#/definitions/updateElementEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "DefaultValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "EntitledResourceOperation": {
            "type": "object", 
            "properties": {
                "targetResourceTypeRef": {
                    "$ref": "#/definitions/ResourceType"
                }, 
                "resourceOperationRef": {
                    "$ref": "#/definitions/ResourceOperation"
                }, 
                "approvalPolicyId": {
                    "type": "string"
                }, 
                "resourceOperationType": {
                    "enum": [
                        "ACTION", 
                        "EXTENSION"
                    ], 
                    "type": "string"
                }, 
                "externalId": {
                    "type": "string"
                }, 
                "active": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "MaxValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ChangeWindow": {
            "type": "object", 
            "properties": {
                "dayOfWeek": {
                    "enum": [
                        "SUNDAY", 
                        "MONDAY", 
                        "TUESDAY", 
                        "WEDNESDAY", 
                        "THURSDAY", 
                        "FRIDAY", 
                        "SATURDAY"
                    ], 
                    "type": "string"
                }, 
                "hours": {
                    "$ref": "#/definitions/TimeRange"
                }
            }
        }, 
        "CatalogItem": {
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "STAGING", 
                        "PUBLISHED", 
                        "RETIRED", 
                        "DELETED"
                    ], 
                    "type": "string"
                }, 
                "requestable": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "quota": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "description": {
                    "type": "string"
                }, 
                "providerBinding": {
                    "$ref": "#/definitions/ProviderBinding"
                }, 
                "isNoteworthy": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "iconId": {
                    "$ref": "#/definitions/Icon"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "catalogItemTypeRef": {
                    "$ref": "#/definitions/CatalogItemType"
                }, 
                "serviceRef": {
                    "$ref": "#/definitions/Service"
                }, 
                "dateCreated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "forms": {
                    "$ref": "#/definitions/CatalogItemForms"
                }, 
                "callbacks": {
                    "$ref": "#/definitions/CatalogItemCallbackSupport"
                }, 
                "outputResourceTypeRef": {
                    "$ref": "#/definitions/ResourceType"
                }, 
                "lastUpdatedDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "statusName": {
                    "type": "string"
                }, 
                "organization": {
                    "$ref": "#/definitions/Organization"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "EntityReferenceDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CatalogItemRequest": {
            "required": [
                "catalogItemRef", 
                "state"
            ], 
            "type": "object", 
            "properties": {
                "dateCompleted": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "reasons": {
                    "type": "string"
                }, 
                "stateName": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "phase": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "UNSUBMITTED", 
                        "PENDING_PRE_APPROVAL", 
                        "IN_PROGRESS", 
                        "PENDING_POST_APPROVAL", 
                        "SUCCESSFUL", 
                        "FAILED", 
                        "REJECTED"
                    ], 
                    "type": "string"
                }, 
                "dateSubmitted": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "waitingStatus": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "NOT_WAITING", 
                        "WAITING_FOR_APPROVAL", 
                        "WAITING_FOR_PROVIDER"
                    ], 
                    "type": "string"
                }, 
                "requestedFor": {
                    "type": "string"
                }, 
                "retriesRemaining": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "approvalStatus": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "PENDING", 
                        "PRE_APPROVED", 
                        "POST_APPROVED", 
                        "REJECTED"
                    ], 
                    "type": "string"
                }, 
                "iconId": {
                    "$ref": "#/definitions/Icon"
                }, 
                "requestedItemName": {
                    "type": "string"
                }, 
                "state": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "UNSUBMITTED", 
                        "SUBMITTED", 
                        "DELETED", 
                        "PENDING_PRE_APPROVAL", 
                        "PRE_APPROVAL_SEND_ERROR", 
                        "PRE_APPROVED", 
                        "PRE_REJECTED", 
                        "PROVIDER_DELETION_ERROR", 
                        "IN_PROGRESS", 
                        "PROVIDER_SEND_ERROR", 
                        "PROVIDER_COMPLETED", 
                        "PROVIDER_FAILED", 
                        "PENDING_POST_APPROVAL", 
                        "POST_APPROVAL_SEND_ERROR", 
                        "POST_APPROVED", 
                        "POST_REJECTION_RECEIVED", 
                        "ROLLBACK_ERROR", 
                        "POST_REJECTED", 
                        "SUCCESSFUL", 
                        "PARTIALLY_SUCCESSFUL", 
                        "FAILED"
                    ], 
                    "type": "string"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "executionStatus": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "NOT_STARTED", 
                        "STARTED", 
                        "STOPPED"
                    ], 
                    "type": "string"
                }, 
                "requestedBy": {
                    "type": "string"
                }, 
                "requestorEntitlementId": {
                    "$ref": "#/definitions/Entitlement"
                }, 
                "description": {
                    "type": "string"
                }, 
                "requestedItemDescription": {
                    "type": "string"
                }, 
                "quote": {
                    "$ref": "#/definitions/RequestQuote"
                }, 
                "lastUpdated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "dateCreated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "requestData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "requestNumber": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "preApprovalId": {
                    "type": "string"
                }, 
                "postApprovalId": {
                    "type": "string"
                }, 
                "catalogItemRef": {
                    "$ref": "#/definitions/CatalogItem"
                }, 
                "components": {
                    "items": {
                        "$ref": "#/definitions/RequestComponent"
                    }, 
                    "type": "array"
                }, 
                "requestCompletion": {
                    "$ref": "#/definitions/RequestCompletion"
                }, 
                "organization": {
                    "$ref": "#/definitions/Organization"
                }, 
                "catalogItemProviderBinding": {
                    "$ref": "#/definitions/ProviderBinding"
                }, 
                "dateApproved": {
                    "type": "string", 
                    "format": "date-time"
                }
            }
        }, 
        "PrimitiveDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "typeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "TimeSpan": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "timeSpan"
                    }, 
                    "type": "object", 
                    "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
                }
            ]
        }, 
        "ExternalValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "dynamicValueProviderInfo"
                    ], 
                    "type": "object", 
                    "properties": {
                        "dynamicValueProviderInfo": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "ContainsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Field": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "dataType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "permissibleValues": {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                "label": {
                    "type": "string"
                }, 
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "displayAdvice": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "TEXTBOX", 
                        "HYPERLINK", 
                        "EMAIL", 
                        "TEXTAREA", 
                        "DATE_TIME_PICKER", 
                        "CHECKBOX", 
                        "YES_NO", 
                        "CHECKBOX_GROUP", 
                        "DUAL_LIST", 
                        "RADIO_GROUP", 
                        "DROPDOWN", 
                        "LIST", 
                        "SEARCHER", 
                        "TREE", 
                        "FORM", 
                        "IMAGE", 
                        "SLIDER", 
                        "DATA_TABLE", 
                        "VALUE_PICKER"
                    ], 
                    "type": "string"
                }, 
                "orderIndex": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "isMultiValued": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "columns": {
                    "xml": {
                        "wrapped": true, 
                        "name": "column"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "PageResourceType": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/ResourceType"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "PageCatalogItem": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/CatalogItem"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "integerLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "integerLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "integer", 
                            "description": "The integer value.", 
                            "format": "int64"
                        }
                    }, 
                    "description": "Wraps a signed 64-bit integer value."
                }
            ]
        }, 
        "LessThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CostToDate": {
            "type": "object", 
            "properties": {
                "amount": {
                    "type": "number", 
                    "format": "double"
                }, 
                "currencyCode": {
                    "type": "string"
                }, 
                "asOnDate": {
                    "type": "string", 
                    "format": "date-time"
                }
            }
        }, 
        "IsDefinedOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Schema": {
            "type": "object", 
            "properties": {
                "fields": {
                    "xml": {
                        "name": "field"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                }
            }
        }, 
        "Sort": {
            "type": "object"
        }, 
        "FieldReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "path": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "LayoutExtension": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "fieldPrefix": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "extensionId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "extensionPointId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ConditionalEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "cases": {
                            "xml": {
                                "name": "case"
                            }, 
                            "items": {
                                "$ref": "#/definitions/ConditionalEvaluatorCase"
                            }, 
                            "type": "array"
                        }, 
                        "defaulValue": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "MinValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ResourceOperation": {
            "required": [
                "name", 
                "status", 
                "targetResourceTypeRef"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "STAGING", 
                        "PUBLISHED", 
                        "RETIRED", 
                        "DELETED"
                    ], 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "targetResourceTypeRef": {
                    "$ref": "#/definitions/ResourceType"
                }, 
                "iconId": {
                    "$ref": "#/definitions/Icon"
                }, 
                "externalId": {
                    "type": "string"
                }, 
                "entitleable": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "targetCriteria": {
                    "$ref": "#/definitions/Clause"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "LayoutPlaceholderCell": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ReadOnlyConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MultipleEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "items"
                    ], 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "MinCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutText": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "value": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "SchemaInfo": {
            "type": "object", 
            "properties": {
                "classId": {
                    "type": "string"
                }, 
                "typeFilter": {
                    "type": "string"
                }
            }
        }, 
        "secureString": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "secureString"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a secured string value, such as a password."
                }
            ]
        }, 
        "FacetValueMapEntry": {
            "type": "object", 
            "properties": {
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "value": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "LayoutPage": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "sections": {
                    "xml": {
                        "wrapped": true, 
                        "name": "section"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutSection"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "CatalogTenant": {
            "required": [
                "id"
            ], 
            "type": "object", 
            "properties": {
                "lastSync": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "expired": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "Request": {
            "required": [
                "state"
            ], 
            "type": "object", 
            "properties": {
                "dateCompleted": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "reasons": {
                    "type": "string"
                }, 
                "stateName": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "phase": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "UNSUBMITTED", 
                        "PENDING_PRE_APPROVAL", 
                        "IN_PROGRESS", 
                        "PENDING_POST_APPROVAL", 
                        "SUCCESSFUL", 
                        "FAILED", 
                        "REJECTED"
                    ], 
                    "type": "string"
                }, 
                "dateSubmitted": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "waitingStatus": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "NOT_WAITING", 
                        "WAITING_FOR_APPROVAL", 
                        "WAITING_FOR_PROVIDER"
                    ], 
                    "type": "string"
                }, 
                "requestedFor": {
                    "type": "string"
                }, 
                "retriesRemaining": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "approvalStatus": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "PENDING", 
                        "PRE_APPROVED", 
                        "POST_APPROVED", 
                        "REJECTED"
                    ], 
                    "type": "string"
                }, 
                "iconId": {
                    "$ref": "#/definitions/Icon"
                }, 
                "requestedItemName": {
                    "type": "string"
                }, 
                "state": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "UNSUBMITTED", 
                        "SUBMITTED", 
                        "DELETED", 
                        "PENDING_PRE_APPROVAL", 
                        "PRE_APPROVAL_SEND_ERROR", 
                        "PRE_APPROVED", 
                        "PRE_REJECTED", 
                        "PROVIDER_DELETION_ERROR", 
                        "IN_PROGRESS", 
                        "PROVIDER_SEND_ERROR", 
                        "PROVIDER_COMPLETED", 
                        "PROVIDER_FAILED", 
                        "PENDING_POST_APPROVAL", 
                        "POST_APPROVAL_SEND_ERROR", 
                        "POST_APPROVED", 
                        "POST_REJECTION_RECEIVED", 
                        "ROLLBACK_ERROR", 
                        "POST_REJECTED", 
                        "SUCCESSFUL", 
                        "PARTIALLY_SUCCESSFUL", 
                        "FAILED"
                    ], 
                    "type": "string"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "executionStatus": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "NOT_STARTED", 
                        "STARTED", 
                        "STOPPED"
                    ], 
                    "type": "string"
                }, 
                "requestedBy": {
                    "type": "string"
                }, 
                "requestorEntitlementId": {
                    "$ref": "#/definitions/Entitlement"
                }, 
                "description": {
                    "type": "string"
                }, 
                "requestedItemDescription": {
                    "type": "string"
                }, 
                "quote": {
                    "$ref": "#/definitions/RequestQuote"
                }, 
                "lastUpdated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "dateCreated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "requestData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "requestNumber": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "preApprovalId": {
                    "type": "string"
                }, 
                "postApprovalId": {
                    "type": "string"
                }, 
                "components": {
                    "items": {
                        "$ref": "#/definitions/RequestComponent"
                    }, 
                    "type": "array"
                }, 
                "requestCompletion": {
                    "$ref": "#/definitions/RequestCompletion"
                }, 
                "organization": {
                    "$ref": "#/definitions/Organization"
                }, 
                "dateApproved": {
                    "type": "string", 
                    "format": "date-time"
                }
            }
        }, 
        "UnspecifiedEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "PageProvider": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/Provider"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "decimalLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "decimalLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "number", 
                            "description": "The decimal value.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Wraps a decimal value."
                }
            ]
        }, 
        "value": {
            "xml": {
                "name": "value"
            }, 
            "type": "object", 
            "properties": {
                "label": {
                    "type": "string"
                }, 
                "underlyingValue": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "CriteriaOperator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "InternalConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CatalogResourceView": {
            "xml": {
                "name": "CatalogResourceView"
            }, 
            "type": "object", 
            "properties": {
                "links": {
                    "xml": {
                        "wrapped": true, 
                        "name": "links"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "resourceId": {
                    "type": "string"
                }, 
                "businessGroupId": {
                    "type": "string"
                }, 
                "totalCost": {
                    "$ref": "#/definitions/literal"
                }, 
                "catalogItemLabel": {
                    "type": "string"
                }, 
                "hasChildren": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "iconId": {
                    "type": "string"
                }, 
                "costs": {
                    "$ref": "#/definitions/ResourceCosts"
                }, 
                "requestId": {
                    "type": "string"
                }, 
                "costToDate": {
                    "$ref": "#/definitions/literal"
                }, 
                "lease": {
                    "$ref": "#/definitions/ResourceLease"
                }, 
                "status": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "lastUpdated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "dateCreated": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "data": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object"
                }, 
                "owners": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string"
                }, 
                "resourceType": {
                    "type": "string"
                }, 
                "catalogItemId": {
                    "type": "string"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "parentResourceId": {
                    "type": "string"
                }, 
                "requestState": {
                    "enum": [
                        "UNSUBMITTED", 
                        "SUBMITTED", 
                        "DELETED", 
                        "PENDING_PRE_APPROVAL", 
                        "PRE_APPROVAL_SEND_ERROR", 
                        "PRE_APPROVED", 
                        "PRE_REJECTED", 
                        "PROVIDER_DELETION_ERROR", 
                        "IN_PROGRESS", 
                        "PROVIDER_SEND_ERROR", 
                        "PROVIDER_COMPLETED", 
                        "PROVIDER_FAILED", 
                        "PENDING_POST_APPROVAL", 
                        "POST_APPROVAL_SEND_ERROR", 
                        "POST_APPROVED", 
                        "POST_REJECTION_RECEIVED", 
                        "ROLLBACK_ERROR", 
                        "POST_REJECTED", 
                        "SUCCESSFUL", 
                        "PARTIALLY_SUCCESSFUL", 
                        "FAILED"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "CatalogItemProvisioningRequest": {
            "xml": {
                "name": "CatalogItemProvisioningRequest"
            }, 
            "type": "object", 
            "properties": {
                "requestedFor": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "reasons": {
                    "type": "string"
                }, 
                "catalogItemId": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "businessGroupId": {
                    "type": "string"
                }, 
                "data": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object"
                }
            }
        }, 
        "updateElementEntry": {
            "xml": {
                "name": "updateElementEntry"
            }, 
            "type": "object", 
            "properties": {
                "errors": {
                    "xml": {
                        "wrapped": true, 
                        "name": "error"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "detailLayout": {
                    "$ref": "#/definitions/layout"
                }, 
                "facetValues": {
                    "$ref": "#/definitions/FacetValueMap"
                }, 
                "permissibleValues": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }, 
                "extensionRendererContext": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "DataType": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "typeId": {
                    "enum": [
                        "STRING", 
                        "INTEGER", 
                        "DECIMAL", 
                        "MONEY", 
                        "MONEY_RANGE", 
                        "MONEY_TIME_RATE", 
                        "BOOLEAN", 
                        "ENTITY_REFERENCE", 
                        "DATE_TIME", 
                        "TIME_SPAN", 
                        "SECURE_STRING", 
                        "COMPLEX"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "PageResourceOperation": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/ResourceOperation"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "EditableBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DynamicPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }, 
                        "context": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "EncryptedBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ObjectDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "label": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "RequestComponent": {
            "required": [
                "requestType"
            ], 
            "type": "object", 
            "properties": {
                "classId": {
                    "type": "string"
                }, 
                "typeFilter": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "cafeResourceId": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "requestType": {
                    "enum": [
                        "CATALOG_ITEM", 
                        "RESOURCE_ACTION"
                    ], 
                    "type": "string"
                }, 
                "quote": {
                    "$ref": "#/definitions/RequestQuote"
                }, 
                "componentId": {
                    "type": "string"
                }, 
                "providerId": {
                    "type": "string"
                }, 
                "requestableItemBindingId": {
                    "type": "string"
                }, 
                "parentId": {
                    "type": "string"
                }, 
                "serviceTypeId": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "RequestQuote": {
            "type": "object", 
            "properties": {
                "totalLeaseCost": {
                    "$ref": "#/definitions/literal"
                }, 
                "leaseRate": {
                    "$ref": "#/definitions/moneyTimeRate"
                }, 
                "leasePeriod": {
                    "$ref": "#/definitions/timeSpan"
                }
            }
        }, 
        "ResourceCallbackSupport": {
            "type": "object", 
            "properties": {
                "list": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "details": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "PageCatalogItemType": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/CatalogItemType"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "MinLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Principal": {
            "required": [
                "ref", 
                "tenantName", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "lastSync": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "ref": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "expired": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "tenantName": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "type": {
                    "enum": [
                        "GROUP", 
                        "USER", 
                        "CUSTOM_GROUP", 
                        "SSO_GROUP"
                    ], 
                    "type": "string"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }
            }
        }
    }, 
    "swagger": "2.0"
}