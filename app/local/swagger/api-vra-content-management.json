{
    "info": {
        "version": "7.3.0-SNAPSHOT", 
        "description": "# Content Management Service API Specification", 
        "title": "Content Service API"
    }, 
    "paths": {
        "/api/provider/contents": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Content created successfully", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Save provider content", 
                "description": "Saves the provider content.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ProviderContent"
                        }, 
                        "description": "The provider content", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "provider-content"
                ]
            }
        }, 
        "/api/packages/{id}/contents": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageContent"
                        }
                    }
                }, 
                "summary": "List package contents", 
                "description": "API to list content items for a given package id. This API can be used to see information of content associated with the given package.\n\nNote: This will not list content that is deleted but still referenced by the package.", 
                "parameters": [
                    {
                        "description": "The UUID of the package", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "consumer-package"
                ]
            }
        }, 
        "/api/contents/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    }
                }, 
                "summary": "Get content", 
                "description": "The content here only contains high level information about the underlying artifact like - name, description, type, etc.\n\nHaving permission to content's metadata doesn't mean that the user will have access its raw content since it is governed by specific permissions defined by the content provider.", 
                "parameters": [
                    {
                        "description": "The UUID of the content", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "consumer-content"
                ]
            }
        }, 
        "/api/contents": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageContent"
                        }
                    }
                }, 
                "summary": "Get content list", 
                "description": "Get all content with specified paging, sorting and filtering parameters.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "consumer-content"
                ]
            }
        }, 
        "/api/provider/contents/{contentTypeId}/{id}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "Content deleted successfully"
                    }
                }, 
                "summary": "Delete provider content", 
                "description": "Deletes the provider content.", 
                "parameters": [
                    {
                        "description": "The content type id", 
                        "required": true, 
                        "type": "string", 
                        "name": "contentTypeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The human readable content id", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "provider-content"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ProviderContent"
                        }
                    }
                }, 
                "summary": "Get provider content", 
                "description": "Retrieves the provider content.", 
                "parameters": [
                    {
                        "description": "The content type id", 
                        "required": true, 
                        "type": "string", 
                        "name": "contentTypeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The human readable content id", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "provider-content"
                ]
            }
        }, 
        "/api/packages": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Upload raw data successful", 
                        "schema": {
                            "$ref": "#/definitions/OperationInfo"
                        }
                    }
                }, 
                "summary": "Import package", 
                "description": "Import content of a zip package. The zip file will be validated and import will be performed based on the 'dependencies' specified in the metadata file. The result of the import operation will be captured in OperationInfo object.\nAt this point, we don't support any form of rollback strategies. A failed import may potentially leave the system in an inconsistent state. Hence, its highly recommend to run a precheck/dry-run before the import to validate the package.\nSee HTTP POST /api/packages/validate for more details. This will help catch most of the errors upfront.\nAlthough the API looks similar to create package API but differs in the 'Content-Type' header where it expects 'multipart/form-data'.", 
                "parameters": [
                    {
                        "description": "The file to be imported", 
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }, 
                    {
                        "enum": [
                            "SKIP", 
                            "OVERWRITE"
                        ], 
                        "description": "The resolution mode to be used when the same entity is found to exist in the system", 
                        "default": "OVERWRITE", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "resolutionMode"
                    }
                ], 
                "tags": [
                    "consumer-package"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PagePackage"
                        }
                    }
                }, 
                "summary": "List packages", 
                "description": "This API will list all packages in the system with specified paging, sorting and filtering parameters.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "consumer-package"
                ]
            }
        }, 
        "/api/provider/contenttypes/{id}": {
            "put": {
                "responses": {
                    "201": {
                        "description": "Content type created successfully"
                    }, 
                    "204": {
                        "description": "Content type updated successfully", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Save content type", 
                "description": "Creates or updates content type.", 
                "parameters": [
                    {
                        "description": "The id of content type", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ContentType"
                        }, 
                        "description": "The content type to be updated", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "provider-content-type"
                ]
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "Content type deleted successfully"
                    }
                }, 
                "summary": "Delete content type", 
                "description": "Deletes content type for the given id", 
                "parameters": [
                    {
                        "description": "The id of content type", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "provider-content-type"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ContentType"
                        }
                    }
                }, 
                "summary": "Get content type", 
                "description": "Retrieves the content type.", 
                "parameters": [
                    {
                        "description": "The id of content type", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "consumer-content-type"
                ]
            }
        }, 
        "/api/packages/validate": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Upload raw data successful", 
                        "schema": {
                            "$ref": "#/definitions/OperationInfo"
                        }
                    }
                }, 
                "summary": "Validate package import", 
                "description": "Validate content of a zip package. The zip file will be validated for all of its content, dependencies, etc. However, no import will be performed in this operation. It is highly recommended to use this operation before performing an import. See the import API for more details.", 
                "parameters": [
                    {
                        "description": "The file to be validated", 
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }, 
                    {
                        "enum": [
                            "SKIP", 
                            "OVERWRITE"
                        ], 
                        "description": "The resolution mode to be used when the same entity is found to exist in the system", 
                        "default": "OVERWRITE", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "resolutionMode"
                    }
                ], 
                "tags": [
                    "consumer-package"
                ]
            }
        }, 
        "/api/contents/{id}/data": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "summary": "Get content data", 
                "description": "This API is generally used to download the raw data directly associated with the content and will not download any dependencies along with it.", 
                "parameters": [
                    {
                        "description": "The UUID of the content", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "enum": [
                            "ENCRYPT", 
                            "DECRYPT", 
                            "BLANKOUT"
                        ], 
                        "description": "The format in which secure values should be sent", 
                        "default": "BLANKOUT", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "secureValueFormat"
                    }
                ], 
                "tags": [
                    "consumer-content"
                ]
            }
        }, 
        "/api/packages/{pkgId}": {
            "put": {
                "responses": {
                    "204": {
                        "description": "Successfully updated package"
                    }
                }, 
                "summary": "Update package", 
                "description": "This will update a package.", 
                "parameters": [
                    {
                        "description": "The UUID of the package", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "pkgId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/Package"
                        }, 
                        "description": "The package details", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "consumer-package"
                ]
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "Successfully deleted package"
                    }
                }, 
                "summary": "Delete package", 
                "description": "This will delete a package.", 
                "parameters": [
                    {
                        "description": "The UUID of the package", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "pkgId"
                    }
                ], 
                "tags": [
                    "consumer-package"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Package"
                        }
                    }
                }, 
                "summary": "Get package", 
                "description": "API to retrieve package a consumer is permitted to see", 
                "parameters": [
                    {
                        "description": "The UUID of the package", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "pkgId"
                    }
                ], 
                "tags": [
                    "consumer-package"
                ]
            }
        }, 
        "/api/provider/contenttypes": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Content type created successfully", 
                        "schema": {
                            "$ref": "#/definitions/ContentType"
                        }
                    }
                }, 
                "summary": "Save content type", 
                "description": "Creates or updates content type.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ContentType"
                        }, 
                        "description": "The content type to be updated", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "provider-content-type"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageContentType"
                        }
                    }
                }, 
                "summary": "Get content type", 
                "description": "Retrieves the content type.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "consumer-content-type"
                ]
            }
        }, 
        "/api/contents/{contentTypeId}/{contentId}/data": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Upload raw data successful", 
                        "schema": {
                            "$ref": "#/definitions/OperationResult"
                        }
                    }
                }, 
                "summary": "Upload content data", 
                "description": "This API is generally used to upload the raw data directly and not deal with any of its dependencies.", 
                "parameters": [
                    {
                        "description": "The contentTypeId corresponding to a content provider", 
                        "required": true, 
                        "type": "string", 
                        "name": "contentTypeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The contentId for which data is being uploaded", 
                        "required": true, 
                        "type": "string", 
                        "name": "contentId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The mimeType identifying format of content being uploaded", 
                        "default": "", 
                        "required": true, 
                        "in": "header", 
                        "type": "string", 
                        "name": "Content-Type"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }, 
                        "description": "Raw content to be uploaded.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "consumer-content"
                ]
            }
        }, 
        "/api/packages/{id}": {
            "get": {
                "responses": {
                    "201": {
                        "description": "Package export successful", 
                        "schema": {
                            "type": "file"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The UUID of the package", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "enum": [
                            "ENCRYPT", 
                            "DECRYPT", 
                            "BLANKOUT"
                        ], 
                        "description": "The format in which secure values should be sent", 
                        "default": "BLANKOUT", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "secureValueFormat"
                    }
                ], 
                "produces": [
                    "application/octet-stream", 
                    "application/zip"
                ], 
                "tags": [
                    "consumer-package"
                ], 
                "summary": "Export package", 
                "description": "Exports the contents of a Package compressed in a ZIP file. The content type of the response is \"application/octet-stream\".The exported zip contains the entities that the user has access to. Based on the requested package for export, the content graph is built. However, if the user does not have access to some of the entities then they are skipped from the export. It is recommended to use the export dry run to get details about the entities that were skipped from the export.\nAlthough the API looks similar to retrieve package API but differs in the 'Accept' header where it expects 'application/octet-stream' or 'application/zip'."
            }
        }, 
        "/api/packages/{id}/validate": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/OperationInfo"
                        }
                    }
                }, 
                "summary": "Validate package export", 
                "description": "Performs a dry run/validation operation for export. It gathers the metadata about all the entities in the content graph that will be exported as part of the package export. In case of any permission exceptions where certain entities are skipped from the export then the user is alerted about the missed entities.", 
                "parameters": [
                    {
                        "description": "The UUID of the package", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "consumer-package"
                ]
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "tags": [
        {
            "name": "consumer-content"
        }, 
        {
            "name": "consumer-content-type"
        }, 
        {
            "name": "consumer-package"
        }, 
        {
            "name": "provider-content"
        }, 
        {
            "name": "provider-content-type"
        }
    ], 
    "definitions": {
        "Sort": {
            "type": "object"
        }, 
        "ProviderContent": {
            "required": [
                "contentId", 
                "contentTypeId", 
                "name", 
                "serviceId", 
                "storageType", 
                "tenantId"
            ], 
            "type": "object", 
            "properties": {
                "contentTypeId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 1024
                }, 
                "storageType": {
                    "enum": [
                        "INTERNAL", 
                        "ENTITY_REFERENCE"
                    ], 
                    "type": "string"
                }, 
                "contentId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "tenantId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "serviceId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "dependencies": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/ContentDependency"
                    }, 
                    "type": "array"
                }, 
                "subTenantId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "contentData": {
                    "$ref": "#/definitions/ContentData"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "entityRefEx": {
            "allOf": [
                {
                    "$ref": "#/definitions/entityRef"
                }, 
                {
                    "xml": {
                        "name": "entityRefEx"
                    }, 
                    "type": "object", 
                    "properties": {
                        "href": {
                            "type": "string", 
                            "description": "the Href"
                        }
                    }, 
                    "description": "Represents a reference to an entity by uri"
                }
            ]
        }, 
        "ContentType": {
            "type": "object", 
            "properties": {
                "classId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 50
                }, 
                "description": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "serviceTypeId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "OperationResult": {
            "type": "object", 
            "properties": {
                "operationErrors": {
                    "items": {
                        "$ref": "#/definitions/OperationError"
                    }, 
                    "type": "array"
                }, 
                "contentTypeId": {
                    "type": "string"
                }, 
                "contentId": {
                    "type": "string"
                }, 
                "messages": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "operationStatus": {
                    "enum": [
                        "SUCCESS", 
                        "FAILED", 
                        "WARNING"
                    ], 
                    "type": "string"
                }, 
                "contentName": {
                    "type": "string"
                }
            }
        }, 
        "PagePackage": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/Package"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "Package": {
            "required": [
                "contents", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "tenantId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "subtenantId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "contents": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string", 
                        "format": "uuid"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "EntityReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/entityRef"
                }, 
                {
                    "xml": {
                        "name": "entityRef"
                    }, 
                    "type": "object", 
                    "description": "Represents a reference to an entity defined somewhere in the suite."
                }
            ]
        }, 
        "Content": {
            "type": "object", 
            "properties": {
                "mimeType": {
                    "type": "string"
                }, 
                "contentTypeId": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "contentId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "dependencies": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string", 
                        "format": "uuid"
                    }, 
                    "type": "array"
                }, 
                "subtenantId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "tenantId": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }
            }
        }, 
        "OperationError": {
            "type": "object", 
            "properties": {
                "errorCode": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "errorMessage": {
                    "type": "string"
                }
            }
        }, 
        "PageContentType": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/ContentType"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "entityRef": {
            "xml": {
                "name": "entityRef"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "classId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "The identifier of the type or category to which the referenced entity belongs."
                }, 
                "label": {
                    "type": "string"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "The unique identifier of the referenced entity, encoded as a string"
                }, 
                "componentId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
                }
            }, 
            "description": "Represents a reference to an entity defined somewhere in the suite."
        }, 
        "OperationInfo": {
            "required": [
                "operationType"
            ], 
            "type": "object", 
            "properties": {
                "operationResults": {
                    "items": {
                        "$ref": "#/definitions/OperationResult"
                    }, 
                    "type": "array"
                }, 
                "operationStatus": {
                    "enum": [
                        "SUCCESS", 
                        "FAILED", 
                        "WARNING"
                    ], 
                    "type": "string"
                }, 
                "operationType": {
                    "enum": [
                        "IMPORT", 
                        "EXPORT", 
                        "IMPORT_DRY_RUN", 
                        "EXPORT_DRY_RUN"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "ContentData": {
            "required": [
                "data", 
                "mimeType"
            ], 
            "type": "object", 
            "properties": {
                "mimeType": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "data": {
                    "items": {
                        "type": "string", 
                        "format": "byte"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "ContentDependency": {
            "required": [
                "entityReference"
            ], 
            "type": "object", 
            "properties": {
                "isOptional": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "entityReference": {
                    "$ref": "#/definitions/entityRef"
                }
            }
        }, 
        "PageContent": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/Content"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }
    }, 
    "swagger": "2.0"
}