{
    "info": {
        "version": "7.3.0-SNAPSHOT", 
        "description": "# Composition Service API Specification", 
        "title": "Composition Service API"
    }, 
    "paths": {
        "/api/blueprints/{blueprintId}/forms/{formType}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - the custom form is set.", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "blueprintId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The type of the form.", 
                        "required": true, 
                        "type": "string", 
                        "name": "formType", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "The json string containing the custom form.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "author-api"
                ], 
                "description": "Set blueprint to use custom form.", 
                "summary": "Set blueprint to use custom form", 
                "operationId": "setCustomForm"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success - the custom form was deleted.", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "blueprintId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The type of the form.", 
                        "required": true, 
                        "type": "string", 
                        "name": "formType", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "author-api"
                ], 
                "description": "", 
                "summary": "Set blueprint to use custom form", 
                "operationId": "deleteCustomForm"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - the custom form is set.", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "blueprintId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The type of the form.", 
                        "required": true, 
                        "type": "string", 
                        "name": "formType", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "author-api"
                ], 
                "description": "Get custom form for blueprint.", 
                "summary": "Get custom form for blueprint", 
                "operationId": "getForm"
            }
        }, 
        "/api/data-service/schema/{classId}/instances/{id}/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "description": "Get the state of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique identifier of an instance of the object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the state of a field in the specified schema"
            }
        }, 
        "/api/blueprints/{blueprintId}/forms/{formType}/enable": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - the form is enabled.", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "blueprintId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The type of the form.", 
                        "required": true, 
                        "type": "string", 
                        "name": "formType", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "author-api"
                ], 
                "description": "Set blueprint to use custom form.", 
                "summary": "Set blueprint to use custom form.", 
                "operationId": "enableCustomForms"
            }
        }, 
        "/api/data-service/schema/{classId}/default/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "description": "Get the state of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the state of a field in the specified schema"
            }
        }, 
        "/api/componenttypes/{id}/forms/author": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return the component type.", 
                        "schema": {
                            "$ref": "#/definitions/form"
                        }
                    }, 
                    "404": {
                        "description": "Component type or not found or has no authoring form."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the component type.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "component-types", 
                    "provider-contract"
                ], 
                "description": "Get the authoring form for component type.", 
                "summary": "Get Component Type Authoring Form", 
                "operationId": "getComponentTypeAuthoringForm"
            }
        }, 
        "/api/componenttypes/{id}/forms/author/{elementId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - return the component type.", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }, 
                    "404": {
                        "description": "Component type or not found or has no authoring form."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the component type.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of an element within the component type.", 
                        "required": true, 
                        "type": "string", 
                        "name": "elementId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "Information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-types", 
                    "provider-contract"
                ], 
                "description": "Get the permissible values for an element within the authoring form of a specified component type.", 
                "summary": "Get Component Type Element Authoring Form Values", 
                "operationId": "getComponentTypeElementAuthoringFormValues"
            }
        }, 
        "/api/providers/{providerId}/requests/{bindingId}/complete/deallocation": {
            "post": {
                "responses": {
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "204": {
                        "description": "Success - request completion processed or unknown request ignored."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the provider.", 
                        "required": true, 
                        "type": "string", 
                        "name": "providerId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The provider's request id.", 
                        "required": true, 
                        "type": "string", 
                        "name": "bindingId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/DeallocateRequestCompletion"
                        }, 
                        "description": "Request completion data sent by the provider.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "provider-contract"
                ], 
                "description": "Provider method to notify composition service that a de-allocation request is complete.", 
                "summary": "Mark Deallocation Request Complete", 
                "operationId": "completeDeallocationRequest"
            }
        }, 
        "/api/data-service/schema/{classId}/types/{typeFilter}/{fieldId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "description": "Get the permissible values of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of a field on the schema of the specified object class.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the permissible values of a field in the specified schema"
            }
        }, 
        "/api/blueprints/{id}/status": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success - return the updated composite blueprint as CompositeBlueprintInfo.", 
                        "schema": {
                            "$ref": "#/definitions/CompositeBlueprintInfo"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "The new PublishStatus value for the blueprint.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "author-api"
                ], 
                "description": "Update the publish-status of an existing composite blueprint.", 
                "summary": "Update Blueprint Publish-Status", 
                "operationId": "updateBlueprintPublishStatus"
            }
        }, 
        "/api/blueprintdocuments/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success - return the created or updated composite blueprint document.", 
                        "schema": {
                            "$ref": "#/definitions/BlueprintDocument"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/BlueprintDocument"
                        }, 
                        "description": "The new blueprint to create.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "blueprint-documents", 
                    "author-api"
                ], 
                "description": "Create or update a composite blueprint document.", 
                "summary": "Create or Update Blueprint Document", 
                "operationId": "createOrUpdateBlueprintDocument"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "204": {
                        "description": "Composite blueprint document successfully deleted."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "blueprint-documents", 
                    "author-api"
                ], 
                "description": "Delete an existing composite blueprint document by its objectId.", 
                "summary": "Delete Blueprint Document", 
                "operationId": "deleteBlueprintDocument"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return the composite blueprint document.", 
                        "schema": {
                            "$ref": "#/definitions/BlueprintDocument"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "blueprint-documents", 
                    "consumer-api"
                ], 
                "description": "Get an existing composite blueprint document by its objectId.", 
                "summary": "Get Blueprint Document", 
                "operationId": "getBlueprintDocument"
            }
        }, 
        "/api/requests/catalog/{cafeRequestId}/hierarchy/{fieldPath}/form/{formType}/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - return an ElementMetadataResponse containing changes to elements.", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get Updates to the Request Form of a Component in a Requested Blueprint", 
                "description": "Get updates to the request form of a component in a requested blueprint, given a catalog request id and based on provided inputs. Example uses of this API include returning dynamic property value choices.", 
                "parameters": [
                    {
                        "description": "The id of the catalog request.", 
                        "required": true, 
                        "type": "string", 
                        "name": "cafeRequestId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The path of the component whose form to update.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldPath", 
                        "in": "path"
                    }, 
                    {
                        "enum": [
                            "composition.request.submission", 
                            "composition.request.details"
                        ], 
                        "description": "The type of the request form.", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "formType"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "description": "An ElementMetadataRequest instance containing the affected elements.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "internal-api"
                ]
            }
        }, 
        "/api/data-service/schema/{classId}/default/{fieldId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "description": "Get the permissible values of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of a field on the schema of the specified object class.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the permissible values of a field in the specified schema"
            }
        }, 
        "/api/composition/requests": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Success - return the location path of the submitted request."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/CompositionProviderRequest"
                        }, 
                        "description": "Request data, including blueprint information.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "composition-contract"
                ], 
                "description": "Kick off the provisioning of a nested blueprint.", 
                "summary": "Submit Composition Service Request", 
                "operationId": "submitCompositionRequest"
            }
        }, 
        "/api/requests/catalog/{cafeRequestId}/hierarchy/{fieldPath}/form/{formType}/{formElementId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - return an ElementValuesResponse containing a list of possible values.", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get the Possible Values for a Form Field of a Component in a Requested Blueprint", 
                "description": "Get the possible values for a specific field in the request form of a component in a blueprint, given a catalog request id.", 
                "parameters": [
                    {
                        "description": "The id of the catalog request.", 
                        "required": true, 
                        "type": "string", 
                        "name": "cafeRequestId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The path of the component whose form the field belongs to.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldPath", 
                        "in": "path"
                    }, 
                    {
                        "enum": [
                            "composition.request.submission", 
                            "composition.request.details"
                        ], 
                        "description": "The type of the request form.", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "formType"
                    }, 
                    {
                        "description": "The ID of the form field whose values are requested.", 
                        "required": true, 
                        "type": "string", 
                        "name": "formElementId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "An ElementValuesRequest specifying the dependency values from the current form state  and any search text provided by the user to filter the possible values.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "internal-api"
                ]
            }
        }, 
        "/api/blueprintdocuments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return a page of BlueprintDocument objects.", 
                        "schema": {
                            "$ref": "#/definitions/BlueprintDocument"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "blueprint-documents", 
                    "consumer-api"
                ], 
                "description": "Get a list of composite blueprint documents visible to the caller.", 
                "summary": "Get Blueprint Documents", 
                "operationId": "getBlueprintDocuments"
            }
        }, 
        "/api/data-service/schema/{classId}/types/{typeFilter}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "description": "This returns the schema of a particular type within a class of object.", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }
                ], 
                "summary": "Get the schema for the specified object type"
            }
        }, 
        "/api/requests/hierarchy/{blueprintId}/{fieldPath}/form/{formType}/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - return an ElementMetadataResponse containing changes to elements.", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get Updates to the Request Form of a Blueprint Component", 
                "description": "Get updates to the request form of a component within a blueprint based on provided inputs. Example uses of this API include returning dynamic property value choices.", 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "blueprintId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The path of the component whose form to update.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldPath", 
                        "in": "path"
                    }, 
                    {
                        "enum": [
                            "composition.request.submission", 
                            "composition.request.details"
                        ], 
                        "description": "The type of the request form.", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "formType"
                    }, 
                    {
                        "description": "The id of the business group in which the request will be made.", 
                        "required": false, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "description": "An ElementMetadataRequest instance containing the affected elements.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "internal-api"
                ]
            }
        }, 
        "/api/componenttypes/{objectId}/schema": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return the component type schema.", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }, 
                    "404": {
                        "description": "Component type not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the component type.", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "objectId"
                    }
                ], 
                "tags": [
                    "component-types", 
                    "consumer-api"
                ], 
                "description": "Get the schema for an existing component type by the component type's objectId.", 
                "summary": "Get Component Type Schema", 
                "operationId": "getComponentTypeSchema"
            }
        }, 
        "/api/typeextensions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return the list of component type extensions.", 
                        "schema": {
                            "$ref": "#/definitions/PageComponentTypeExtension"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "summary": "Get Component Type Extension", 
                "description": "Retrieve Component Type Extension that the current user may access. This API returns list of Component Type Extensions in the current tenant scope and global scope.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-profiles", 
                    "consumer-api"
                ]
            }
        }, 
        "/api/data-service/data/{classId}/{id}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/DynamicDataResponse"
                        }
                    }
                }, 
                "description": "Get a set of data for the specified object.", 
                "parameters": [
                    {
                        "description": "The identifier of the type of object to get data for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique id of the object to get data for. This should be sufficient to identify the object given classId.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/DynamicDataRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get a set of data for the specified object"
            }
        }, 
        "/api/componenttypes": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Success - return the created component type."
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ComponentType"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ComponentType"
                        }, 
                        "description": "The new component type to create.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-types", 
                    "author-api", 
                    "provider-contract"
                ], 
                "description": "Create a new component type.", 
                "summary": "Create Component Type", 
                "operationId": "createComponentType"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return a page of component types.", 
                        "schema": {
                            "$ref": "#/definitions/ComponentType"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "If true, return component types only for the specified blueprint. Filter and page information will be ignored.", 
                        "required": false, 
                        "type": "string", 
                        "name": "blueprintId", 
                        "in": "query"
                    }, 
                    {
                        "description": "If true, include component type schema data in returned list.", 
                        "default": "true", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": "fetchSchema"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-types", 
                    "consumer-api"
                ], 
                "description": "Get a list of component types visible to the caller.", 
                "summary": "Get Component Types", 
                "operationId": "getComponentTypes"
            }
        }, 
        "/api/componenttypes/{id}/forms/author/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - return the component type.", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }, 
                    "404": {
                        "description": "Component type or not found or has no authoring form."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the component type.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "description": "Information required to complete the request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-types", 
                    "provider-contract"
                ], 
                "description": "Get the metadata of one or more elements within the authoring form of a specified component type.", 
                "summary": "Get Component Type Element Authoring Form Metadata", 
                "operationId": "getComponentTypeElementAuthoringFormMetadata"
            }
        }, 
        "/api/requests/hierarchy/{blueprintId}/{fieldPath}/form/{formType}/{formElementId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - return an ElementValuesResponse containing a list of possible values.", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get the Possible Values for a Form Field of a Component in a Blueprint", 
                "description": "Get the possible values for a specific field in the request form of a component in a blueprint.", 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "blueprintId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The path of the component whose form the field belongs to.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldPath", 
                        "in": "path"
                    }, 
                    {
                        "enum": [
                            "composition.request.submission", 
                            "composition.request.details"
                        ], 
                        "description": "The type of the request form.", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "formType"
                    }, 
                    {
                        "description": "The ID of the form field whose values are requested.", 
                        "required": true, 
                        "type": "string", 
                        "name": "formElementId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of the business group in which the request will be made.", 
                        "required": false, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "An ElementValuesRequest specifying the dependency values from the current form state  and any search text provided by the user to filter the possible values.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "internal-api"
                ]
            }
        }, 
        "/api/blueprints/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success - return the updated composite blueprint.", 
                        "schema": {
                            "$ref": "#/definitions/CompositeBlueprint"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint to update.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "description": "If true, skip specification and recursion validations. Default is false.", 
                        "default": false, 
                        "required": true, 
                        "in": "query", 
                        "type": "boolean", 
                        "name": ""
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/CompositeBlueprint"
                        }, 
                        "description": "The updated blueprint data.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "author-api"
                ], 
                "description": "Update an existing composite blueprint.", 
                "summary": "Update Blueprint", 
                "operationId": "updateBlueprint"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "204": {
                        "description": "Composite blueprint successfully deleted."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "author-api"
                ], 
                "description": "Delete an existing composite blueprint by its objectId.", 
                "summary": "Delete Blueprint", 
                "operationId": "deleteBlueprint"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return the composite blueprint.", 
                        "schema": {
                            "$ref": "#/definitions/CompositeBlueprint"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "consumer-api"
                ], 
                "description": "Get an existing composite blueprint by its objectId.", 
                "summary": "Get Blueprint", 
                "operationId": "getBlueprint"
            }
        }, 
        "/api/data-service/list/{classId}/types/{typeFilter}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "description": "Retrieves the list of possible values for a given type of object.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Retrieves the list of possible values for a given type of object"
            }
        }, 
        "/api/componenttypes/{objectId}": {
            "put": {
                "responses": {
                    "201": {
                        "description": "Success - return the created component type."
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ComponentType"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "204": {
                        "description": "Success - return the updated component type."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the component type.", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "objectId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ComponentType"
                        }, 
                        "description": "The component type to create or update.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-types", 
                    "author-api", 
                    "provider-contract"
                ], 
                "description": "Create or update a component type.", 
                "summary": "Create or Update Component Type", 
                "operationId": "createOrUpdateComponentType"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Component type not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "204": {
                        "description": "Component type successfully deleted."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the component type.", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "objectId"
                    }, 
                    {
                        "description": "The tenant owning the component type.", 
                        "required": false, 
                        "type": "string", 
                        "name": "", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "component-types", 
                    "author-api", 
                    "provider-contract"
                ], 
                "description": "Deletes an existing component type by its objectId.", 
                "summary": "Delete Component Type", 
                "operationId": "deleteComponentType"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return the component type.", 
                        "schema": {
                            "$ref": "#/definitions/ComponentType"
                        }
                    }, 
                    "404": {
                        "description": "Component type not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the component type.", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "objectId"
                    }
                ], 
                "tags": [
                    "component-types", 
                    "consumer-api"
                ], 
                "description": "Get an existing component type by its objectId.", 
                "summary": "Get Component Type", 
                "operationId": "getComponentType"
            }
        }, 
        "/api/providers/{providerId}/requests/{bindingId}/complete/allocation": {
            "post": {
                "responses": {
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "204": {
                        "description": "Success - request completion processed or unknown request ignored."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the provider.", 
                        "required": true, 
                        "type": "string", 
                        "name": "providerId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The provider's request id.", 
                        "required": true, 
                        "type": "string", 
                        "name": "bindingId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/AllocateRequestCompletion"
                        }, 
                        "description": "Request completion data sent by the provider.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "provider-contract"
                ], 
                "description": "Provider method to notify composition service that an allocation request is complete.", 
                "summary": "Mark Allocation Request Complete", 
                "operationId": "completeAllocationRequest"
            }
        }, 
        "/api/componentresources/allResources": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return a list of Resources.", 
                        "schema": {
                            "$ref": "#/definitions/PageResourceDetails"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "summary": "Get All resources with deployment and BP details that were created or updated within a specified time range.", 
                "description": "Get all the Resources that were created or updated between a specified time range.", 
                "parameters": [
                    {
                        "description": "From Time", 
                        "format": "int64", 
                        "required": true, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "fromTime"
                    }, 
                    {
                        "description": "To Time", 
                        "format": "int64", 
                        "required": true, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "toTime"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "resources", 
                    "internal-api"
                ]
            }
        }, 
        "/api/typeextensions/{id}/values": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success - return the component type extension.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ComponentTypeExtensionValue"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "404": {
                        "description": "Component type extension value not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "summary": "Update Component Type Extension Value List", 
                "description": "Update component type extension value list of a component type extension. The list of component type extension values in the given tenant scope are updated.", 
                "parameters": [
                    {
                        "description": "The objectId of the component type extension.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ComponentTypeExtensionValue"
                            }, 
                            "type": "array"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "component-profiles", 
                    "author-api"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return the component type extension values.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ComponentTypeExtensionValue"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "404": {
                        "description": "Component type extension not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "summary": "Get Component Type Extension Values", 
                "description": "Retrieve component type extension value list of a component type extension in the tenant and global scope.", 
                "parameters": [
                    {
                        "description": "The objectId of the component type extension.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "component-profiles", 
                    "consumer-api"
                ]
            }
        }, 
        "/api/data-service/schema/{classId}/instances/{id}/{fieldId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "description": "Get the permissible values of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique identifier of an instance of the object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of a field on the schema of the specified object class.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the permissible values of a field in the specified schema"
            }
        }, 
        "/api/data-service/schema/{classId}/types/{typeFilter}/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "description": "Get the state of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Get the state of a field in the specified schema"
            }
        }, 
        "/api/data-service/schema/{classId}/default": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "description": "Get the schema for the specified object class.", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }
                ], 
                "summary": "Get the schema for the specified object class"
            }
        }, 
        "/api/blueprints/memberComponentTypes/{componentId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return the list of composite blueprint.", 
                        "schema": {
                            "$ref": "#/definitions/CompositeBlueprint"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the component type.", 
                        "required": true, 
                        "type": "string", 
                        "name": "componentId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "consumer-api"
                ], 
                "description": "Get page of composite blueprint by component type.", 
                "summary": "Get Blueprints", 
                "operationId": "getBlueprintsByComponentType"
            }
        }, 
        "/api/typeextensions/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return the component type extension.", 
                        "schema": {
                            "$ref": "#/definitions/ComponentTypeExtension"
                        }
                    }, 
                    "404": {
                        "description": "Component type extension not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "summary": "Get Component Type Extension", 
                "description": "Retrieve details of component type extension that the current user may access. This API checks for component type extension in the current tenant and if not found then checks global component type extensions.", 
                "parameters": [
                    {
                        "description": "The objectId of the component type extension.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "component-profiles", 
                    "consumer-api"
                ]
            }
        }, 
        "/api/data-service/schema/{classId}/instances/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "description": "This returns the schema of a particular type adjusted to the state of a specific instance..", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique identifier of an instance of the object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Get the schema for the specified object"
            }
        }, 
        "/api/categories": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ComponentTypeCategory"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "summary": "API to query all CompositeCategory", 
                "description": "", 
                "tags": [
                    "composition-server", 
                    "consumer-api"
                ]
            }
        }, 
        "/api/providers/{providerId}/requests/{bindingId}/complete": {
            "post": {
                "responses": {
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "204": {
                        "description": "Success - request completion processed or unknown request ignored."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of the provider.", 
                        "required": true, 
                        "type": "string", 
                        "name": "providerId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The provider's request id.", 
                        "required": true, 
                        "type": "string", 
                        "name": "bindingId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/requestCompletion"
                        }, 
                        "description": "Request completion data sent by the provider.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "provider-contract"
                ], 
                "description": "Provider method to notify composition service that a request is complete.", 
                "summary": "Mark Request Complete", 
                "operationId": "completeRequest"
            }
        }, 
        "/api/blueprints/{blueprintId}/forms/{formType}/disable": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - the form is disabled.", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "blueprintId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The type of the form.", 
                        "required": true, 
                        "type": "string", 
                        "name": "formType", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "author-api"
                ], 
                "description": "Set blueprint to use default form.", 
                "summary": "Set blueprint to use default form.", 
                "operationId": "disableCustomForms"
            }
        }, 
        "/api/blueprints": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Success - return the created composite blueprint."
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/CompositeBlueprint"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "If true, skip specification and recursion validations. Default is false.", 
                        "default": false, 
                        "required": true, 
                        "in": "query", 
                        "type": "boolean", 
                        "name": ""
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/CompositeBlueprint"
                        }, 
                        "description": "The new blueprint to create.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "author-api"
                ], 
                "description": "Create a new composite blueprint.", 
                "summary": "Create Blueprint", 
                "operationId": "createBlueprint"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - return a page of CompositeBlueprint or CompositeBlueprintInfo objects.", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }
                }, 
                "parameters": [
                    {
                        "description": "If true, return full blueprint objects. If false, return summary objects.", 
                        "default": "false", 
                        "required": true, 
                        "in": "query", 
                        "type": "string", 
                        "name": ""
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "consumer-api"
                ], 
                "description": "Get a list of composite blueprints visible to the caller.", 
                "summary": "Get Blueprints", 
                "operationId": "getBlueprints"
            }
        }, 
        "/api/blueprints/{blueprintId}/forms/{formType}/validate/{validationType}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - the custom form is validated successfully.", 
                        "schema": {
                            "$ref": "#/definitions/RestEntity"
                        }
                    }, 
                    "404": {
                        "description": "Blueprint not found."
                    }, 
                    "403": {
                        "description": "Forbidden."
                    }, 
                    "400": {
                        "description": "Invalid request - bad data."
                    }
                }, 
                "parameters": [
                    {
                        "description": "The objectId of the blueprint.", 
                        "required": true, 
                        "type": "string", 
                        "name": "blueprintId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The type of the form.", 
                        "required": true, 
                        "type": "string", 
                        "name": "formType", 
                        "in": "path"
                    }, 
                    {
                        "description": "The type of performed validation..", 
                        "required": true, 
                        "x-example": "generatedForm", 
                        "in": "path", 
                        "type": "generatedForm", 
                        "name": "validationType"
                    }
                ], 
                "tags": [
                    "blueprints", 
                    "author-api"
                ], 
                "description": "Validate custom form for blueprint.", 
                "summary": "Validate custom form for blueprint", 
                "operationId": "validateForm"
            }
        }, 
        "/api/data-service/list/{classId}/default": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "description": "Retrieves the list of possible values for a given type of object.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Retrieves the list of possible values for a given type of object"
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "tags": [
        {
            "name": "author-api"
        }, 
        {
            "name": "blueprint-documents"
        }, 
        {
            "name": "blueprints"
        }, 
        {
            "name": "component-profiles"
        }, 
        {
            "name": "component-types"
        }, 
        {
            "name": "composition-contract"
        }, 
        {
            "name": "composition-server"
        }, 
        {
            "name": "consumer-api"
        }, 
        {
            "name": "internal-api"
        }, 
        {
            "name": "provider-contract"
        }, 
        {
            "name": "resources"
        }
    ], 
    "basePath": "/composition-service", 
    "definitions": {
        "ConstantValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/literal"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutRow": {
            "type": "object", 
            "properties": {
                "items": {
                    "xml": {
                        "wrapped": true, 
                        "name": "item"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutCell"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "NotEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "complexLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "complexLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's class."
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component type."
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The type filter for this literal."
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component."
                        }, 
                        "values": {
                            "description": "Map of values, keyed by the field ids of some complex type.", 
                            "$ref": "#/definitions/literalMap"
                        }
                    }, 
                    "description": "A complex value composed of multiple values keyed by the field ids of some complex type."
                }
            ]
        }, 
        "ComponentRequestInfo": {
            "type": "object", 
            "properties": {
                "previousComponentData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "requestInputData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "resourceId": {
                    "type": "string"
                }, 
                "componentSchema": {
                    "$ref": "#/definitions/Schema"
                }, 
                "componentData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "componentTypeId": {
                    "type": "string"
                }, 
                "componentId": {
                    "type": "string"
                }
            }
        }, 
        "ParameterMapping": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "ComponentFieldValue": {
            "type": "object", 
            "properties": {
                "permittedValues": {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                "facets": {
                    "additionalProperties": {
                        "$ref": "#/definitions/Evaluator"
                    }, 
                    "type": "object"
                }, 
                "data": {
                    "additionalProperties": {
                        "$ref": "#/definitions/ComponentFieldValue"
                    }, 
                    "type": "object"
                }
            }
        }, 
        "CompositeBlueprint": {
            "required": [
                "name", 
                "publishStatus"
            ], 
            "type": "object", 
            "properties": {
                "layout": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object"
                }, 
                "description": {
                    "type": "string"
                }, 
                "snapshotVersion": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "usingCustomForm": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "catalogItemTypeId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "publishStatus": {
                    "enum": [
                        "DRAFT", 
                        "PUBLISHED", 
                        "RETIRED"
                    ], 
                    "type": "string"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "externalId": {
                    "type": "string"
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "components": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "additionalProperties": {
                        "$ref": "#/definitions/ComponentDeclaration"
                    }, 
                    "type": "object"
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "id": {
                    "type": "string"
                }, 
                "propertyGroups": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "publishStatusName": {
                    "type": "string"
                }, 
                "properties": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "additionalProperties": {
                        "$ref": "#/definitions/ComponentFieldValue"
                    }, 
                    "type": "object"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "moneyRange": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRange"
                    }, 
                    "type": "object", 
                    "properties": {
                        "maxValue": {
                            "type": "number", 
                            "description": "The upper limit of the range.", 
                            "format": "double"
                        }, 
                        "minValue": {
                            "type": "number", 
                            "description": "The lower limit of the range.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a range of money values, between some defined minimums and maximums."
                }
            ]
        }, 
        "EndsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "VisibilityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ConditionalEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "cases": {
                            "xml": {
                                "name": "case"
                            }, 
                            "items": {
                                "$ref": "#/definitions/ConditionalEvaluatorCase"
                            }, 
                            "type": "array"
                        }, 
                        "defaulValue": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "ParameterMappingCollection": {
            "type": "object", 
            "properties": {
                "params": {
                    "xml": {
                        "wrapped": true, 
                        "name": "param"
                    }, 
                    "items": {
                        "$ref": "#/definitions/ParameterMapping"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "layout": {
            "xml": {
                "name": "layout"
            }, 
            "type": "object", 
            "properties": {
                "pages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "page"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutPage"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "DisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ComponentTypeCategory": {
            "type": "object", 
            "properties": {
                "properties": {
                    "type": "string", 
                    "description": "JSON serialized string of extra properties of the categories such as permissions or if it should be hidden etc."
                }, 
                "description": {
                    "type": "string", 
                    "description": "Localization key of the description of the category"
                }, 
                "iconId": {
                    "type": "string", 
                    "description": "ID of the icon of the category"
                }, 
                "id": {
                    "type": "string", 
                    "description": "ID of the composition category"
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of the category"
                }, 
                "order": {
                    "type": "integer", 
                    "description": "The order of the category in which it should appear on the UI", 
                    "format": "int32"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Localization key of the name of the category"
                }
            }, 
            "description": "An instance of the available categories on the CBP Editor"
        }, 
        "booleanLiteral": {
            "xml": {
                "name": "booleanLiteral"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "value": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "The boolean value."
                }
            }, 
            "description": "Wraps a boolean value."
        }, 
        "ComponentInfo": {
            "type": "object", 
            "properties": {
                "data": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object"
                }, 
                "componentProfiles": {
                    "items": {
                        "$ref": "#/definitions/ComponentProfileInfo"
                    }, 
                    "type": "array"
                }, 
                "type": {
                    "type": "string"
                }, 
                "propertyGroups": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "dependsOn": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "money": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "money"
                    }, 
                    "type": "object", 
                    "properties": {
                        "amount": {
                            "type": "number", 
                            "description": "The amount associated with this value (with no specific currency).", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a single, precise monetary value."
                }
            ]
        }, 
        "OrClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "moneyTimeRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyTimeRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "basis": {
                            "description": "The span of time to calculate the rate of money for.", 
                            "$ref": "#/definitions/timeSpan"
                        }
                    }, 
                    "description": "Represents a rate of money over time."
                }
            ]
        }, 
        "UniqueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ExtensionForm": {
            "allOf": [
                {
                    "$ref": "#/definitions/FormReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "extensionId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "extensionPointId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "stringLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "stringLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a String value."
                }
            ]
        }, 
        "EqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "entityRef": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRef"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier of the type or category to which the referenced entity belongs."
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The unique identifier of the referenced entity, encoded as a string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
                        }
                    }, 
                    "description": "Represents a reference to an entity defined somewhere in the suite."
                }
            ]
        }, 
        "CallbackEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ElementState": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Constraint"
                    }, 
                    "type": "array"
                }, 
                "dependencies": {
                    "xml": {
                        "wrapped": true, 
                        "name": "dependency"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "type": "string"
                    }
                }
            }
        }, 
        "Clause": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "CompositionProviderRequest": {
            "type": "object", 
            "properties": {
                "callbackServiceId": {
                    "type": "string"
                }, 
                "blueprintRequestId": {
                    "type": "string"
                }, 
                "userContext": {
                    "$ref": "#/definitions/RequestUserContext"
                }, 
                "cafeResourceId": {
                    "type": "string"
                }, 
                "targetResourceTypeId": {
                    "type": "string"
                }, 
                "targetResourceId": {
                    "type": "string"
                }, 
                "blueprintName": {
                    "type": "string"
                }, 
                "componentInfo": {
                    "$ref": "#/definitions/ComponentRequestInfo"
                }, 
                "requestType": {
                    "enum": [
                        "PROVISION", 
                        "UPDATE", 
                        "ALLOCATE", 
                        "DEALLOCATE", 
                        "ARCHIVE", 
                        "CHANGE_LEASE", 
                        "CHANGE_OWNER", 
                        "DESTROY", 
                        "SCALE_IN", 
                        "SCALE_OUT", 
                        "RESUME", 
                        "ALTER_DEPLOYMENT"
                    ], 
                    "type": "string"
                }, 
                "rootCafeRequestId": {
                    "type": "string"
                }, 
                "requestId": {
                    "type": "string"
                }, 
                "targetResourceProviderId": {
                    "type": "string"
                }, 
                "callbackAdditionalUrlPath": {
                    "type": "string"
                }, 
                "blueprintId": {
                    "type": "string"
                }, 
                "rootCafeDeploymentId": {
                    "type": "string"
                }
            }
        }, 
        "ComplexEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "values": {
                            "additionalProperties": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "object"
                        }
                    }
                }
            ]
        }, 
        "StartsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LessThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "RestEntity": {
            "type": "object", 
            "properties": {
                "body": {
                    "type": "object"
                }, 
                "httpStatus": {
                    "enum": [
                        "CONTINUE", 
                        "SWITCHING_PROTOCOLS", 
                        "PROCESSING", 
                        "CHECKPOINT", 
                        "OK", 
                        "CREATED", 
                        "ACCEPTED", 
                        "NON_AUTHORITATIVE_INFORMATION", 
                        "NO_CONTENT", 
                        "RESET_CONTENT", 
                        "PARTIAL_CONTENT", 
                        "MULTI_STATUS", 
                        "ALREADY_REPORTED", 
                        "IM_USED", 
                        "MULTIPLE_CHOICES", 
                        "MOVED_PERMANENTLY", 
                        "FOUND", 
                        "MOVED_TEMPORARILY", 
                        "SEE_OTHER", 
                        "NOT_MODIFIED", 
                        "USE_PROXY", 
                        "TEMPORARY_REDIRECT", 
                        "PERMANENT_REDIRECT", 
                        "BAD_REQUEST", 
                        "UNAUTHORIZED", 
                        "PAYMENT_REQUIRED", 
                        "FORBIDDEN", 
                        "NOT_FOUND", 
                        "METHOD_NOT_ALLOWED", 
                        "NOT_ACCEPTABLE", 
                        "PROXY_AUTHENTICATION_REQUIRED", 
                        "REQUEST_TIMEOUT", 
                        "CONFLICT", 
                        "GONE", 
                        "LENGTH_REQUIRED", 
                        "PRECONDITION_FAILED", 
                        "PAYLOAD_TOO_LARGE", 
                        "REQUEST_ENTITY_TOO_LARGE", 
                        "URI_TOO_LONG", 
                        "REQUEST_URI_TOO_LONG", 
                        "UNSUPPORTED_MEDIA_TYPE", 
                        "REQUESTED_RANGE_NOT_SATISFIABLE", 
                        "EXPECTATION_FAILED", 
                        "I_AM_A_TEAPOT", 
                        "INSUFFICIENT_SPACE_ON_RESOURCE", 
                        "METHOD_FAILURE", 
                        "DESTINATION_LOCKED", 
                        "UNPROCESSABLE_ENTITY", 
                        "LOCKED", 
                        "FAILED_DEPENDENCY", 
                        "UPGRADE_REQUIRED", 
                        "PRECONDITION_REQUIRED", 
                        "TOO_MANY_REQUESTS", 
                        "REQUEST_HEADER_FIELDS_TOO_LARGE", 
                        "INTERNAL_SERVER_ERROR", 
                        "NOT_IMPLEMENTED", 
                        "BAD_GATEWAY", 
                        "SERVICE_UNAVAILABLE", 
                        "GATEWAY_TIMEOUT", 
                        "HTTP_VERSION_NOT_SUPPORTED", 
                        "VARIANT_ALSO_NEGOTIATES", 
                        "INSUFFICIENT_STORAGE", 
                        "LOOP_DETECTED", 
                        "BANDWIDTH_LIMIT_EXCEEDED", 
                        "NOT_EXTENDED", 
                        "NETWORK_AUTHENTICATION_REQUIRED"
                    ], 
                    "type": "string"
                }, 
                "httpHeaders": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array"
                    }, 
                    "type": "object"
                }, 
                "setLocation": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "multipleLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "multipleLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "xml": {
                                "name": "item"
                            }, 
                            "items": {
                                "$ref": "#/definitions/literal"
                            }, 
                            "type": "array", 
                            "description": "The list of specified values. NOTE: All values must be of the same data type."
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string", 
                            "description": "The data type of the items in the list."
                        }
                    }, 
                    "description": "A literal which represents multiple values. All of these component values must be of the same data type."
                }
            ]
        }, 
        "LayoutFlow": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "parts": {
                            "xml": {
                                "wrapped": true, 
                                "name": "part"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutFlowElement"
                            }, 
                            "type": "array"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "AllocateComponentRequest": {
            "allOf": [
                {
                    "$ref": "#/definitions/CompositionProviderRequest"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "allocationConstraint": {
                            "$ref": "#/definitions/AllocationConstraint"
                        }
                    }
                }
            ]
        }, 
        "ContextPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "RefreshOnChangeBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SkipExportBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutCell": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "size": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "SubsetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ComponentAllocationInfo": {
            "type": "object", 
            "properties": {
                "data": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "value": {
            "xml": {
                "name": "value"
            }, 
            "type": "object", 
            "properties": {
                "label": {
                    "type": "string"
                }, 
                "underlyingValue": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "CoalesceEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "moneyRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "cost": {
                            "description": "The cost (including optional currency code).", 
                            "$ref": "#/definitions/literal"
                        }
                    }, 
                    "description": "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB."
                }
            ]
        }, 
        "secureString": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "secureString"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a secured string value, such as a password."
                }
            ]
        }, 
        "StaticForm": {
            "allOf": [
                {
                    "$ref": "#/definitions/FormReference"
                }, 
                {
                    "required": [
                        "layout"
                    ], 
                    "type": "object", 
                    "properties": {
                        "layout": {
                            "$ref": "#/definitions/layout"
                        }
                    }
                }
            ]
        }, 
        "ComplexDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }
            ]
        }, 
        "ExternalFormReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/FormReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "formId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "PermissibleValueList": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "customAllowed": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "Evaluator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ConstantClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/booleanLiteral"
                        }
                    }
                }
            ]
        }, 
        "literalMap": {
            "xml": {
                "name": "literalMap"
            }, 
            "type": "object", 
            "properties": {
                "entries": {
                    "xml": {
                        "name": "entry"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LiteralMapEntry"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Equivalent of java.util.Map"
        }, 
        "ExtensionRendererContext": {
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "extensionId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "elementValuesRequest": {
            "xml": {
                "name": "elementValuesRequest"
            }, 
            "type": "object", 
            "properties": {
                "text": {
                    "type": "string"
                }, 
                "userId": {
                    "type": "string"
                }, 
                "associateValue": {
                    "$ref": "#/definitions/literal"
                }, 
                "headers": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "pagingInfo": {
                    "$ref": "#/definitions/ElementValuesPagingInfo"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "dependencyValues": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "MinimumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "ComponentProfileInfo": {
            "type": "object", 
            "properties": {
                "permissibleValueNames": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "defaultValueName": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }
            }
        }, 
        "StaticPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "values": {
                            "xml": {
                                "name": "value"
                            }, 
                            "items": {
                                "$ref": "#/definitions/value"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "MandatoryConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaximumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "RegexpConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "errorMessage": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "formUpdateResponse": {
            "xml": {
                "name": "formUpdateResponse"
            }, 
            "type": "object", 
            "properties": {
                "elementUpdates": {
                    "xml": {
                        "wrapped": true, 
                        "name": "elementUpdate"
                    }, 
                    "items": {
                        "$ref": "#/definitions/updateElementEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "WrapperClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "PrimitiveDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "typeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "requestCompletion": {
            "xml": {
                "name": "requestCompletion"
            }, 
            "type": "object", 
            "properties": {
                "resourceBindingIds": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "requestCompletionState": {
                    "enum": [
                        "SUCCESSFUL", 
                        "PARTIALLY_SUCCESSFUL", 
                        "FAILED", 
                        "REJECTED"
                    ], 
                    "type": "string"
                }, 
                "completionDetails": {
                    "type": "string"
                }
            }
        }, 
        "LiteralMapEntry": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/literal"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "LayoutFlowElement": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ResetValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "dateTimeLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "dateTimeLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The date.", 
                            "format": "date-time"
                        }
                    }, 
                    "description": "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class."
                }
            ]
        }, 
        "IncrementBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "AndClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "CustomPropertyDefinitionMetadata": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "required": [
                        "field"
                    ], 
                    "type": "object", 
                    "properties": {
                        "field": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                }
            ]
        }, 
        "batchElementUpdateRequest": {
            "xml": {
                "name": "batchElementUpdateRequest"
            }, 
            "required": [
                "formValues"
            ], 
            "type": "object", 
            "properties": {
                "trigger": {
                    "type": "string"
                }, 
                "affectedElements": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "formValues": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "triggeredDetailsLayout": {
                    "$ref": "#/definitions/layout"
                }
            }
        }, 
        "LayoutField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "extensionRendererContext": {
                            "$ref": "#/definitions/ExtensionRendererContext"
                        }, 
                        "description": {
                            "type": "string"
                        }, 
                        "dataType": {
                            "$ref": "#/definitions/DataType"
                        }, 
                        "permissibleValues": {
                            "$ref": "#/definitions/PermissibleValueList"
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "displayAdvice": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "TEXTBOX", 
                                "HYPERLINK", 
                                "EMAIL", 
                                "TEXTAREA", 
                                "DATE_TIME_PICKER", 
                                "CHECKBOX", 
                                "YES_NO", 
                                "CHECKBOX_GROUP", 
                                "DUAL_LIST", 
                                "RADIO_GROUP", 
                                "DROPDOWN", 
                                "LIST", 
                                "SEARCHER", 
                                "TREE", 
                                "FORM", 
                                "IMAGE", 
                                "SLIDER", 
                                "DATA_TABLE", 
                                "VALUE_PICKER"
                            ], 
                            "type": "string"
                        }, 
                        "orderIndex": {
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "isMultiValued": {
                            "xml": {
                                "attribute": true
                            }, 
                            "default": false, 
                            "type": "boolean"
                        }, 
                        "labelSize": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "columns": {
                            "xml": {
                                "wrapped": true, 
                                "name": "column"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutField"
                            }, 
                            "type": "array"
                        }, 
                        "detailLayout": {
                            "$ref": "#/definitions/LayoutReference"
                        }
                    }
                }
            ]
        }, 
        "PageResourceDetails": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/ResourceDetails"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "NullDisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SupersetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NotClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClause": {
                            "$ref": "#/definitions/Clause"
                        }
                    }
                }
            ]
        }, 
        "LayoutSection": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "rows": {
                    "xml": {
                        "wrapped": true, 
                        "name": "row"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutRow"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "ConditionalEvaluatorCase": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "condition": {
                    "$ref": "#/definitions/Clause"
                }
            }
        }, 
        "FormReference": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "literal": {
            "xml": {
                "name": "literal"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "description": "Wraps a value such that values of different types can be treated generically."
        }, 
        "DynamicLayoutReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ]
        }, 
        "ComponentTypeForms": {
            "type": "object", 
            "properties": {
                "formsByScenario": {
                    "additionalProperties": {
                        "$ref": "#/definitions/FormReference"
                    }, 
                    "type": "object"
                }
            }
        }, 
        "PageComponentTypeExtension": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/ComponentTypeExtension"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "entityRefEx": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRefEx"
                    }, 
                    "type": "object", 
                    "properties": {
                        "href": {
                            "type": "string", 
                            "description": "the Href"
                        }
                    }, 
                    "description": "Represents a reference to an entity by uri"
                }
            ]
        }, 
        "FacetValueMap": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/FacetValueMapEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "form": {
            "xml": {
                "name": "form"
            }, 
            "type": "object", 
            "properties": {
                "values": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "layout": {
                    "$ref": "#/definitions/layout"
                }, 
                "fieldPrefixes": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "Constraint": {
            "discriminator": "type", 
            "required": [
                "value"
            ], 
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }
            }
        }, 
        "ResourceDetails": {
            "type": "object", 
            "properties": {
                "blueprintName": {
                    "type": "string"
                }, 
                "cafeResourceId": {
                    "type": "string"
                }, 
                "componentTypeId": {
                    "type": "string"
                }, 
                "resourceId": {
                    "type": "string"
                }, 
                "providerBindingId": {
                    "type": "string"
                }, 
                "providerId": {
                    "type": "string"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "blueprintSnapshotId": {
                    "type": "string"
                }, 
                "deploymentId": {
                    "type": "string"
                }, 
                "subTenantId": {
                    "type": "string"
                }, 
                "blueprintId": {
                    "type": "string"
                }, 
                "deploymentName": {
                    "type": "string"
                }, 
                "resourceName": {
                    "type": "string"
                }, 
                "blueprintComponentId": {
                    "type": "string"
                }
            }
        }, 
        "CompositeBlueprintInfo": {
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string"
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "publishStatus": {
                    "enum": [
                        "DRAFT", 
                        "PUBLISHED", 
                        "RETIRED"
                    ], 
                    "type": "string"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "publishStatusName": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "DynamicDataResponse": {
            "type": "object", 
            "properties": {
                "values": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "LayoutReference": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "BooleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "RequestUserContext": {
            "type": "object", 
            "properties": {
                "requestedFor": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "reasons": {
                    "type": "string"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "subtenantId": {
                    "type": "string"
                }, 
                "requestedBy": {
                    "type": "string"
                }
            }
        }, 
        "IaasPropertyNameBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CustomValidationConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Expression": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "operator": {
                            "$ref": "#/definitions/CriteriaOperator"
                        }, 
                        "rightOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }, 
                        "leftOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "ElementValuesPagingInfo": {
            "type": "object", 
            "properties": {
                "count": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "offset": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "DynamicValueContext": {
            "required": [
                "parameterMappings"
            ], 
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "providerEntityId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "WithinOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ComponentTypeExtension": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "fieldIds": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "componentType": {
                    "$ref": "#/definitions/ComponentType"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "id": {
                    "type": "string"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "DefaultValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "StaticLayout": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "required": [
                        "layout"
                    ], 
                    "type": "object", 
                    "properties": {
                        "layout": {
                            "$ref": "#/definitions/layout"
                        }
                    }
                }
            ]
        }, 
        "elementValues": {
            "xml": {
                "name": "elementValues"
            }, 
            "type": "object", 
            "properties": {
                "values": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "MaxValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "AllocationConstraint": {
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string"
                }
            }
        }, 
        "EntityReferenceDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "FixedValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DynamicDataRequest": {
            "type": "object", 
            "properties": {
                "ignoreUnknownFields": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "ids": {
                    "xml": {
                        "name": "id"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "tenantId": {
                    "type": "string"
                }
            }
        }, 
        "MonetaryValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "literal"
                    }, 
                    "type": "object", 
                    "properties": {
                        "currencyCode": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The ISO 4217 code used to identify the currency (if any) associated with this value."
                        }
                    }, 
                    "description": "Base type for representing monetary values, encapsulating both some kind of quantity and a currency."
                }
            ]
        }, 
        "DeallocateRequestCompletion": {
            "type": "object", 
            "properties": {
                "completionDetails": {
                    "type": "string"
                }, 
                "success": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "TimeSpan": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "timeSpan"
                    }, 
                    "type": "object", 
                    "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
                }
            ]
        }, 
        "ExternalValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "dynamicValueProviderInfo"
                    ], 
                    "type": "object", 
                    "properties": {
                        "dynamicValueProviderInfo": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "ContainsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ComponentType": {
            "type": "object", 
            "properties": {
                "outputResourceTypeId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "serviceTypeId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "containerFieldId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "iconId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "catalogItemTypeId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "forms": {
                    "$ref": "#/definitions/ComponentTypeForms"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "categoryId": {
                    "type": "string"
                }, 
                "schema": {
                    "$ref": "#/definitions/Schema"
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "allocationRelatedResourceTypeIds": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "callbacks": {
                    "$ref": "#/definitions/ComponentTypeCallbackSupport"
                }, 
                "serviceId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 40
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "classId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "idForEntitlements": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 1023
                }, 
                "supportLenientDestroy": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "requiredPermissionIds": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "Field": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "dataType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "permissibleValues": {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                "label": {
                    "type": "string"
                }, 
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "displayAdvice": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "TEXTBOX", 
                        "HYPERLINK", 
                        "EMAIL", 
                        "TEXTAREA", 
                        "DATE_TIME_PICKER", 
                        "CHECKBOX", 
                        "YES_NO", 
                        "CHECKBOX_GROUP", 
                        "DUAL_LIST", 
                        "RADIO_GROUP", 
                        "DROPDOWN", 
                        "LIST", 
                        "SEARCHER", 
                        "TREE", 
                        "FORM", 
                        "IMAGE", 
                        "SLIDER", 
                        "DATA_TABLE", 
                        "VALUE_PICKER"
                    ], 
                    "type": "string"
                }, 
                "orderIndex": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "isMultiValued": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "columns": {
                    "xml": {
                        "wrapped": true, 
                        "name": "column"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "UnspecifiedEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "integerLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "integerLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "integer", 
                            "description": "The integer value.", 
                            "format": "int64"
                        }
                    }, 
                    "description": "Wraps a signed 64-bit integer value."
                }
            ]
        }, 
        "LessThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "IsDefinedOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Schema": {
            "type": "object", 
            "properties": {
                "fields": {
                    "xml": {
                        "name": "field"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                }
            }
        }, 
        "Sort": {
            "type": "object"
        }, 
        "FieldReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "path": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "LayoutExtension": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "fieldPrefix": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "extensionId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "extensionPointId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "BlueprintDocument": {
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "DRAFT", 
                        "PUBLISHED", 
                        "RETIRED"
                    ], 
                    "type": "string"
                }, 
                "properties": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object"
                }, 
                "layout": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object"
                }, 
                "description": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "components": {
                    "additionalProperties": {
                        "$ref": "#/definitions/ComponentInfo"
                    }, 
                    "type": "object"
                }, 
                "propertyGroups": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "MinValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutPlaceholderCell": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ReadOnlyConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MultipleEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "items"
                    ], 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "MinCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutText": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "value": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "timeSpan": {
            "xml": {
                "name": "timeSpan"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "amount": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "description": "The amount for the time span.", 
                    "format": "int64"
                }, 
                "unit": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "MILLISECONDS", 
                        "SECONDS", 
                        "MINUTES", 
                        "HOURS", 
                        "DAYS", 
                        "WEEKS", 
                        "MONTHS", 
                        "YEARS"
                    ], 
                    "type": "string", 
                    "description": "The unit of measure for the time span. e.g: days."
                }
            }, 
            "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
        }, 
        "ComponentTypeExtensionValue": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "componentTypeExtension": {
                    "$ref": "#/definitions/ComponentTypeExtension"
                }, 
                "valuesMap": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "isEnabled": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "tenantId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "label": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "FacetValueMapEntry": {
            "type": "object", 
            "properties": {
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "value": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "LayoutPage": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "sections": {
                    "xml": {
                        "wrapped": true, 
                        "name": "section"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutSection"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "CompositeBlueprintComponentProfile": {
            "type": "object", 
            "properties": {
                "permissibleValueNames": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "defaultValueName": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }
            }
        }, 
        "decimalLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "decimalLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "number", 
                            "description": "The decimal value.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Wraps a decimal value."
                }
            ]
        }, 
        "CriteriaOperator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "InternalConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "updateElementEntry": {
            "xml": {
                "name": "updateElementEntry"
            }, 
            "type": "object", 
            "properties": {
                "errors": {
                    "xml": {
                        "wrapped": true, 
                        "name": "error"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "detailLayout": {
                    "$ref": "#/definitions/layout"
                }, 
                "facetValues": {
                    "$ref": "#/definitions/FacetValueMap"
                }, 
                "permissibleValues": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }, 
                "extensionRendererContext": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "DataType": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "typeId": {
                    "enum": [
                        "STRING", 
                        "INTEGER", 
                        "DECIMAL", 
                        "MONEY", 
                        "MONEY_RANGE", 
                        "MONEY_TIME_RATE", 
                        "BOOLEAN", 
                        "ENTITY_REFERENCE", 
                        "DATE_TIME", 
                        "TIME_SPAN", 
                        "SECURE_STRING", 
                        "COMPLEX"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "EditableBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "AllocateRequestCompletion": {
            "type": "object", 
            "properties": {
                "completionDetails": {
                    "type": "string"
                }, 
                "success": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "result": {
                    "$ref": "#/definitions/ComponentAllocationInfo"
                }
            }
        }, 
        "DynamicPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }, 
                        "context": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "EncryptedBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ComponentTypeCallbackSupport": {
            "required": [
                "clusterBehavior"
            ], 
            "type": "object", 
            "properties": {
                "clusterBehavior": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "UNSUPPORTED", 
                        "SUPPORTED"
                    ], 
                    "type": "string"
                }, 
                "rollback": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "listOffers": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "requestDetails": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "allocate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "destroy": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "validate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "ObjectDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "label": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ComponentDeclaration": {
            "type": "object", 
            "properties": {
                "type": {
                    "type": "string"
                }, 
                "componentProfiles": {
                    "items": {
                        "$ref": "#/definitions/CompositeBlueprintComponentProfile"
                    }, 
                    "type": "array"
                }, 
                "data": {
                    "additionalProperties": {
                        "$ref": "#/definitions/ComponentFieldValue"
                    }, 
                    "type": "object"
                }, 
                "propertyGroups": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "dependson": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "MinLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }
    }, 
    "swagger": "2.0"
}