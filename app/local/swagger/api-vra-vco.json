{
    "info": {
        "version": "7.1.0", 
        "description": "## Overview", 
        "title": "vRealize Orchestrator Server API"
    }, 
    "paths": {
        "/packages/{packageName}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find a package with the specified name"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "<p>Deletes a package with a given name.</p><p>Takes 3 options for deleting a package:</p><ul><li>deletePackage - deletes the package without the content</li><li>deletePackageWithContent - deletes the package along with the content. If other packages share elements with this package, they will be deleted</li><li>deletePackageKeepingShared - deletes the package along with the content. If other packages share elements with this package, the elements will not be removed.</li></ul><p>If no option parameter is provided, the default one is used: deletePackage</p>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "packageName", 
                        "in": "path"
                    }, 
                    {
                        "default": "deletePackage", 
                        "required": false, 
                        "type": "string", 
                        "name": "option", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Packages Service"
                ], 
                "summary": "Delete package", 
                "operationId": "deletePackage"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/package-details"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a package with the specified name"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Returns details of the package, with list all contained workflows and actions.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "packageName", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Packages Service"
                ], 
                "summary": "Package details", 
                "operationId": "packageDetails"
            }
        }, 
        "/actions/{id}/permissions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "The request is successful"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "404": {
                        "description": "Can not find an action with the specified id"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Sets permissions for an action with given id", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Sets permissions for an action with given id", 
                "operationId": "insertPermissionsForObject"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Can not find an action with the specified id"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Deletes all permissions for an action with a given id", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Deletes all permissions for an action with a given id", 
                "operationId": "deletePermissionsForObject"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "404": {
                        "description": "Can not find an action with the specified id"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves action permissions", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Retrieves action permissions", 
                "operationId": "getPermissionsForObject"
            }
        }, 
        "/catalog/{namespace}/metadata": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/module-metadata"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Plug-in metadata contains information about the types that this plug-in defines and their attributes or relations.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "showHiddenTypes", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "Fetch plugin metadata", 
                "operationId": "fetchPluginMetadata"
            }
        }, 
        "/configurations/{id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find configuration with the specified name"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Deletes a configuration with a given ID. If the configuration is referenced by some workflow, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "force", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Configuration Service"
                ], 
                "summary": "Delete configuration", 
                "operationId": "deleteConfiguration"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find configuration with the specified name"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Exports a configuration by its ID. If the request is successful, the configuration binary content is available in the body of the response message. It is up to the client application to properly fetch and process this attachment, for example, by saving it to the local file system. The exported configuration has the same internal format as the configurations exported by using the Orchestrator client.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/vcoobject+xml"
                ], 
                "tags": [
                    "Configuration Service"
                ], 
                "summary": "Export configuration", 
                "operationId": "exportConfiguration"
            }
        }, 
        "/interactions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/interactions"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Returns a list of all deployed packages.", 
                "tags": [
                    "User Interaction Service"
                ], 
                "summary": "Get all user interactions", 
                "operationId": "getAllUserInteractions"
            }
        }, 
        "/workflows/{id}/permissions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find an action with the specified name"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Sets permissions for a workflow with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Set workflow permissions", 
                "operationId": "insertPermissionsForObject"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Cannot find an action with the specified name"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Deletes all permissions for a workflow with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Deletes all permissions", 
                "operationId": "deletePermissionsForObject"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a workflow with the specified ID."
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieve workflow permissions.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Retrieve workflow permissions", 
                "operationId": "getPermissionsForObject"
            }
        }, 
        "/content": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/inventory-items"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Returns links to entity type that can be exported, imported, or deleted from the Orchestrator database content. Currently, only packages, workflows, and actions are supported. Other Orchestrator objects, for example resources, can be imported or exported by wrapping them inside a package.", 
                "tags": [
                    "Content Service"
                ], 
                "summary": "List content types", 
                "operationId": "listContentTypes"
            }
        }, 
        "/content/workflows/{categoryId}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find a category with the specified ID."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Imports a workflow in a given category. The workflow binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like: <br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/content/packages/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.workflow\");<br />parts.put(\"file\", Arrays.asList(r));<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "categoryId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "Import workflow", 
                "operationId": "importWorkflow"
            }
        }, 
        "/catalog/{namespace}/{type}/{id}/tags": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "A REST endpoint for attaching tag to entity.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "type", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/tag-instance"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "Attach tag to entity", 
                "operationId": "tagObject"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/tag-instances"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "A REST endpoint to retrieve tags attached to an element.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "type", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "default": "GLOBAL_AND_PRIVATE", 
                        "required": false, 
                        "type": "string", 
                        "name": "searchScope", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "List object tags", 
                "operationId": "listObjectTags"
            }
        }, 
        "/tasks/{id}/permissions": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a task with the specified id"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Sets permissions for a task with a given ID.<br />Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN ", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Set task permissions", 
                "operationId": "insertPermissionsForObject"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "202": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Deletes all permissions for a task with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Delete task permissions", 
                "operationId": "deletePermissionsForObject"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves task permissions.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Get task permissions", 
                "operationId": "getPermissionsForObject"
            }
        }, 
        "/catalog/{namespace}/{type}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/inventory-items"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "If the request is successful, the API responds with an HTTP 200 OK status code and the requested list of objects", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "type", 
                        "in": "path"
                    }, 
                    {
                        "name": "maxResult", 
                        "format": "int32", 
                        "default": 2147483647, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "name": "startIndex", 
                        "format": "int32", 
                        "default": 0, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "default": false, 
                        "required": true, 
                        "type": "boolean", 
                        "name": "queryCount", 
                        "in": "query"
                    }, 
                    {
                        "name": "keys", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "conditions", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "sortOrders", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "rootObject", 
                        "in": "query"
                    }, 
                    {
                        "name": "tags", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "List objects for specific type", 
                "operationId": "findSimpleListQuery"
            }
        }, 
        "/plugins/{pluginName}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "403": {
                        "description": "User is not authorized"
                    }, 
                    "401": {
                        "description": "User is not authenticated"
                    }
                }, 
                "description": "Exports a plug-in by name. If the request is successful, the plug-in binary content is available as an attachment with MIME type application/zip (that is, a normal ZIP file). It is up to the client application to properly fetch and process this attachment, for example by saving it to local file system. The exported plug-in has the same format as that needed by the configurator when uploading a plug-in.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "pluginName", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Plugin Service"
                ], 
                "summary": "Export plugin", 
                "operationId": "exportPlugin"
            }
        }, 
        "/content/actions/{categoryName}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find an action category with the specified name."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Imports an action in a given category. The action binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/content/packages/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.action\");<br />parts.put(\"file\", Arrays.asList(r));<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "categoryName", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "Import action", 
                "operationId": "importAction"
            }
        }, 
        "/tasks/{id}/permissions/{ruleId}": {
            "put": {
                "responses": {
                    "404": {
                        "description": "Can not find a task with the specified ID, the user does not have 'admin' access rights for that task, or the permission rule with the specified ID does not exist."
                    }, 
                    "202": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Updates principal or access rights for a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Update permission rule", 
                "operationId": "updatePermissionRule"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Can not find a task with the specified ID, the user does not have 'admin' access rights for that task, or the permission rule with the specified ID does not exist."
                    }, 
                    "202": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Deletes a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Delete permission rule", 
                "operationId": "deletePermissionRule"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a task with the specified ID, the user does not have 'read' access rights for that task, or the permission rule with the specified ID does not exist."
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves details for a specific permission rule. Each rule contains information about the principal and the access rights assigned.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Get permission rule", 
                "operationId": "getPermissionRule"
            }
        }, 
        "/policies/{id}": {
            "delete": {
                "responses": {
                    "404": {
                        "description": "Cannot find a policy with the specified ID or the user does not have 'delete' rights over it"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Delete policy", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Policy Service"
                ], 
                "summary": "Delete policy", 
                "operationId": "deletePolicy"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/WsPolicy"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a policy with the specified ID or the user does not have 'read' rights over it"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Get policy", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Policy Service"
                ], 
                "summary": "Get policy", 
                "operationId": "getPolicy"
            }
        }, 
        "/server": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/server-object"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized."
                    }
                }, 
                "produces": [
                    "application/xml"
                ], 
                "description": "A REST endpoint for listing Orchestrator Server instance services.", 
                "tags": [
                    "Orchestrator Server Instance Service"
                ], 
                "summary": "Enumerate services", 
                "operationId": "enumerateServices"
            }
        }, 
        "/actions/{actionId}/executions": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/parameter"
                        }
                    }, 
                    "404": {
                        "description": "Can not find an action with the specified id"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Runs an action with given id", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "actionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/execution-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Runs an action with given id", 
                "operationId": "executeActionById"
            }
        }, 
        "/workflows/{workflowId}/interactions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/interactions"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": " Retrieves all user interactions for a requested workflow.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": " Retrieves all user interactions for a requested workflow", 
                "operationId": "getAllUserInteractionsForWorkflow"
            }
        }, 
        "/plugins": {
            "post": {
                "responses": {
                    "409": {
                        "description": "Plug-in already exists"
                    }, 
                    "403": {
                        "description": "User is not authorized"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authenticated"
                    }
                }, 
                "description": "Imports a plug-in. If a plug-in with the same name is already installed, the import will fail unless the overwrite parameter is set to true. The plug-in binary content must be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/plugins/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/plugin.dar\");<br />parts.put(\"file\", Arrays.asList(r));<br />parts.put(\"categoryId\", \"\");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }, 
                    {
                        "default": "dar", 
                        "required": true, 
                        "type": "string", 
                        "name": "format", 
                        "in": "query"
                    }, 
                    {
                        "default": false, 
                        "required": true, 
                        "type": "boolean", 
                        "name": "overwrite", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Plugin Service"
                ], 
                "summary": "Import plugin", 
                "operationId": "importPlugin"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/plugins"
                        }
                    }, 
                    "403": {
                        "description": "User is not authorized"
                    }, 
                    "401": {
                        "description": "User is not authenticated"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Returns metadata information for all installed plug-ins.", 
                "tags": [
                    "Plugin Service"
                ], 
                "summary": "List all plugins", 
                "operationId": "listAllPlugins"
            }
        }, 
        "/tags": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/owners"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Returned list contains users created at least one tag. Global tags are listed under system user __GLOBAL__.", 
                "tags": [
                    "Tagging Service"
                ], 
                "summary": "List tag owners", 
                "operationId": "listTagOwners"
            }
        }, 
        "/catalog/{namespace}/{type}/metadata/icon": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "All types that a Orchestrator plug-in defines, and the system types that the Orchestrator server defines, have default icon images. If the request is successful, the API responds with an HTTP 200 OK status code and the requested icon image as a downloadable attachment that has an 'image/png' MIME type.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "type", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "Download icon for type", 
                "operationId": "downloadIconForType"
            }
        }, 
        "/resources/{id}/permissions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "The request is successful"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Sets permissions for a resource with a given ID. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN ", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Resource Service"
                ], 
                "summary": "Insert permissions", 
                "operationId": "insertPermissionsForObject"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Deletes all permissions for resource with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Resource Service"
                ], 
                "summary": "Delete permissions", 
                "operationId": "deletePermissionsForObject"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Retrieves resource permissions.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Resource Service"
                ], 
                "summary": "Get permissions", 
                "operationId": "getPermissionsForObject"
            }
        }, 
        "/workflows/{workflowId}/executions/{executionId}": {
            "delete": {
                "responses": {
                    "404": {
                        "description": "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Deletes a specific workflow run", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Run Service"
                ], 
                "summary": "Delete workflow run", 
                "operationId": "deleteWorkflowExecution"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/workflow-execution"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Retrieves a workflow run for a given workflow. When request parameter showDetails is set to true additional information will be retrieved. In this case the result contains current execution stack of the workflow run.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "showDetails", 
                        "in": "query"
                    }, 
                    {
                        "name": "expand", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Run Service"
                ], 
                "summary": "Get workflow execution", 
                "operationId": "getWorkflowExecution"
            }
        }, 
        "/workflows/{workflowId}/presentation/instances": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/execution"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": " Creates a new instance of the presentation of a workflow, by using the passed parameters. To create a new instance of a workflow presentation, make an HTTP GET request at the URL that contains the instances of the workflow presentation. Presentation's fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid. In order the returned workflow presentation to be localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow, otherwise it defaults to the standard workflow presentation.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/execution-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Presentation Service"
                ], 
                "summary": "Start presentation", 
                "operationId": "startPresentation"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/executions"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves a list of the presentations for a workflow that you specify. To retrieve the list of workflow presentations, make an HTTP GET request at the workflow presentations list URL. The returned list contains all of the currently running workflow presentation instances, and all completed instances based on the data from the workflow executions. If the user has admin rights, all presentation instances for all users are returned.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Presentation Service"
                ], 
                "summary": "Get all presentations", 
                "operationId": "allPresentation"
            }
        }, 
        "/workflows": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find a category with the specified ID."
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Imports a workflow in a given category. The workflow binary content should be available as multi-part content (see RFC-2387 for details).<br />Details of working with multi-part resources depend on the used client HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:-------------------String url = \"https://localhost:8281/vco/api/workflows/\";MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();Resource r = new FileSystemResource(\"D:/path/to/some.workflow\");parts.put(\"file\", Arrays.asList(r));parts.put(\"categoryId\", \"\");new RestTemplate().postForLocation(url, parts); ------------------- </pre>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "categoryId", 
                        "in": "query"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "overwrite", 
                        "in": "query"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Import/upload a workflow", 
                "operationId": "importWorkflow"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/inventory-items"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Get all workflows", 
                "parameters": [
                    {
                        "name": "maxResult", 
                        "format": "int32", 
                        "default": 2147483647, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "name": "startIndex", 
                        "format": "int32", 
                        "default": 0, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "default": false, 
                        "required": true, 
                        "type": "boolean", 
                        "name": "queryCount", 
                        "in": "query"
                    }, 
                    {
                        "name": "keys", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "conditions", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "sortOrders", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "tags", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Get all workflows", 
                "operationId": "getAllWorkflows"
            }
        }, 
        "/content/workflows/{workflowId}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Deletes a workflow with a given ID. If the workflow is referenced by some other workflows, or is running, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "force", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "Delete workflow", 
                "operationId": "deleteWorkflow"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Exports a package by its ID. If the request is successful, the package binary content is available as an attachment with MIME type application/zip (that is, a normal ZIP file) with a default file name {workflowname}.workflow. It is up to the client application to properly fetch and process this attachment, for example by saving it to the local file system. The exported package has the same internal format as the workflows exported by using the Orchestrator client.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "Export workflow", 
                "operationId": "exportWorkflow"
            }
        }, 
        "/workflows/{workflowId}/executions/{executionId}/interaction/presentation/instances": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/execution"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Creates a new instance of a workflow user interaction presentation by using the passed parameters. To create a new instance of a workflow user interaction presentation, make an HTTP GET request at the URL that contains the instances of that workflow user interaction presentation. Presentation fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid. In order the returned workflow user interaction presentation to be localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow, otherwise it defaults to the standard workflow user interaction presentation.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/execution-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow User Interaction Presentation Service"
                ], 
                "summary": "Start interaction presentation", 
                "operationId": "startInteractionPresentation"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/executions"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves a list of all user interaction presentations for a specified workflow execution. The returned list contains all currently running workflow execution user interaction presentation instances. If the user has admin rights, all presentation instances for all users are returned.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow User Interaction Presentation Service"
                ], 
                "summary": "Get all interaction presentations", 
                "operationId": "allInteractionPresentations"
            }
        }, 
        "/resources": {
            "post": {
                "responses": {
                    "404": {
                        "description": "Cannot find resource category with the specified name"
                    }, 
                    "202": {
                        "description": "Resource successfully imported"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Imports a resource in a given category. The resource binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/resources/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.vsoconf\");<br />parts.put(\"file\", Arrays.asList(r));<br />parts.put(\"categoryId\", \"828080808080808080808080808080807F818080013217004819830adebdb10ea\");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "categoryId", 
                        "in": "query"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Resource Service"
                ], 
                "summary": "Import resource", 
                "operationId": "importResource"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/resources"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Retrieves a list of all resources.", 
                "tags": [
                    "Resource Service"
                ], 
                "summary": "List all resources", 
                "operationId": "listAllresources"
            }
        }, 
        "/plugins/{pluginName}/state": {
            "put": {
                "responses": {
                    "403": {
                        "description": "User is not authorized"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authenticated"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Enables/disables plug-in.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "pluginName", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/state-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Plugin Service"
                ], 
                "summary": "Enable/disable plugin", 
                "operationId": "disablePlugin"
            }
        }, 
        "/workflows/{workflowId}/tasks": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/tasks"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Retrieves all scheduled tasks for a requested workflow.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Retrieves all scheduled tasks for a requested workflow", 
                "operationId": "getAllTasksForWorkflow"
            }
        }, 
        "/content/actions/{actionName}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find an action with the specified name."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Deletes an action with a given fully qualified name. If the action is referenced by some workflows, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "actionName", 
                        "in": "path"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "force", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "Delete action", 
                "operationId": "deleteAction"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find an action with the specified name."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Export an action by its fully qualified name (category name + action name). If the request is successful, the action binary content is available as attachment with MIME type application/zip (that is, a normal ZIP file) with a default file name {actionname}.action. It is up to the client application to properly fetch and process this attachment, for example by saving it to the local file system. The exported action has the same internal format as the actions exported by using the Orchestrator client.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "actionName", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "Export action", 
                "operationId": "exportAction"
            }
        }, 
        "/server-configuration": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    }, 
                    "403": {
                        "description": "User is not authorized."
                    }, 
                    "401": {
                        "description": "User is not authenticated."
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)."
                    }
                }, 
                "description": "Imports/exports the server configuration. The exported file is available as an attachment with MIME type application/zip. To perform an export request, an empty file must be attached to the request. Otherwise, the server tries to import a configuration.<br /><br />The format of the exported or imported file is same as that of files exported or imported by using the Orchestrator configuration interface. The configuration binary content must be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code that imports a server configuration:<br /> -----------------------<br />MultiValueMap<String, Object> parts = new LinkedMultiValueMap<String, Object>();<br />parts.add(\"file\", new FileSystemResource(\"/path/to/vco_config_file.config\"))<br />;parts.add(\"password\", \"secret\")<br />;parts.add(\"importIdentity\", Boolean.FALSE);<br /><br />getRestTemplate().postForEntity(\"https://localhost:8281/vco/api/server-configuration\", parts, Void.class);<br />-----------------------</pre>", 
                "parameters": [
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "password", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "name": "importIdentity", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "name": "isUpgradeBackup", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Server Configuration Service"
                ], 
                "summary": "Import server configuration", 
                "operationId": "importServerConfiguration"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "$ref": "#/definitions/config-entries"
                        }
                    }, 
                    "403": {
                        "description": "User is not authorized."
                    }, 
                    "401": {
                        "description": "User is not authenticated."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Returns a human-readable representation of the Orchestrator server configuration.", 
                "tags": [
                    "Server Configuration Service"
                ], 
                "summary": "Get server configuration", 
                "operationId": "getServerConfiguration"
            }
        }, 
        "/resources/{id}/permissions/{ruleId}": {
            "put": {
                "responses": {
                    "404": {
                        "description": "Cannot find a resource with the specified ID, the user does not have 'admin' access rights for that resource, or the permission rule with the specified ID does not exist."
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Updates principal or access rights for a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Resource Service"
                ], 
                "summary": "Update permission rule", 
                "operationId": "updatePermissionRule"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Cannot find a resource with the specified ID, the user does not have 'admin' access rights for that resource, or the permission rule with the specified ID does not exist."
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Deletes a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Resource Service"
                ], 
                "summary": "Delete permission rule", 
                "operationId": "deletePermissionRule"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a resource with the specified ID, the user does not have 'read' access rights for that resource, or the permission rule with the specified ID does not exist."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Retrieves details for a specific permission rule. Each rule contains information about the principal and the access rights assigned.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Resource Service"
                ], 
                "summary": "Get permission rule", 
                "operationId": "getPermissionRule"
            }
        }, 
        "/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "$ref": "#/definitions/service-descriptors"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Lists the available top-level service entry points.", 
                "tags": [
                    "Service Descriptor Service"
                ], 
                "summary": "Enumerate services", 
                "operationId": "enumerateServices"
            }
        }, 
        "/workflows/{id}/permissions/{ruleId}": {
            "put": {
                "responses": {
                    "404": {
                        "description": "Can not find a workflow with the specified ID, the user does not have 'admin' access rights for that workflow, or the permission rule with the specified ID does not exist"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Updates principal or access rights for a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Updates permission rule", 
                "operationId": "updatePermissionRule"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Can not find a workflow with the specified ID, the user does not have 'admin' access rights for that workflow, or the permission rule with the specified ID does not exist"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Deletes a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Delete permission rule", 
                "operationId": "deletePermissionRule"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a workflow with the specified ID, the user does not have 'read' access rights for that workflow, or the permission rule with the specified ID does not exist"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Each rule contains information about the principal and the access rights assigned.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Retrieves permission rule", 
                "operationId": "getPermissionRule"
            }
        }, 
        "/tags/{owner}/{tagName}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/tag-instances"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves list of tag instance created by specific user. Retrieved information is composed of reference to tagged object, tag name, tag value and is this instance global or private.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "owner", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tagName", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Tagging Service"
                ], 
                "summary": "Get tags by tag name and owner", 
                "operationId": "getTagsByTagNameAndOwner"
            }
        }, 
        "/catalog/{namespace}/{parentType}/{parentId}/{relationName}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/inventory-items"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Every Orchestrator plug-in can define relations between its types. For example, hierarchy structures can be defined as 'CHILDREN' relations between parent and children types. If the request is successful, the API responds with an HTTP 200 OK status code and a list containing the child objects that are accessible through a given relation, if any.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "parentType", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "parentId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "relationName", 
                        "in": "path"
                    }, 
                    {
                        "name": "maxResult", 
                        "format": "int32", 
                        "default": 2147483647, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "name": "startIndex", 
                        "format": "int32", 
                        "default": 0, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "default": false, 
                        "required": true, 
                        "type": "boolean", 
                        "name": "queryCount", 
                        "in": "query"
                    }, 
                    {
                        "name": "keys", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "conditions", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "sortOrders", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "Find by relation", 
                "operationId": "findByRelation"
            }
        }, 
        "/packages/{packageName}/permissions/{ruleId}": {
            "put": {
                "responses": {
                    "404": {
                        "description": "Cannot find a package with the specified name, the user does not have 'admin' access rights for that package, or the permission rule with the specified ID does not exist"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Updates principal or access rights for single permission rule with given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Packages Service"
                ], 
                "summary": "Update permission rule", 
                "operationId": "updatePermissionRule"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Cannot find a package with the specified name, the user does not have 'admin' access rights for that package, or the permission rule with the specified ID does not exist"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Packages Service"
                ], 
                "summary": "Delete permission rule", 
                "operationId": "deletePermissionRule"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a package with the specified name, the user does not have 'read' access rights for that package, or the permission rule with the specified ID does not exist"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Retrieves details for a specific permission rule. Each rule contains information about the principal and he access rights assigned.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Packages Service"
                ], 
                "summary": "Get permission rule", 
                "operationId": "getPermissionRule"
            }
        }, 
        "/policies": {
            "post": {
                "responses": {
                    "202": {
                        "description": "The request is successful"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Create policy", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/WsPolicy"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Policy Service"
                ], 
                "summary": "Create policy", 
                "operationId": "createPolicy"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/WsPolicyList"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Get all policies", 
                "tags": [
                    "Policy Service"
                ], 
                "summary": "Get all policies", 
                "operationId": "getAllPolicies"
            }
        }, 
        "/actions/{actionId}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Action successfully deleted"
                    }, 
                    "404": {
                        "description": "Can not find an action with the specified id"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "<p>Deletes an action with a given id.</p><p>If the action is referenced by some workflows, it is considered to be 'in use'and the delete operation will fail, unless the 'force' option is provided.</p>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "actionId", 
                        "in": "path"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "force", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Delete an action", 
                "operationId": "deleteAction"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Can not find an action with the specified id"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "<p>Exports an action by its ID. If the request is successful, the action binary content is available as an attachment with MIME type application/zip (that is, a normal ZIP file) with a default file name {actionname}.action.</p><p>It is up to the client application to properly fetch and process this attachment, i.e. by saving it to the local file system.</p><p>The exported action has the same internal format as the actions exported by using the Orchestrator client.</p>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "actionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/octet-stream", 
                    "application/zip"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Export an action with given id", 
                "operationId": "exportAction"
            }
        }, 
        "/server/authentication": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/server-authentication"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Retrieve the Orchestrator Server Authentication configuration type and login url.", 
                "tags": [
                    "Orchestrator Server Instance Service"
                ], 
                "summary": "Get authentication", 
                "operationId": "getAuthentication"
            }
        }, 
        "/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "$ref": "#/definitions/ServiceRegistryStatus"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Returns the registration state of Orchestrator in vRA component registry.", 
                "tags": [
                    "Service Descriptor Service"
                ], 
                "summary": "Get vRA registration state", 
                "operationId": "status"
            }
        }, 
        "/actions": {
            "post": {
                "responses": {
                    "404": {
                        "description": "Can not find an action category with the specified name"
                    }, 
                    "202": {
                        "description": "Action successfully imported"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "<p>Imports an action in a given category. The action binary content should be available as multi-part content (see RFC-2387 for details).</p><p>Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:</p><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/actions/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.action\");<br />parts.put(\"file\", Arrays.asList(r));<br />parts.put(\"categoryName\", \"com.vmware.basic\");<br />new RestTemplate().postForLocation(url, parts);<br />------------------- </pre>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "categoryName", 
                        "in": "query"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "overwrite", 
                        "in": "query"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Import an action in the given category", 
                "operationId": "importAction"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/actions"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Retrieves a list of all actions", 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Retrieves a list of all actions", 
                "operationId": "listAllActions"
            }
        }, 
        "/configurations": {
            "post": {
                "responses": {
                    "404": {
                        "description": "Cannot find configuration with the specified name"
                    }, 
                    "202": {
                        "description": "Configuration successfully imported"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Imports configuration in a given category. The configuration binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/configurations/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.vsoconf\");<br />parts.put(\"file\", Arrays.asList(r));<br />parts.put(\"categoryId\", \"828080808080808080808080808080807F818080013217004819830adebdb10ea\");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------<br /></pre>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "categoryId", 
                        "in": "query"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Configuration Service"
                ], 
                "summary": "Import configuration", 
                "operationId": "importConfiguration"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/configurations"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Retrieves a list of all configurations.", 
                "tags": [
                    "Configuration Service"
                ], 
                "summary": "List all configurations", 
                "operationId": "listAllConfigurations"
            }
        }, 
        "/inventory/**": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "$ref": "#/definitions/inventory-item"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "description": "If the request is successful, the API responds with an HTTP 200 OK status code and a list containing the child objects that are located at this hierarchy level. The user can navigate hierarchy using 'up'/'down' links in the result. If there is no 'up' link, you are at the root level. If there is no 'down' link, you have reached a leaf object which is not a parent or other objects in this hierarchy. Depending on the level where you invoke the service, the results should be interpreted differently.", 
                "parameters": [
                    {
                        "name": "maxResult", 
                        "format": "int32", 
                        "default": 2147483647, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "name": "startIndex", 
                        "format": "int32", 
                        "default": 0, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "default": false, 
                        "required": true, 
                        "type": "boolean", 
                        "name": "queryCount", 
                        "in": "query"
                    }, 
                    {
                        "name": "keys", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "conditions", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "sortOrders", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Inventory Service"
                ], 
                "summary": "Browse inventory path", 
                "operationId": "browseInventoryPath"
            }
        }, 
        "/workflows/{workflowId}/executions/{executionId}/interaction/presentation": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/presentation"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves the definition of a user interaction presentation. To retrieve the definition of a user interaction presentation, make an HTTP GET request at the URL of the presentation. Pass the workflow and execution IDs as a path variable. To retrieve the user interaction presentation definition localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow of the user interaction, otherwise it defaults to the standard user interaction presentation definition.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow User Interaction Presentation Service"
                ], 
                "summary": "Get presentation for interaction", 
                "operationId": "getPresentationForInteraction"
            }
        }, 
        "/workflows/{id}/icon": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "The icon's binary data is returned and response Content-type is set to correct media type, for example \"Content-Type:image/png\"", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Access workflow's icon", 
                "operationId": "downloadWorkflowIcon"
            }
        }, 
        "/workflows/{workflowId}/presentation/instances/{executionId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/execution"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID"
                    }, 
                    "403": {
                        "description": "The user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Update a specific workflow presentation instance. Presentation fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid. If the parameter's 'updated' flag is set to true, the dependent field values are recalculated.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/execution-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Presentation Service"
                ], 
                "summary": "Update presentation", 
                "operationId": "updatePresentation"
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/execution"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID"
                    }, 
                    "403": {
                        "description": "The user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Update a specific workflow presentation instance. Presentation fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid. If the parameter's 'updated' flag is set to true, the dependent field values are recalculated.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/execution-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Presentation Service"
                ], 
                "summary": "Update presentation", 
                "operationId": "updatePresentation"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Cannot find presentation instance for executionId"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Cancels the execution of a workflow presentation instance. This API call cancels only the workflow presentation execution. To cancel the workflow execution, use APIs under <b>/api/workflows/{workflowId}/instances</b>.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Presentation Service"
                ], 
                "summary": "Delete workflow execution", 
                "operationId": "deleteWorkflowExecution"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/execution"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID"
                    }, 
                    "403": {
                        "description": "The user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves a specific workflow presentation instance. Presentation instances are removed after the workflow starts. If the presentation instance under requested <b>executionId</b> does not exists, a new presentation instance is created by using the parameters from the workflow execution with the same ID. To retrieve the workflow presentation localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow, otherwise it defaults to the standard workflow presentation.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Presentation Service"
                ], 
                "summary": "Load Execution", 
                "operationId": "loadExecution"
            }
        }, 
        "/content/actions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/inventory-items"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Returns a list of all deployed actions.", 
                "parameters": [
                    {
                        "name": "maxResult", 
                        "format": "int32", 
                        "default": 2147483647, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "name": "startIndex", 
                        "format": "int32", 
                        "default": 0, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "default": false, 
                        "required": true, 
                        "type": "boolean", 
                        "name": "queryCount", 
                        "in": "query"
                    }, 
                    {
                        "name": "keys", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "conditions", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "sortOrders", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "tags", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "List actions", 
                "operationId": "listActions"
            }
        }, 
        "/plugins/installPluginDynamically": {
            "post": {
                "responses": {
                    "409": {
                        "description": "Plug-in already exists"
                    }, 
                    "403": {
                        "description": "User is not authorized"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authenticated"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Imports a plug-in. If a plug-in with the same name is already installed, the import will fail unless the overwrite parameter is set to true. The plug-in binary content must be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/plugins/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/plugin.dar\");<br />parts.put(\"file\", Arrays.asList(r));<br />parts.put(\"categoryId\", \"\");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Plugin Service"
                ], 
                "summary": "Install plugin dynamically", 
                "operationId": "installPluginDynamically"
            }
        }, 
        "/catalog/{namespace}/{type}/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/inventory-item"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "A REST endpoint for retrieving an element by its type and ID. All Orchestrator objects can be accessed or identified by their unique combination of namespace, type and ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "type", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "name": "keys", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "Find by id", 
                "operationId": "findById"
            }
        }, 
        "/about": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "$ref": "#/definitions/about-info"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "A REST endpoint for retrieving server build properties", 
                "tags": [
                    "Service Descriptor Service"
                ], 
                "summary": "Get about info", 
                "operationId": "aboutInfo"
            }
        }, 
        "/categories/{id}/permissions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "The request is successful"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a category with the specified ID"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Sets permissions for a category with a given ID. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Insert permissions", 
                "operationId": "insertPermissionsForObject"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    }, 
                    "404": {
                        "description": "Cannot find a category with the specified ID,"
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "description": "Deletes all permissions for a category with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Deletes all permissions", 
                "operationId": "deletePermissionsForObject"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a category with the specified ID,"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Retrieves category permissions.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Get category permissions", 
                "operationId": "getPermissionsForObject"
            }
        }, 
        "/categories": {
            "post": {
                "responses": {
                    "201": {
                        "description": "The request is successful"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a category with the specified name"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Category name must be specified"
                    }
                }, 
                "description": "Endpoint for adding categories in root.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/category-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Add root category", 
                "operationId": "addRootCategory"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/categories"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Endpoint for retrieving all categories.", 
                "parameters": [
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "categoryType", 
                        "in": "query"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "isRoot", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Get all categories", 
                "operationId": "listCategories"
            }
        }, 
        "/customevent/{eventname}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Send custom event", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "eventname", 
                        "in": "path"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Custom Event Service"
                ], 
                "summary": "Send custom event", 
                "operationId": "sendCustomEvent"
            }
        }, 
        "/catalog/{namespace}/{type}/{id}/tags/{tagname}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "To remove global tag form entity tag name must be prefixed with \":\".", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "type", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tagname", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "Remove tag from entity", 
                "operationId": "untagObject"
            }
        }, 
        "/tasks": {
            "post": {
                "responses": {
                    "404": {
                        "description": "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "202": {
                        "description": "The request is successful"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Use this endpoint to schedule a new task.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/task"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Create task", 
                "operationId": "createTask"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/tasks"
                        }
                    }, 
                    "404": {
                        "description": ""
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Endpoint for retrieving all tasks.", 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Get tasks", 
                "operationId": "getTasks"
            }
        }, 
        "/workflows/{workflowId}/executions/{executionId}/state": {
            "delete": {
                "responses": {
                    "404": {
                        "description": "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Cancels a workflow run", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Run Service"
                ], 
                "summary": "Cancel workflow run", 
                "operationId": "cancelWorkflowExecution"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/state"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves the current state for a requested workflow run", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Run Service"
                ], 
                "summary": "Get workflow execution state", 
                "operationId": "getWorkflowExecutionState"
            }
        }, 
        "/content/workflows": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/inventory-items"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Returns a list of all deployed workflows.", 
                "parameters": [
                    {
                        "name": "maxResult", 
                        "format": "int32", 
                        "default": 2147483647, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "name": "startIndex", 
                        "format": "int32", 
                        "default": 0, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "default": false, 
                        "required": true, 
                        "type": "boolean", 
                        "name": "queryCount", 
                        "in": "query"
                    }, 
                    {
                        "name": "keys", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "conditions", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "sortOrders", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "tags", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "List workflows", 
                "operationId": "listWorkflows"
            }
        }, 
        "/tasks/{id}/executions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/executions"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Endpoint for retrieving all task executions until the current date. ", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Get task executions", 
                "operationId": "getExecutions"
            }
        }, 
        "/workflows/{workflowId}/executions": {
            "post": {
                "responses": {
                    "404": {
                        "description": "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "202": {
                        "description": "The request is successful"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Creates a new instance of a workflow's run, by using the passed parameters. The workflow run is an asynchronous, so the call does not return a response body.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/execution-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Run Service"
                ], 
                "summary": "Start workflow execution", 
                "operationId": "startWorkflowExecution"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/executions"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves all workflow runs for a given workflow and filters by current user's permissions.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "name": "maxResult", 
                        "format": "int32", 
                        "default": 2147483647, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "name": "startIndex", 
                        "format": "int32", 
                        "default": 0, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }, 
                    {
                        "name": "keys", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "conditions", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }, 
                    {
                        "name": "sortOrders", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Run Service"
                ], 
                "summary": "Get all executions", 
                "operationId": "getAllExecutionsFor"
            }
        }, 
        "/schema": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "The XSD schema file defines the elements and types used by the REST service. You can use it to generate stub classes (in Java or other programming language).", 
                "tags": [
                    "Service Descriptor Service"
                ], 
                "summary": "Get REST XSD schema file", 
                "operationId": "getXmlSchema"
            }
        }, 
        "/workflows/{workflowId}/executions/{executionId}/interaction/presentation/instances/{presentationExecutionId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/execution"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID, or presentation instance for executionId does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid (there's a validation error)"
                    }
                }, 
                "description": "Update a specific workflow execution user interaction presentation instance. Presentation fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "presentationExecutionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/execution-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow User Interaction Presentation Service"
                ], 
                "summary": "Update presentation", 
                "operationId": "updatePresentation"
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/execution"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID, or presentation instance for executionId does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid (there's a validation error)"
                    }
                }, 
                "description": "Update a specific workflow execution user interaction presentation instance. Presentation fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "presentationExecutionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/execution-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow User Interaction Presentation Service"
                ], 
                "summary": "Update presentation", 
                "operationId": "updatePresentation"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Cannot find presentation instance for executionId"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized."
                    }
                }, 
                "description": "Cancels a workflow execution user interaction presentation instance. This API call cancels only the workflow execution user interaction presentation. To cancel the workflow execution use APIs under <b>/api/workflows/{workflowId}/instances</b>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "presentationExecutionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow User Interaction Presentation Service"
                ], 
                "summary": "Delete workflow execution", 
                "operationId": "deleteWorkflowExecution"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/execution"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID"
                    }, 
                    "403": {
                        "description": "The user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves a specific workflow execution user interaction presentation instance. To retrieve the user interaction presentation localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow of the user interaction, otherwise it defaults to the standard user interaction presentation.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "presentationExecutionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow User Interaction Presentation Service"
                ], 
                "summary": "Load execution", 
                "operationId": "loadExecution"
            }
        }, 
        "/resources/{id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find an resource with the specified ID"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "If the resource is referenced by some workflow, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "force", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Resource Service"
                ], 
                "summary": "Delete resource", 
                "operationId": "deleteResource"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find resource with the specified ID"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Exports a resource by its ID. If the request is successful, the resource binary content is available in the body of response message. It is up to the client application to properly fetch and process this attachment, for example by saving it to local file system. The exported resource has the same internal format as the resource exported using Orchestrator client.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/octet-stream"
                ], 
                "tags": [
                    "Resource Service"
                ], 
                "summary": "Export resource", 
                "operationId": "exportResource"
            }
        }, 
        "/actions/{id}/permissions/{ruleId}": {
            "put": {
                "responses": {
                    "404": {
                        "description": "Can not find an action with the specified ID, the user does not have 'read' access rights for that action, or the permission rule with the specified ID does not exist"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Updates principal or access rights for a single permission rule with a given id", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Updates principal or access rights for a single permission rule with a given id", 
                "operationId": "updatePermissionRule"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Can not find an action with the specified ID, the user does not have 'read' access rights for that action, or the permission rule with the specified ID does not exist"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Deletes a single permission rule with a given id", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Deletes a single permission rule with a given id", 
                "operationId": "deletePermissionRule"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }, 
                    "404": {
                        "description": "Can not find an action with the specified ID, the user does not have 'read' access rights for that action, or the permission rule with the specified ID does not exist"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Each rule contains information about the principal and he access rights assigned.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Retrieves details for a specific permission rule", 
                "operationId": "getPermissionRule"
            }
        }, 
        "/workflows/{workflowId}/executions/{executionId}/interaction": {
            "post": {
                "responses": {
                    "404": {
                        "description": "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Answers a user interaction for a specific workflow run. If a workflow run with ID: <b>executionId</b> has a user interaction request, the workflow run is suspended until a user answers the interaction request. To answer a user interaction, use this API call with appropriate parameters.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/execution-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Run Service"
                ], 
                "summary": "Answers user interaction", 
                "operationId": "answerUserInteraction"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/user-interaction"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves user interaction details for a workflow run. If a workflow run with ID: <b>executionId</b> has a user interaction request, the workflow run is suspended until a user answers the interaction request. This API call returns the user interaction parameter, which has to be filled to answer it.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Run Service"
                ], 
                "summary": "Get user interaction", 
                "operationId": "getUserInteraction"
            }
        }, 
        "/workflows/{workflowId}/presentation": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/presentation"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves the definition of a workflow presentation. To retrieve the workflow presentation definition localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow, otherwise it defaults to the standard workflow presentation definition.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Presentation Service"
                ], 
                "summary": "Get presentation", 
                "operationId": "getPresentationFor"
            }
        }, 
        "/content/packages/{packageName}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find a package with the specified name."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Deletes a package with a given name. If a package has some content (workflows, actions or other elements put inside it), it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "packageName", 
                        "in": "path"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "force", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "Delete package", 
                "operationId": "deletePackage"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find a package with the specified name."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Exports a package by its name. If the request is successful, the package binary content is available as an attachment with MIME type application/zip (that is, a normal ZIP file) with a default file name {packagename}.package. It is up to the client application to properly fetch and process this attachment, for example by saving it to the local file system. The exported package has the same internal format as the packages exported by using the Orchestrator client", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "packageName", 
                        "in": "path"
                    }, 
                    {
                        "default": true, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "exportConfigurationAttributeValues", 
                        "in": "query"
                    }, 
                    {
                        "default": true, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "exportGlobalTags", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "Export package", 
                "operationId": "exportPackage"
            }
        }, 
        "/server/permissions/{ruleId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "The user does not have 'admin' access rights for the server object, or the permission rule with the specified ID does not exist."
                    }, 
                    "401": {
                        "description": "The user is not authorized."
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)."
                    }
                }, 
                "description": "Updates principal or access rights for a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Orchestrator Server Instance Service"
                ], 
                "summary": "Update permission rule", 
                "operationId": "updatePermissionRule"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "The user does not have 'read' access rights for the server object, or the permission rule with the specified ID does not exist."
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized."
                    }
                }, 
                "description": "Deletes a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Orchestrator Server Instance Service"
                ], 
                "summary": "Delete permission rule", 
                "operationId": "deletePermissionRule"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }, 
                    "404": {
                        "description": "The user does not have 'read' access rights for the server object, or the permission rule with the specified ID does not exist."
                    }, 
                    "401": {
                        "description": "The user is not authorized."
                    }
                }, 
                "description": "Retrieves details for a specific permission rule. Each rule contains information about the principal and the access rights assigned.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Orchestrator Server Instance Service"
                ], 
                "summary": "Get permission rule", 
                "operationId": "getPermissionRule"
            }
        }, 
        "/versions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "$ref": "#/definitions/supported-versions"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Currently, there is only one version.", 
                "tags": [
                    "Service Descriptor Service"
                ], 
                "summary": "List supported API versions", 
                "operationId": "supportedApiVersions"
            }
        }, 
        "/packages/{packageName}/permissions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "The request is successful"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Set permissions for package with given name.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Packages Service"
                ], 
                "summary": "Set permissions for package", 
                "operationId": "insertPermissionsForObject"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Deletes all permissions for a package with a given name.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Packages Service"
                ], 
                "summary": "Deletes all permissions", 
                "operationId": "deletePermissionsForObject"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Retrieves package permissions.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Packages Service"
                ], 
                "summary": "Get package permissions", 
                "operationId": "getPermissionsForObject"
            }
        }, 
        "/workflows/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/workflow"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a workflow with the specified id or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "The returned definition contains base data for the workflow, as well the input and output parameter definitions. It also has links to the workflow presentation and workflow category in which this workflow is located.<p>To retrieve the input and output parameter definitions localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow, otherwise it defaults to the standard input and output parameter definitions.</p>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Retrieves the definition of a workflow", 
                "operationId": "getWorkflow"
            }
        }, 
        "/packages": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Package successfully imported"
                    }, 
                    "409": {
                        "description": "One or more package elements have an older version."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Imports a package. The package binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/packages/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.package\");<br />parts.put(\"file\", Arrays.asList(r));<br />new RestTemplate().postForLocation(url, parts);<br />------------------- </pre>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "overwrite", 
                        "in": "query"
                    }, 
                    {
                        "default": true, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "importConfigurationAttributeValues", 
                        "in": "query"
                    }, 
                    {
                        "enum": [
                            "DoNotImport", 
                            "ImportAndOverwriteExistingValue", 
                            "ImportButPreserveExistingValue"
                        ], 
                        "name": "tagImportMode", 
                        "default": "ImportButPreserveExistingValue", 
                        "required": false, 
                        "in": "query", 
                        "type": "string"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Packages Service"
                ], 
                "summary": "Import package", 
                "operationId": "importPackage"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/packages"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Returns a list of all deployed packages.", 
                "tags": [
                    "Packages Service"
                ], 
                "summary": "List all packages", 
                "operationId": "listAllPackages"
            }
        }, 
        "/configurations/{id}/permissions/{ruleId}": {
            "put": {
                "responses": {
                    "404": {
                        "description": "Cannot find a configuration with the specified ID, the user does not have 'admin' access rights for that configuration, or the permission rule with the specified ID does not exist"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Updates principal or access rights for a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Configuration Service"
                ], 
                "summary": "Update permission rule", 
                "operationId": "updatePermissionRule"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Cannot find a configuration with the specified ID, the user does not have 'admin' access rights for that configuration, or the permission rule with the specified ID does not exist"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Deletes a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Configuration Service"
                ], 
                "summary": "Delete permission rule", 
                "operationId": "deletePermissionRule"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a configuration with the specified ID, the user does not have 'read' access rights for that configuration, or the permission rule with the specified ID does not exist"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Retrieves details for a specific permission rule.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Configuration Service"
                ], 
                "summary": "Get permission rule", 
                "operationId": "getPermissionRule"
            }
        }, 
        "/actions/{categoryName}/{actionName}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/action"
                        }
                    }, 
                    "404": {
                        "description": "Can not find an action with the specified name"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "The returned definition contains base data for the action, as well the input parameter's definitions and the output type.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "categoryName", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "actionName", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Retrieves the definition of an action by categoryName and actionName", 
                "operationId": "getAction"
            }
        }, 
        "/actions/{categoryName}/{actionName}/executions": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/parameter"
                        }
                    }, 
                    "404": {
                        "description": "Can not find an action with the specified name"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Runs an action with given category and name", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "categoryName", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "actionName", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/execution-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Actions Service"
                ], 
                "summary": "Runs an action with given category and name", 
                "operationId": "executeActionByName"
            }
        }, 
        "/catalog/{namespace}/metadata/icon": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "If the request is successful, the API responds with an HTTP 200 OK status code and the requested icon image as a downloadable attachment that has an 'image/png' MIME type.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "Download icon for module", 
                "operationId": "downloadIconForModule"
            }
        }, 
        "/categories/{id}/permissions/{ruleId}": {
            "put": {
                "responses": {
                    "404": {
                        "description": "Cannot find a category with the specified ID, the user does not have 'admin' access rights for that category, or the permission rule with the specified ID does not exist"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Updates principal or access rights for a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Update permission rule", 
                "operationId": "updatePermissionRule"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Cannot find a category with the specified ID, the user does not have 'admin' access rights for that category, or the permission rule with the specified ID does not exist"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Deletes a single permission rule with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Delete permission rule", 
                "operationId": "deletePermissionRule"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a category with the specified ID, the user does not have 'read' access rights for that category, or the permission rule with the specified ID does not exist."
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "description": "Retrieves details for a specific permission rule. Each rule contains information about the principal and he access rights assigned.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Get permission rule", 
                "operationId": "getPermissionRule"
            }
        }, 
        "/workflows/{workflowId}/executions/{executionId}/logs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/logs"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Provides information about each individual event that occurs when the workflow runs. This information includes a description of the event, the user who triggered it, the type and origin of the event, and the time and date when it occurred.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "executionId", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Run Service"
                ], 
                "summary": "Get workflow run logs", 
                "operationId": "getWorkflowExecutionLogs"
            }
        }, 
        "/catalog": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/inventory-item"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "A REST endpoint for listing all catalog entry points. Each Orchestrator plug-in exposes its own catalog entry point that is accessible at /catalog/{pluginname}. The Orchestrator server exposes a separate catalog entry point that is accessible at /catalog/System", 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "List namespaces", 
                "operationId": "listNamespaces"
            }
        }, 
        "/categories/{id}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a category with the specified ID"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Category name must be specified"
                    }
                }, 
                "description": "Endpoint for adding child categories.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/category-context"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Add child category", 
                "operationId": "addChildCategory"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Cannot find a category with the specified ID,"
                    }, 
                    "403": {
                        "description": "User doesn't have permission to delete the category"
                    }, 
                    "204": {
                        "description": "Delete operation completed OK"
                    }, 
                    "409": {
                        "description": "Category has child elements"
                    }
                }, 
                "description": "Deletes a category with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "deleteNonEmptyContent", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Delete category", 
                "operationId": "deleteCategory"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find a category with the specified ID"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Endpoint for retrieving details for a category.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Category Service"
                ], 
                "summary": "Get category", 
                "operationId": "getCategory"
            }
        }, 
        "/catalog/{namespace}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/inventory-item"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "A REST endpoint for retrieving the root elements in a namespace. All Orchestrator plug-ins that have an inventory, usually provide a single root element. The Orchestrator server does not have a single root. Instead, for the System namespace, the Orchestrator REST API returns a list that contains links to all system types (workflows, tasks, etc.)", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }, 
                    {
                        "name": "keys", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": false, 
                        "in": "query", 
                        "type": "array", 
                        "collectionFormat": "multi"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Catalog Service"
                ], 
                "summary": "Find root element", 
                "operationId": "findRootElement"
            }
        }, 
        "/content/packages": {
            "post": {
                "responses": {
                    "202": {
                        "description": "Package successfully imported"
                    }, 
                    "409": {
                        "description": "One or more package elements have an older version."
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Imports a package. The package binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/content/packages/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.package\");<br />parts.put(\"file\", Arrays.asList(r));<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "file", 
                        "in": "formData"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "overwrite", 
                        "in": "query"
                    }, 
                    {
                        "default": true, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "importConfigurationAttributeValues", 
                        "in": "query"
                    }, 
                    {
                        "enum": [
                            "DoNotImport", 
                            "ImportAndOverwriteExistingValue", 
                            "ImportButPreserveExistingValue"
                        ], 
                        "name": "tagImportMode", 
                        "default": "ImportButPreserveExistingValue", 
                        "required": false, 
                        "in": "query", 
                        "type": "string"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Content Service"
                ], 
                "summary": "Import package", 
                "operationId": "importPackage"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/inventory-items"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Returns a list of all deployed packages.", 
                "tags": [
                    "Content Service"
                ], 
                "summary": "List all packages", 
                "operationId": "listAllPackages"
            }
        }, 
        "/users": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Returns the solution user and whether the current user has admin rights as well as its member groups.", 
                "tags": [
                    "User Service"
                ], 
                "summary": "Get user information", 
                "operationId": "userMeta"
            }
        }, 
        "/workflows/{id}/schema": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "The icon's schema image binary data is returned and response Content-type is set to correct media type, for example \"Content-Type:image/png\"", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "image/png"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Access workflow's schema image", 
                "operationId": "downloadWorkflowSchema"
            }
        }, 
        "/tasks/{id}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/task"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)"
                    }
                }, 
                "description": "Use this endpoint to update an already scheduled task. If the scheduling date is changed, the original task is rescheduled. It is not allowed to update the scheduled workflow. To update the scheduled workflow, remove the current task and schedule a new one.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/task-data"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Update task", 
                "operationId": "updateTask"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Can not find a Task with the specified ID or the user does not have 'read' access rights for that task"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Use this endpoint to delete a scheduled task.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Delete task", 
                "operationId": "deleteTask"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/task"
                        }
                    }, 
                    "404": {
                        "description": "Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow"
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Endpoint for retrieving a single task.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Task Service"
                ], 
                "summary": "Get task", 
                "operationId": "getTask"
            }
        }, 
        "/healthstatus": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "$ref": "#/definitions/node-status"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "description": "A REST endpoint for retrieving server health status calculated on its health components (DB, authentication and etc.).", 
                "parameters": [
                    {
                        "default": false, 
                        "required": true, 
                        "type": "boolean", 
                        "name": "", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Service Descriptor Service"
                ], 
                "summary": "Get health status", 
                "operationId": "healthStatus"
            }
        }, 
        "/schema/{name}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "description": "The XSD schema file defines the elements and types used by the REST service. You can use it to generate stub classes (in Java or other programming language)", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Service Descriptor Service"
                ], 
                "summary": "Get REST XSD schema file", 
                "operationId": "getXmlSchema"
            }
        }, 
        "/workflows/{workflowId}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "404": {
                        "description": "Can not find a workflow with the specified ID."
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Deletes a workflow with a given ID. If the workflow is referenced by some other workflows, or is running, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "force", 
                        "in": "query"
                    }, 
                    {
                        "default": false, 
                        "required": false, 
                        "type": "boolean", 
                        "name": "forceDeleteLocked", 
                        "in": "query"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Workflow Service"
                ], 
                "summary": "Delete a workflow", 
                "operationId": "deleteWorkflow"
            }
        }, 
        "/configurations/{id}/permissions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "The request is successful"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find configuration with the specified ID"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }, 
                    "400": {
                        "description": "Request is not valid (validation error)"
                    }
                }, 
                "description": "Sets permissions for a configuration with given ID. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Configuration Service"
                ], 
                "summary": "Insert configuration permissions", 
                "operationId": "insertPermissionsForObject"
            }, 
            "delete": {
                "responses": {
                    "404": {
                        "description": "Cannot find configuration with the specified ID"
                    }, 
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Deletes all permissions for configuration with a given ID.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Configuration Service"
                ], 
                "summary": "Delete configuration permissions", 
                "operationId": "deletePermissionsForObject"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "404": {
                        "description": "Cannot find configuration with the specified ID"
                    }, 
                    "401": {
                        "description": "User is not authorized"
                    }
                }, 
                "description": "Retrieves configuration permissions.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Configuration Service"
                ], 
                "summary": "Get configuration permissions", 
                "operationId": "getPermissionsForObject"
            }
        }, 
        "/docs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "401": {
                        "description": "User is not authorized."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Redirect '/vco/api/docs' to '/vco/api/docs/index.html'", 
                "tags": [
                    "Service Descriptor Service"
                ], 
                "summary": "Redirect docs to docs/index.html", 
                "operationId": "docs"
            }
        }, 
        "/server/permissions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized."
                    }, 
                    "400": {
                        "description": "The request is invalid(validation error)."
                    }
                }, 
                "description": "Adds new permissions for the Orchestrator Server or updates the current ones if such permission rules exist. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN ", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Orchestrator Server Instance Service"
                ], 
                "summary": "Insert permissions for Orchestrator server", 
                "operationId": "insertPermissionsForObject"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "No content"
                    }, 
                    "401": {
                        "description": "The user is not authorized."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Deletes all permissions for the Orchestrator Server.", 
                "tags": [
                    "Orchestrator Server Instance Service"
                ], 
                "summary": "Delete all permissions for the Orchestrator server", 
                "operationId": "deletePermissionsForObject"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/permissions"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized."
                    }
                }, 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "description": "Retrieve the Orchestrator Server permissions.", 
                "tags": [
                    "Orchestrator Server Instance Service"
                ], 
                "summary": "Get Orchestrator server permissions", 
                "operationId": "getPermissionsForObject"
            }
        }, 
        "/tags/{owner}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "The request is successful"
                    }, 
                    "401": {
                        "description": "Only admin users can delete tags owned by a different user"
                    }
                }, 
                "description": "Removes all tags created by specified owner.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "owner", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Tagging Service"
                ], 
                "summary": "Untag object", 
                "operationId": "untagObjectsByTagNameAndOwner"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized"
                    }
                }, 
                "description": "Retrieves list of tag created by specific user. Global tags are listed under system user __GLOBAL__.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "owner", 
                        "in": "path"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Tagging Service"
                ], 
                "summary": "List tags by owner", 
                "operationId": "listTagsByOwner"
            }
        }, 
        "/server/groups": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The request is successful", 
                        "schema": {
                            "$ref": "#/definitions/user-groups"
                        }
                    }, 
                    "401": {
                        "description": "The user is not authorized."
                    }
                }, 
                "description": "A REST endpoint for getting all available user groups that can be used for setting permissions. If maxResult request parameters is not used the groups returned will be limited to 200.", 
                "parameters": [
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "filter", 
                        "in": "query"
                    }, 
                    {
                        "name": "maxResult", 
                        "format": "int32", 
                        "default": 200, 
                        "required": true, 
                        "in": "query", 
                        "type": "integer"
                    }
                ], 
                "produces": [
                    "application/xml", 
                    "application/json"
                ], 
                "tags": [
                    "Orchestrator Server Instance Service"
                ], 
                "summary": "Get groups", 
                "operationId": "getGroups"
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "tags": [
        {
            "name": "Actions Service"
        }, 
        {
            "name": "Catalog Service"
        }, 
        {
            "name": "Category Service"
        }, 
        {
            "name": "Configuration Service"
        }, 
        {
            "name": "Content Service"
        }, 
        {
            "name": "Custom Event Service"
        }, 
        {
            "name": "Inventory Service"
        }, 
        {
            "name": "Packages Service"
        }, 
        {
            "name": "Plugin Service"
        }, 
        {
            "name": "Policy Service"
        }, 
        {
            "name": "Resource Service"
        }, 
        {
            "name": "Server Configuration Service"
        }, 
        {
            "name": "Service Descriptor Service"
        }, 
        {
            "name": "Tagging Service"
        }, 
        {
            "name": "Task Service"
        }, 
        {
            "name": "User Interaction Service"
        }, 
        {
            "name": "User Service"
        }, 
        {
            "name": "Workflow Presentation Service"
        }, 
        {
            "name": "Workflow Run Service"
        }, 
        {
            "name": "Workflow Service"
        }, 
        {
            "name": "Workflow User Interaction Presentation Service"
        }, 
        {
            "name": "Orchestrator Server Instance Service"
        }
    ], 
    "basePath": "/vco/api", 
    "definitions": {
        "WsPolicyEventSource": {
            "type": "object"
        }, 
        "inventory-items": {
            "xml": {
                "name": "inventory-items"
            }, 
            "type": "object", 
            "properties": {
                "start": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "link": {
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "tasks": {
            "xml": {
                "name": "tasks"
            }, 
            "type": "object", 
            "properties": {
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }
            }
        }, 
        "Group": {
            "allOf": [
                {
                    "$ref": "#/definitions/PresentationElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "fields": {
                            "xml": {
                                "wrapped": true, 
                                "name": "fields"
                            }, 
                            "items": {
                                "$ref": "#/definitions/PrimaryField"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "logs": {
            "xml": {
                "name": "logs"
            }, 
            "type": "object", 
            "properties": {
                "logs": {
                    "items": {
                        "$ref": "#/definitions/WsLog"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "BaseDecorator": {
            "type": "object", 
            "properties": {
                "kind": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "presentation": {
            "xml": {
                "name": "presentation"
            }, 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "outputParameters": {
                    "xml": {
                        "wrapped": true, 
                        "name": "parameter"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "steps": {
                    "xml": {
                        "wrapped": true, 
                        "name": "steps"
                    }, 
                    "items": {
                        "$ref": "#/definitions/StepInfo"
                    }, 
                    "type": "array"
                }, 
                "inputParameters": {
                    "xml": {
                        "wrapped": true, 
                        "name": "parameter"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "PresentationElement": {
            "type": "object", 
            "properties": {
                "display-name": {
                    "type": "string"
                }, 
                "hidden": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "messages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "messages"
                    }, 
                    "items": {
                        "$ref": "#/definitions/PresentationMessageInfo"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "Relations": {
            "type": "object", 
            "properties": {
                "start": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "link": {
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "ServiceRegistryStatus": {
            "type": "object", 
            "properties": {
                "sslCertificateInfo": {
                    "$ref": "#/definitions/CertificateInfo"
                }, 
                "identityCertificateInfo": {
                    "$ref": "#/definitions/CertificateInfo"
                }, 
                "errorMessage": {
                    "type": "string"
                }, 
                "defaultServiceEndpointType": {
                    "type": "string"
                }, 
                "startedTime": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "serviceInitializationStatus": {
                    "type": "string"
                }, 
                "solutionUser": {
                    "type": "string"
                }, 
                "serviceName": {
                    "type": "string"
                }, 
                "serviceRegistrationId": {
                    "type": "string"
                }, 
                "initialized": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "Field": {
            "type": "object", 
            "properties": {
                "hidden": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "description": {
                    "type": "string"
                }, 
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "messages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "messages"
                    }, 
                    "items": {
                        "$ref": "#/definitions/PresentationMessageInfo"
                    }, 
                    "type": "array"
                }, 
                "affected-fields": {
                    "xml": {
                        "wrapped": true, 
                        "name": "affected-fields"
                    }, 
                    "items": {
                        "$ref": "#/definitions/AffectedField"
                    }, 
                    "type": "array"
                }, 
                "display-name": {
                    "type": "string"
                }, 
                "decorators": {
                    "xml": {
                        "wrapped": true, 
                        "name": "decorators"
                    }, 
                    "items": {
                        "$ref": "#/definitions/BaseDecorator"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "constraints": {
                    "xml": {
                        "wrapped": true, 
                        "name": "constraints"
                    }, 
                    "items": {
                        "$ref": "#/definitions/BaseConstraint"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }
            }
        }, 
        "resources": {
            "xml": {
                "name": "resources"
            }, 
            "type": "object", 
            "properties": {
                "start": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "link": {
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "service-descriptors": {
            "xml": {
                "name": "service-descriptors"
            }, 
            "type": "object", 
            "properties": {
                "service": {
                    "items": {
                        "$ref": "#/definitions/descriptor"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "user-groups": {
            "xml": {
                "name": "user-groups"
            }, 
            "type": "object", 
            "properties": {
                "partial-result": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "groups": {
                    "items": {
                        "$ref": "#/definitions/user-group"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "plugins": {
            "xml": {
                "name": "plugins"
            }, 
            "type": "object", 
            "properties": {
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "plugin": {
                    "items": {
                        "$ref": "#/definitions/PluginBundleMetadata"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "workflow-execution": {
            "xml": {
                "name": "workflow-execution"
            }, 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string"
                }, 
                "start-date": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "outputParameters": {
                    "xml": {
                        "wrapped": true, 
                        "name": "parameter"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "business-state": {
                    "type": "string"
                }, 
                "content-exception": {
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "current-item-display-name": {
                    "type": "string"
                }, 
                "state": {
                    "enum": [
                        "CANCELED", 
                        "COMPLETED", 
                        "RUNNING", 
                        "SUSPENDED", 
                        "WAITING", 
                        "STATE_WAITING_ON_SIGNAL", 
                        "FAILED", 
                        "INITIALIZING"
                    ], 
                    "type": "string"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "started-by": {
                    "type": "string"
                }, 
                "inputParameters": {
                    "xml": {
                        "wrapped": true, 
                        "name": "parameter"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "workflow-item": {
                    "xml": {
                        "wrapped": true, 
                        "name": "execution-stack"
                    }, 
                    "items": {
                        "$ref": "#/definitions/WsWorkflowExecutionStackItem"
                    }, 
                    "type": "array"
                }, 
                "end-date": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "id": {
                    "type": "string"
                }
            }
        }, 
        "actions": {
            "xml": {
                "name": "actions"
            }, 
            "type": "object", 
            "properties": {
                "start": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "link": {
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "inventory-item": {
            "xml": {
                "name": "inventory-item"
            }, 
            "type": "object", 
            "properties": {
                "attribute": {
                    "xml": {
                        "wrapped": true, 
                        "name": "attributes"
                    }, 
                    "items": {
                        "$ref": "#/definitions/WsAttribute"
                    }, 
                    "type": "array"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }
            }
        }, 
        "user-interaction": {
            "xml": {
                "name": "user-interaction"
            }, 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "assignee": {
                    "xml": {
                        "wrapped": true, 
                        "name": "assignees"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "state": {
                    "enum": [
                        "WAITING", 
                        "FINISHED"
                    ], 
                    "type": "string"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "parameter": {
                    "xml": {
                        "wrapped": true, 
                        "name": "input-parameters"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "type": "string"
                }
            }
        }, 
        "WsRelationMetadata": {
            "type": "object", 
            "properties": {
                "display-name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "category": {
            "xml": {
                "name": "category"
            }, 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "path": {
                    "type": "string"
                }, 
                "type": {
                    "enum": [
                        "ResourceElementCategory", 
                        "ConfigurationElementCategory", 
                        "WorkflowCategory", 
                        "ScriptModuleCategory"
                    ], 
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "execution": {
            "xml": {
                "name": "execution"
            }, 
            "type": "object", 
            "properties": {
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "parameters": {
                    "xml": {
                        "wrapped": true, 
                        "name": "output-parameters"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "valid": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "object-id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "start-date": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "steps": {
                    "xml": {
                        "wrapped": true, 
                        "name": "steps"
                    }, 
                    "items": {
                        "$ref": "#/definitions/StepInfo"
                    }, 
                    "type": "array"
                }, 
                "started-by": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "configuration": {
            "xml": {
                "name": "configuration"
            }, 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "attribute": {
                    "xml": {
                        "wrapped": true, 
                        "name": "attributes"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "WsPolicyEventHandler": {
            "type": "object", 
            "properties": {
                "workflow": {
                    "$ref": "#/definitions/workflow"
                }, 
                "type": {
                    "enum": [
                        "TRIGGER", 
                        "GAUGE"
                    ], 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "event-id": {
                    "type": "string"
                }, 
                "script": {
                    "type": "string"
                }
            }
        }, 
        "WsPolicyItem": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "eventSource": {
                    "$ref": "#/definitions/WsPolicyEventSource"
                }, 
                "name": {
                    "type": "string"
                }, 
                "handlers": {
                    "xml": {
                        "wrapped": true, 
                        "name": "event-handlers"
                    }, 
                    "items": {
                        "$ref": "#/definitions/WsPolicyEventHandler"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "about-info": {
            "xml": {
                "name": "about-info"
            }, 
            "type": "object", 
            "properties": {
                "api-version": {
                    "type": "string"
                }, 
                "build-date": {
                    "type": "string"
                }, 
                "version": {
                    "type": "string"
                }, 
                "build-number": {
                    "type": "string"
                }
            }
        }, 
        "descriptor": {
            "xml": {
                "name": "descriptor"
            }, 
            "type": "object", 
            "properties": {
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "user-group": {
            "xml": {
                "name": "user-group"
            }, 
            "type": "object", 
            "properties": {
                "dn": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "info": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "cn": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "sid": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "display-name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "email": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "user": {
            "xml": {
                "name": "user"
            }, 
            "type": "object", 
            "properties": {
                "admin-rights": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "solution-user-domain": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "user-group": {
                    "xml": {
                        "wrapped": true, 
                        "name": "member-groups"
                    }, 
                    "items": {
                        "$ref": "#/definitions/user-group"
                    }, 
                    "type": "array"
                }, 
                "solution-user": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "permission": {
            "xml": {
                "name": "permission"
            }, 
            "type": "object", 
            "properties": {
                "rights": {
                    "type": "string"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "principal": {
                    "type": "string"
                }
            }
        }, 
        "state": {
            "xml": {
                "name": "state"
            }, 
            "type": "object", 
            "properties": {
                "value": {
                    "enum": [
                        "CANCELED", 
                        "COMPLETED", 
                        "RUNNING", 
                        "SUSPENDED", 
                        "WAITING", 
                        "STATE_WAITING_ON_SIGNAL", 
                        "FAILED", 
                        "INITIALIZING"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "workflow": {
            "xml": {
                "name": "workflow"
            }, 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string"
                }, 
                "outputParameters": {
                    "xml": {
                        "wrapped": true, 
                        "name": "parameter"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "customized-icon": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "version": {
                    "type": "string"
                }, 
                "inputParameters": {
                    "xml": {
                        "wrapped": true, 
                        "name": "parameter"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "PrimaryField": {
            "type": "object", 
            "properties": {
                "hidden": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "description": {
                    "type": "string"
                }, 
                "fields": {
                    "xml": {
                        "wrapped": true, 
                        "name": "fields"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }, 
                    "type": "array"
                }, 
                "messages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "messages"
                    }, 
                    "items": {
                        "$ref": "#/definitions/PresentationMessageInfo"
                    }, 
                    "type": "array"
                }, 
                "value": {
                    "$ref": "#/definitions/Value"
                }, 
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "affected-fields": {
                    "xml": {
                        "wrapped": true, 
                        "name": "affected-fields"
                    }, 
                    "items": {
                        "$ref": "#/definitions/AffectedField"
                    }, 
                    "type": "array"
                }, 
                "display-name": {
                    "type": "string"
                }, 
                "decorators": {
                    "xml": {
                        "wrapped": true, 
                        "name": "decorators"
                    }, 
                    "items": {
                        "$ref": "#/definitions/BaseDecorator"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "constraints": {
                    "xml": {
                        "wrapped": true, 
                        "name": "constraints"
                    }, 
                    "items": {
                        "$ref": "#/definitions/BaseConstraint"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }
            }
        }, 
        "tags": {
            "xml": {
                "name": "tags"
            }, 
            "type": "object", 
            "properties": {
                "start": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "link": {
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "Link": {
            "type": "object", 
            "properties": {
                "attribute": {
                    "xml": {
                        "wrapped": true, 
                        "name": "attributes"
                    }, 
                    "items": {
                        "$ref": "#/definitions/WsAttribute"
                    }, 
                    "type": "array"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "rel": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "categories": {
            "xml": {
                "name": "categories"
            }, 
            "type": "object", 
            "properties": {
                "start": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "link": {
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "version": {
            "xml": {
                "name": "version"
            }, 
            "type": "object", 
            "properties": {
                "value": {
                    "type": "string"
                }, 
                "latest": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "server-authentication": {
            "xml": {
                "name": "server-authentication"
            }, 
            "type": "object", 
            "properties": {
                "url": {
                    "type": "string"
                }, 
                "mode": {
                    "type": "string"
                }
            }
        }, 
        "WsPolicy": {
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string"
                }, 
                "startup": {
                    "enum": [
                        "MANUAL", 
                        "AUTOMATIC"
                    ], 
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "priority": {
                    "enum": [
                        "VERY_LOW", 
                        "LOW", 
                        "MEDIUM", 
                        "HIGH", 
                        "VERY_HIGH"
                    ], 
                    "type": "string"
                }, 
                "state": {
                    "type": "string"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "policy-item": {
                    "xml": {
                        "wrapped": true, 
                        "name": "policy-items"
                    }, 
                    "items": {
                        "$ref": "#/definitions/WsPolicyItem"
                    }, 
                    "type": "array"
                }, 
                "parameter": {
                    "xml": {
                        "wrapped": true, 
                        "name": "parameters"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "WsAttributeMetadata": {
            "type": "object", 
            "properties": {
                "display-name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "possible-result-type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "health-status-provider": {
            "xml": {
                "name": "health-status-provider"
            }, 
            "type": "object", 
            "properties": {
                "isCritical": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "state": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "UNKNOWN", 
                        "OK", 
                        "WARN", 
                        "ERROR"
                    ], 
                    "type": "string"
                }, 
                "message": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "parameter": {
            "xml": {
                "name": "parameter"
            }, 
            "type": "object", 
            "properties": {
                "updated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "description": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "value": {
                    "$ref": "#/definitions/Value"
                }, 
                "scope": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "LOCAL", 
                        "TOKEN"
                    ], 
                    "type": "string"
                }, 
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "PluginBundleMetadata": {
            "type": "object", 
            "properties": {
                "infoText": {
                    "type": "string"
                }, 
                "moduleName": {
                    "type": "string"
                }, 
                "displayName": {
                    "type": "string"
                }, 
                "url": {
                    "type": "string"
                }, 
                "hasInstallActions": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "enabled": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "configurable": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "buildNumber": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "version": {
                    "type": "string"
                }, 
                "hasValidation": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "BaseConstraint": {
            "type": "object"
        }, 
        "category-context": {
            "xml": {
                "name": "category-context"
            }, 
            "type": "object", 
            "properties": {
                "type": {
                    "enum": [
                        "ResourceElementCategory", 
                        "ConfigurationElementCategory", 
                        "WorkflowCategory", 
                        "ScriptModuleCategory"
                    ], 
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "task-data": {
            "xml": {
                "name": "task-data"
            }, 
            "type": "object", 
            "properties": {
                "recurrence-end-date": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "description": {
                    "type": "string"
                }, 
                "state": {
                    "enum": [
                        "FINISHED", 
                        "CANCELED", 
                        "ERROR", 
                        "PENDING", 
                        "RUNNING", 
                        "SUSPENDED", 
                        "UNKNOWN"
                    ], 
                    "type": "string"
                }, 
                "recurrence-pattern": {
                    "type": "string"
                }, 
                "recurrence-start-date": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "recurrence-cycle": {
                    "enum": [
                        "ONE_TIME", 
                        "EVERY_MINUTES", 
                        "EVERY_HOURS", 
                        "EVERY_DAYS", 
                        "EVERY_WEEKS", 
                        "EVERY_MONTHS"
                    ], 
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "start-mode": {
                    "enum": [
                        "NORMAL", 
                        "START_IN_THE_PAST"
                    ], 
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "PresentationMessageInfo": {
            "required": [
                "Summary"
            ], 
            "type": "object", 
            "properties": {
                "severity": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "INFO", 
                        "WARN", 
                        "ERROR"
                    ], 
                    "type": "string"
                }, 
                "code": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "Details": {
                    "type": "string"
                }, 
                "Summary": {
                    "type": "string"
                }
            }
        }, 
        "interactions": {
            "xml": {
                "name": "interactions"
            }, 
            "type": "object", 
            "properties": {
                "start": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "link": {
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "WsLog": {
            "type": "object", 
            "properties": {
                "severity": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "UNKNOWN", 
                        "DEBUG", 
                        "INFO", 
                        "WARNING", 
                        "ERROR"
                    ], 
                    "type": "string"
                }, 
                "short-description": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "time-stamp": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "user": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "long-description": {
                    "type": "string"
                }
            }
        }, 
        "Value": {
            "type": "object", 
            "properties": {
                "objectType": {
                    "type": "string"
                }
            }
        }, 
        "tag-instance": {
            "xml": {
                "name": "tag-instance"
            }, 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "objectHref": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "global": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "value": {
                    "type": "string"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "owner": {
                    "type": "string"
                }
            }
        }, 
        "task": {
            "xml": {
                "name": "task"
            }, 
            "required": [
                "recurrence-start-date", 
                "workflow"
            ], 
            "type": "object", 
            "properties": {
                "recurrence-end-date": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "description": {
                    "type": "string"
                }, 
                "workflow": {
                    "$ref": "#/definitions/workflow"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "recurrence-pattern": {
                    "type": "string"
                }, 
                "state": {
                    "enum": [
                        "FINISHED", 
                        "CANCELED", 
                        "ERROR", 
                        "PENDING", 
                        "RUNNING", 
                        "SUSPENDED", 
                        "UNKNOWN"
                    ], 
                    "type": "string"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "user": {
                    "type": "string"
                }, 
                "recurrence-start-date": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "recurrence-cycle": {
                    "enum": [
                        "ONE_TIME", 
                        "EVERY_MINUTES", 
                        "EVERY_HOURS", 
                        "EVERY_DAYS", 
                        "EVERY_WEEKS", 
                        "EVERY_MONTHS"
                    ], 
                    "type": "string"
                }, 
                "parameter": {
                    "xml": {
                        "wrapped": true, 
                        "name": "input-parameters"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "type": "string"
                }, 
                "start-mode": {
                    "enum": [
                        "NORMAL", 
                        "START_IN_THE_PAST"
                    ], 
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "AffectedField": {
            "type": "object", 
            "properties": {
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "packages": {
            "xml": {
                "name": "packages"
            }, 
            "type": "object", 
            "properties": {
                "start": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "link": {
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "configEntry": {
            "xml": {
                "name": "configEntry"
            }, 
            "type": "object", 
            "properties": {
                "remote": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "name": {
                    "type": "string"
                }, 
                "title": {
                    "type": "string"
                }, 
                "plugin": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "enabled": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "tooltip": {
                    "type": "string"
                }, 
                "dependencies": {
                    "type": "string"
                }, 
                "displayName": {
                    "type": "string"
                }, 
                "data": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "state-context": {
            "xml": {
                "name": "state-context"
            }, 
            "type": "object", 
            "properties": {
                "enabled": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "config-entries": {
            "xml": {
                "name": "config-entries"
            }, 
            "type": "object", 
            "properties": {
                "config-entry": {
                    "items": {
                        "$ref": "#/definitions/configEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "package-details": {
            "xml": {
                "name": "package-details"
            }, 
            "type": "object", 
            "properties": {
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "actions": {
                    "xml": {
                        "wrapped": true, 
                        "name": "actions"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "workflows": {
                    "xml": {
                        "wrapped": true, 
                        "name": "workflows"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "resources": {
                    "xml": {
                        "wrapped": true, 
                        "name": "resources"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }, 
                "configurations": {
                    "xml": {
                        "wrapped": true, 
                        "name": "configurations"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "WsWorkflowExecutionStackItem": {
            "type": "object", 
            "properties": {
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "displayName": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }
            }
        }, 
        "permissions": {
            "xml": {
                "name": "permissions"
            }, 
            "type": "object", 
            "properties": {
                "permissions": {
                    "items": {
                        "$ref": "#/definitions/permission"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "executions": {
            "xml": {
                "name": "executions"
            }, 
            "type": "object", 
            "properties": {
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }
            }
        }, 
        "owners": {
            "xml": {
                "name": "owners"
            }, 
            "type": "object", 
            "properties": {
                "start": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "link": {
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "WsTypeMetadata": {
            "type": "object", 
            "properties": {
                "attribute": {
                    "xml": {
                        "wrapped": true, 
                        "name": "attributes"
                    }, 
                    "items": {
                        "$ref": "#/definitions/WsAttributeMetadata"
                    }, 
                    "type": "array"
                }, 
                "icon-href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "relation": {
                    "xml": {
                        "wrapped": true, 
                        "name": "relations"
                    }, 
                    "items": {
                        "$ref": "#/definitions/WsRelationMetadata"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "resource": {
            "xml": {
                "name": "resource"
            }, 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "mime-type": {
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "StepInfo": {
            "type": "object", 
            "properties": {
                "elements": {
                    "items": {
                        "$ref": "#/definitions/PresentationElement"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "type": "string"
                }, 
                "messages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "messages"
                    }, 
                    "items": {
                        "$ref": "#/definitions/PresentationMessageInfo"
                    }, 
                    "type": "array"
                }, 
                "hidden": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "readOnly": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "display-name": {
                    "type": "string"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "WsPolicyList": {
            "type": "object", 
            "properties": {
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }
            }
        }, 
        "execution-context": {
            "xml": {
                "name": "execution-context"
            }, 
            "type": "object", 
            "properties": {
                "parameter": {
                    "xml": {
                        "wrapped": true, 
                        "name": "parameters"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "supported-versions": {
            "xml": {
                "name": "supported-versions"
            }, 
            "type": "object", 
            "properties": {
                "version": {
                    "items": {
                        "$ref": "#/definitions/version"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "health-status": {
            "xml": {
                "name": "health-status"
            }, 
            "type": "object", 
            "properties": {
                "state": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "UNKNOWN", 
                        "OK", 
                        "WARN", 
                        "ERROR"
                    ], 
                    "type": "string"
                }, 
                "childs": {
                    "xml": {
                        "wrapped": true, 
                        "name": "health-status-providers"
                    }, 
                    "items": {
                        "$ref": "#/definitions/health-status-provider"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "type": "string"
                }, 
                "time": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }
            }
        }, 
        "server-object": {
            "xml": {
                "name": "server-object"
            }, 
            "type": "object", 
            "properties": {
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "sslCertificate": {
                    "$ref": "#/definitions/CertificateInfo"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }
            }
        }, 
        "WsAttribute": {
            "type": "object", 
            "properties": {
                "displayValue": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "value": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "CertificateInfo": {
            "type": "object", 
            "properties": {
                "notValidAfter": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "notValidBefore": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "principalName": {
                    "type": "string"
                }, 
                "thumbprint": {
                    "type": "string"
                }, 
                "issuerName": {
                    "type": "string"
                }, 
                "identityCertificateExists": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "action": {
            "xml": {
                "name": "action"
            }, 
            "type": "object", 
            "properties": {
                "output-type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "fqn": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "relations": {
                    "$ref": "#/definitions/Relations"
                }, 
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "parameter": {
                    "xml": {
                        "wrapped": true, 
                        "name": "input-parameters"
                    }, 
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "module-metadata": {
            "xml": {
                "name": "module-metadata"
            }, 
            "type": "object", 
            "properties": {
                "type": {
                    "xml": {
                        "wrapped": true, 
                        "name": "types"
                    }, 
                    "items": {
                        "$ref": "#/definitions/WsTypeMetadata"
                    }, 
                    "type": "array"
                }, 
                "namespace": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "node-status": {
            "xml": {
                "name": "node-status"
            }, 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "health-status": {
                    "$ref": "#/definitions/health-status"
                }, 
                "instance-id": {
                    "type": "string"
                }
            }
        }, 
        "tag-instances": {
            "xml": {
                "name": "tag-instances"
            }, 
            "type": "object", 
            "properties": {
                "tag": {
                    "xml": {
                        "wrapped": true, 
                        "name": "tags"
                    }, 
                    "items": {
                        "$ref": "#/definitions/tag-instance"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "configurations": {
            "xml": {
                "name": "configurations"
            }, 
            "type": "object", 
            "properties": {
                "start": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "total": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "link": {
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }
    }, 
    "swagger": "2.0"
}