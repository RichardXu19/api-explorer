{
    "info": {
        "version": "7.3.0-SNAPSHOT", 
        "description": "# Reservation Service", 
        "title": "Reservation Service API"
    }, 
    "paths": {
        "/api/reservations/info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageReservationInfo"
                        }
                    }
                }, 
                "description": "Gets all Reservations with specified paging, sorting and filtering parameters. Filtering is only supported on 'name', 'reservationTypeId', 'subTenantId', 'enabled', 'tenantId' and 'reservationPolicyId' fields.", 
                "parameters": [
                    {
                        "description": "the id of the reservation to update", 
                        "required": false, 
                        "type": "string", 
                        "name": "category", 
                        "in": "query"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Gets all Reservations."
            }
        }, 
        "/api/reservations/subtenants": {
            "get": {
                "deprecated": true, 
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageSubtenant"
                        }
                    }
                }, 
                "description": "System Administrator or IaaS Administrator can query the business group list of non current tenant. As of release 7.2 use Identity Service https://{{hostname}}/identity/api/tenants/{tenantId}/subtenants", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": false, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "PageAndSortRequest pagination information", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Finds all business groups"
            }
        }, 
        "/api/preferences/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The id of a provider preferences", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ProviderPreferences"
                        }, 
                        "description": "Provider preferences object", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Updates or creates a provider preferences"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The id of the provider preferences", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "summary": "Deletes the provider preferences"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ProviderPreferences"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The id of the provider preferences", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "summary": "Returns provider preferences associated with the given id"
            }
        }, 
        "/api/data-service/schema/{classId}/default/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get the state of a field in the specified schema", 
                "description": "Get the state of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/data-service/list/{classId}/default": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Retrieves the list of possible values for a given type of object", 
                "description": "Retrieves the list of possible values for a given type of object.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/preferences/service/{serviceTypeId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ProviderPreferences"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "The id of the service which preferences to return", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "serviceTypeId"
                    }
                ], 
                "summary": "Retrieves provider preferences by service type id."
            }
        }, 
        "/api/reservations/sync/{providerServiceTypeId}": {
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "description": "Syncronizes all reservations from Reservation Provider to Reservation Service.", 
                "parameters": [
                    {
                        "description": "service type id of the Reservation Provider from which the data will be synchronized", 
                        "required": true, 
                        "type": "string", 
                        "name": "providerServiceTypeId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "PageAndSortRequest start index of the reservations to be synchronized.  E.g. if page number is 2, then the data synchronization will start from page 2", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Syncronizes all reservations"
            }
        }, 
        "/api/data-service/schema/{classId}/types/{typeFilter}/{fieldId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get the permissible values of a field in the specified schema", 
                "description": "Get the permissible values of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of a field on the schema of the specified object class.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/reservations/sync/{providerServiceTypeId}/{reservationId}": {
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "description": "Syncronizes a specific reservation from a specific Reservation Provider to the Reservation Service.", 
                "parameters": [
                    {
                        "description": "service type id of the Reservation Provider which to be synchronize the data from.", 
                        "required": true, 
                        "type": "string", 
                        "name": "providerServiceTypeId", 
                        "in": "path"
                    }, 
                    {
                        "description": "reservation id to be synchronized.", 
                        "required": true, 
                        "type": "string", 
                        "name": "reservationId", 
                        "in": "path"
                    }
                ], 
                "summary": "Syncronizes a specific reservation"
            }
        }, 
        "/api/preferences": {
            "post": {
                "responses": {
                    "201": {
                        "description": "'Created' with ProviderPreferences object that is created", 
                        "schema": {
                            "$ref": "#/definitions/ProviderPreferences"
                        }
                    }
                }, 
                "description": "Create a ProviderPreferences.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ProviderPreferences"
                        }, 
                        "description": "Provider preferences object", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create a ProviderPreferences"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with pages", 
                        "schema": {
                            "$ref": "#/definitions/Page"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Returns a page of the resources"
            }
        }, 
        "/api/reservations/tenants": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageTenant"
                        }
                    }
                }, 
                "description": "Only System Administrator or IaaS Administrator is qualified", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PageAndSortRequest"
                        }, 
                        "description": "PageAndSortRequest pagination information", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Finds all tenants"
            }
        }, 
        "/api/data-service/schema/{classId}/instances/{id}/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get the state of a field in the specified schema", 
                "description": "Get the state of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique identifier of an instance of the object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/data-service/schema/{classId}/types/{typeFilter}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "summary": "Get the schema for the specified object type", 
                "description": "This returns the schema of a particular type within a class of object.", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/data-service/data/{classId}/{id}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/DynamicDataResponse"
                        }
                    }
                }, 
                "summary": "Get a set of data for the specified object", 
                "description": "Get a set of data for the specified object.", 
                "parameters": [
                    {
                        "description": "The identifier of the type of object to get data for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique id of the object to get data for. This should be sufficient to identify the object given classId.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/DynamicDataRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/data-service/schema/{classId}/default/{fieldId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get the permissible values of a field in the specified schema", 
                "description": "Get the permissible values of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of a field on the schema of the specified object class.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/content": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/operationResult"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/importRequest"
                        }, 
                        "description": "the import request.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Callback to save content."
            }
        }, 
        "/api/data-service/list/{classId}/types/{typeFilter}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Retrieves the list of possible values for a given type of object", 
                "description": "Retrieves the list of possible values for a given type of object.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/content/{classId}/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "items": {
                                "type": "string", 
                                "format": "byte"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "description": "", 
                "parameters": [
                    {
                        "description": "the class id of the content", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the instance id", 
                        "pattern": ".+$", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "enum": [
                            "ENCRYPT", 
                            "DECRYPT", 
                            "BLANKOUT"
                        ], 
                        "description": "The format in which secure values should be sent. Refer\nSecureValueOperationType for more details. This parameter is optional and\ndefaults to \"BLANKOUT\".", 
                        "default": "BLANKOUT", 
                        "required": false, 
                        "in": "query", 
                        "type": "string", 
                        "name": ""
                    }
                ], 
                "summary": "Retrieves a raw content for specified class id and id."
            }
        }, 
        "/api/data-service/schema/{classId}/instances/{id}/{fieldId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get the permissible values of a field in the specified schema", 
                "description": "Get the permissible values of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique identifier of an instance of the object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of a field on the schema of the specified object class.", 
                        "required": true, 
                        "type": "string", 
                        "name": "fieldId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/data-service/schema/{classId}/types/{typeFilter}/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get the state of a field in the specified schema", 
                "description": "Get the state of a field in the specified schema.", 
                "parameters": [
                    {
                        "description": "The class of object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "A type filter defining the specific subtype that owns the field.", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeFilter", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/reservations": {
            "post": {
                "responses": {
                    "201": {
                        "description": "'Created' is returned for the new Reservation with theReservation url in the location header of the response"
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/Reservation"
                        }
                    }
                }, 
                "description": "Creates a Reservation entity.", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/Reservation"
                        }, 
                        "description": "Reservation object to be created", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Create a Reservation entity."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/PageReservation"
                        }
                    }
                }, 
                "description": "Gets all Reservations with specified paging, sorting and filtering parameters. Filtering is only supported on 'name', 'reservationTypeId', 'subTenantId', 'enabled', 'tenantId' and 'reservationPolicyId' fields.", 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "summary": "Gets all Reservations."
            }
        }, 
        "/api/data-service/schema/{classId}/default": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "summary": "Get the schema for the specified object class", 
                "description": "Get the schema for the specified object class.", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/reservations/subtenants/{subtenantId}": {
            "get": {
                "deprecated": true, 
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/subtenant"
                        }
                    }
                }, 
                "description": "System Administrator or IaaS Administrator can query the business group of non current tenant.As of release 7.2 use Identity Service https://{{hostname}}/identity/api/tenants/{tenantId}/subtenants/{id}", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "subtenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "query"
                    }
                ], 
                "summary": "Gets the business group by its identifier"
            }
        }, 
        "/api/data-service/schema/{classId}/instances/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the data", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }, 
                "summary": "Get the schema for the specified object", 
                "description": "This returns the schema of a particular type adjusted to the state of a specific instance..", 
                "parameters": [
                    {
                        "description": "The class of object to retrieve the schema for.", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The unique identifier of an instance of the object.", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "schema", 
                    "data-service"
                ]
            }
        }, 
        "/api/reservations/{id}": {
            "put": {
                "responses": {
                    "204": {
                        "description": "'No Content' is returned when reservation is updated"
                    }
                }, 
                "description": "Updates a Reservation entity.", 
                "parameters": [
                    {
                        "description": "the id of the reservation to update", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/Reservation"
                        }, 
                        "description": "Reservation}object to be updated", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "summary": "Updates a Reservation entity."
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": "'No Content' is returned when reservation is deleted"
                    }
                }, 
                "description": "Deletes a Reservation with the given id", 
                "parameters": [
                    {
                        "description": "the id of the reservation to update", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Deletes a Reservation with the given id."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "operation is successful", 
                        "schema": {
                            "$ref": "#/definitions/Reservation"
                        }
                    }, 
                    "404": {
                        "description": "if no Reservation instance found with provided id"
                    }
                }, 
                "description": "Retrieves a Reservation for provided id.", 
                "parameters": [
                    {
                        "description": "the id of the reservation", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "summary": "Retrieves a Reservation."
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "tags": [
        {
            "name": "data-service"
        }, 
        {
            "name": "schema"
        }
    ], 
    "basePath": "/reservation-service", 
    "definitions": {
        "BoolCommonExpression": {
            "type": "object"
        }, 
        "ConstantValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/literal"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutRow": {
            "type": "object", 
            "properties": {
                "items": {
                    "xml": {
                        "wrapped": true, 
                        "name": "item"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutCell"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "NotEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "complexLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "complexLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's class."
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component type."
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The type filter for this literal."
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component."
                        }, 
                        "values": {
                            "description": "Map of values, keyed by the field ids of some complex type.", 
                            "$ref": "#/definitions/literalMap"
                        }
                    }, 
                    "description": "A complex value composed of multiple values keyed by the field ids of some complex type."
                }
            ]
        }, 
        "ParameterMapping": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "importRequest": {
            "xml": {
                "name": "importRequest"
            }, 
            "required": [
                "data"
            ], 
            "type": "object", 
            "properties": {
                "mimeType": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "classId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "inDryRunMode": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "data": {
                    "items": {
                        "type": "string", 
                        "format": "byte"
                    }, 
                    "type": "array"
                }, 
                "resolutionMode": {
                    "default": "OVERWRITE", 
                    "enum": [
                        "SKIP", 
                        "OVERWRITE"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "SubsetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "moneyRange": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRange"
                    }, 
                    "type": "object", 
                    "properties": {
                        "maxValue": {
                            "type": "number", 
                            "description": "The upper limit of the range.", 
                            "format": "double"
                        }, 
                        "minValue": {
                            "type": "number", 
                            "description": "The lower limit of the range.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a range of money values, between some defined minimums and maximums."
                }
            ]
        }, 
        "EndsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ReservationInfo": {
            "required": [
                "extensionData"
            ], 
            "type": "object", 
            "properties": {
                "extensionData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "enabled": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "tenantId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "priority": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minimum": 0.0, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "reservationPolicyRef": {
                    "$ref": "#/definitions/labelledReference"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 40
                }, 
                "subTenantRef": {
                    "$ref": "#/definitions/labelledReference"
                }, 
                "reservationTypeRef": {
                    "$ref": "#/definitions/labelledReference"
                }
            }
        }, 
        "ParameterMappingCollection": {
            "type": "object", 
            "properties": {
                "params": {
                    "xml": {
                        "wrapped": true, 
                        "name": "param"
                    }, 
                    "items": {
                        "$ref": "#/definitions/ParameterMapping"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "layout": {
            "xml": {
                "name": "layout"
            }, 
            "type": "object", 
            "properties": {
                "pages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "page"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutPage"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "DisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "booleanLiteral": {
            "xml": {
                "name": "booleanLiteral"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "value": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "The boolean value."
                }
            }, 
            "description": "Wraps a boolean value."
        }, 
        "money": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "money"
                    }, 
                    "type": "object", 
                    "properties": {
                        "amount": {
                            "type": "number", 
                            "description": "The amount associated with this value (with no specific currency).", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a single, precise monetary value."
                }
            ]
        }, 
        "OrClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "AlertPolicy": {
            "type": "object", 
            "properties": {
                "frequencyReminder": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minimum": 0.0, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "alerts": {
                    "items": {
                        "$ref": "#/definitions/Alert"
                    }, 
                    "type": "array"
                }, 
                "enabled": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "recipients": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "emailBgMgr": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "moneyTimeRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyTimeRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "basis": {
                            "description": "The span of time to calculate the rate of money for.", 
                            "$ref": "#/definitions/timeSpan"
                        }
                    }, 
                    "description": "Represents a rate of money over time."
                }
            ]
        }, 
        "UniqueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "stringLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "stringLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a String value."
                }
            ]
        }, 
        "LayoutField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "extensionRendererContext": {
                            "$ref": "#/definitions/ExtensionRendererContext"
                        }, 
                        "description": {
                            "type": "string"
                        }, 
                        "dataType": {
                            "$ref": "#/definitions/DataType"
                        }, 
                        "permissibleValues": {
                            "$ref": "#/definitions/PermissibleValueList"
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "displayAdvice": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "TEXTBOX", 
                                "HYPERLINK", 
                                "EMAIL", 
                                "TEXTAREA", 
                                "DATE_TIME_PICKER", 
                                "CHECKBOX", 
                                "YES_NO", 
                                "CHECKBOX_GROUP", 
                                "DUAL_LIST", 
                                "RADIO_GROUP", 
                                "DROPDOWN", 
                                "LIST", 
                                "SEARCHER", 
                                "TREE", 
                                "FORM", 
                                "IMAGE", 
                                "SLIDER", 
                                "DATA_TABLE", 
                                "VALUE_PICKER"
                            ], 
                            "type": "string"
                        }, 
                        "orderIndex": {
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "isMultiValued": {
                            "xml": {
                                "attribute": true
                            }, 
                            "default": false, 
                            "type": "boolean"
                        }, 
                        "labelSize": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "columns": {
                            "xml": {
                                "wrapped": true, 
                                "name": "column"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutField"
                            }, 
                            "type": "array"
                        }, 
                        "detailLayout": {
                            "$ref": "#/definitions/LayoutReference"
                        }
                    }
                }
            ]
        }, 
        "entityRef": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRef"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier of the type or category to which the referenced entity belongs."
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The unique identifier of the referenced entity, encoded as a string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
                        }
                    }, 
                    "description": "Represents a reference to an entity defined somewhere in the suite."
                }
            ]
        }, 
        "PageReservation": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/Reservation"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "Reservation": {
            "required": [
                "extensionData"
            ], 
            "type": "object", 
            "properties": {
                "extensionData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "enabled": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "lastUpdated": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "tenantId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "priority": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minimum": 0.0, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "version": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int64"
                }, 
                "reservationPolicyId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 40
                }, 
                "subTenantId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "createdDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "reservationTypeId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "alertPolicy": {
                    "$ref": "#/definitions/AlertPolicy"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 40
                }
            }
        }, 
        "CallbackEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "PageTenant": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/tenant"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "labelledReference": {
            "xml": {
                "name": "labelledReference"
            }, 
            "type": "object", 
            "properties": {
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "MaxCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ElementState": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Constraint"
                    }, 
                    "type": "array"
                }, 
                "dependencies": {
                    "xml": {
                        "wrapped": true, 
                        "name": "dependency"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "type": "string"
                    }
                }
            }
        }, 
        "operationError": {
            "xml": {
                "name": "operationError"
            }, 
            "type": "object", 
            "properties": {
                "errorCode": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "errorMessage": {
                    "type": "string"
                }
            }
        }, 
        "Clause": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ComplexEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "values": {
                            "additionalProperties": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "object"
                        }
                    }
                }
            ]
        }, 
        "StartsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LessThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "multipleLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "multipleLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "xml": {
                                "name": "item"
                            }, 
                            "items": {
                                "$ref": "#/definitions/literal"
                            }, 
                            "type": "array", 
                            "description": "The list of specified values. NOTE: All values must be of the same data type."
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string", 
                            "description": "The data type of the items in the list."
                        }
                    }, 
                    "description": "A literal which represents multiple values. All of these component values must be of the same data type."
                }
            ]
        }, 
        "LayoutFlow": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "parts": {
                            "xml": {
                                "wrapped": true, 
                                "name": "part"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutFlowElement"
                            }, 
                            "type": "array"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ContextPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "operationResult": {
            "xml": {
                "name": "operationResult"
            }, 
            "type": "object", 
            "properties": {
                "operationErrors": {
                    "items": {
                        "$ref": "#/definitions/operationError"
                    }, 
                    "type": "array"
                }, 
                "contentTypeId": {
                    "type": "string"
                }, 
                "contentId": {
                    "type": "string"
                }, 
                "messages": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "operationStatus": {
                    "enum": [
                        "SUCCESS", 
                        "WARNING", 
                        "FAILED"
                    ], 
                    "type": "string"
                }, 
                "contentName": {
                    "type": "string"
                }
            }
        }, 
        "RefreshOnChangeBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SkipExportBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutCell": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "size": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "FixedValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "value": {
            "xml": {
                "name": "value"
            }, 
            "type": "object", 
            "properties": {
                "label": {
                    "type": "string"
                }, 
                "underlyingValue": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "CoalesceEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "moneyRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "cost": {
                            "description": "The cost (including optional currency code).", 
                            "$ref": "#/definitions/literal"
                        }
                    }, 
                    "description": "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB."
                }
            ]
        }, 
        "secureString": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "secureString"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a secured string value, such as a password."
                }
            ]
        }, 
        "ComplexDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }
            ]
        }, 
        "VisibilityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CommonExpression": {
            "type": "object"
        }, 
        "PermissibleValueList": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "customAllowed": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "Evaluator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ConstantClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/booleanLiteral"
                        }
                    }
                }
            ]
        }, 
        "literalMap": {
            "xml": {
                "name": "literalMap"
            }, 
            "type": "object", 
            "properties": {
                "entries": {
                    "xml": {
                        "name": "entry"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LiteralMapEntry"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Equivalent of java.util.Map"
        }, 
        "ExtensionRendererContext": {
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "extensionId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "elementValuesRequest": {
            "xml": {
                "name": "elementValuesRequest"
            }, 
            "type": "object", 
            "properties": {
                "text": {
                    "type": "string"
                }, 
                "userId": {
                    "type": "string"
                }, 
                "associateValue": {
                    "$ref": "#/definitions/literal"
                }, 
                "headers": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "pagingInfo": {
                    "$ref": "#/definitions/ElementValuesPagingInfo"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "dependencyValues": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "PageSubtenant": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/subtenant"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "MinimumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "StaticPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "values": {
                            "xml": {
                                "name": "value"
                            }, 
                            "items": {
                                "$ref": "#/definitions/value"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "MandatoryConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaximumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "tenant": {
            "xml": {
                "name": "tenant"
            }, 
            "type": "object", 
            "properties": {
                "defaultTenant": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "description": {
                    "type": "string"
                }, 
                "contactEmail": {
                    "type": "string"
                }, 
                "urlName": {
                    "type": "string"
                }, 
                "password": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "RegexpConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "errorMessage": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "formUpdateResponse": {
            "xml": {
                "name": "formUpdateResponse"
            }, 
            "type": "object", 
            "properties": {
                "elementUpdates": {
                    "xml": {
                        "wrapped": true, 
                        "name": "elementUpdate"
                    }, 
                    "items": {
                        "$ref": "#/definitions/updateElementEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "WrapperClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "subtenant": {
            "xml": {
                "name": "subtenant"
            }, 
            "type": "object", 
            "properties": {
                "extensionData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "description": {
                    "type": "string"
                }, 
                "subtenantRoles": {
                    "items": {
                        "$ref": "#/definitions/subtenantRole"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "type": "string"
                }, 
                "tenant": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "LiteralMapEntry": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/literal"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "LayoutFlowElement": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ResetValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "dateTimeLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "dateTimeLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The date.", 
                            "format": "date-time"
                        }
                    }, 
                    "description": "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class."
                }
            ]
        }, 
        "IncrementBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "AndClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "CustomPropertyDefinitionMetadata": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "required": [
                        "field"
                    ], 
                    "type": "object", 
                    "properties": {
                        "field": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                }
            ]
        }, 
        "batchElementUpdateRequest": {
            "xml": {
                "name": "batchElementUpdateRequest"
            }, 
            "required": [
                "formValues"
            ], 
            "type": "object", 
            "properties": {
                "trigger": {
                    "type": "string"
                }, 
                "affectedElements": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "formValues": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "triggeredDetailsLayout": {
                    "$ref": "#/definitions/layout"
                }
            }
        }, 
        "EqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "principalId": {
            "xml": {
                "name": "principalId"
            }, 
            "type": "object", 
            "properties": {
                "domain": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "name": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "subtenantRole": {
            "xml": {
                "name": "subtenantRole"
            }, 
            "type": "object", 
            "properties": {
                "scopeRoleRef": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "principalId": {
                    "items": {
                        "$ref": "#/definitions/principalId"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "NullDisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SupersetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NotClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClause": {
                            "$ref": "#/definitions/Clause"
                        }
                    }
                }
            ]
        }, 
        "LayoutSection": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "rows": {
                    "xml": {
                        "wrapped": true, 
                        "name": "row"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutRow"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "ConditionalEvaluatorCase": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "condition": {
                    "$ref": "#/definitions/Clause"
                }
            }
        }, 
        "updateElementEntry": {
            "xml": {
                "name": "updateElementEntry"
            }, 
            "type": "object", 
            "properties": {
                "errors": {
                    "xml": {
                        "wrapped": true, 
                        "name": "error"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "detailLayout": {
                    "$ref": "#/definitions/layout"
                }, 
                "facetValues": {
                    "$ref": "#/definitions/FacetValueMap"
                }, 
                "permissibleValues": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }, 
                "extensionRendererContext": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "literal": {
            "xml": {
                "name": "literal"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "description": "Wraps a value such that values of different types can be treated generically."
        }, 
        "DynamicLayoutReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ]
        }, 
        "OrderByExpression": {
            "type": "object", 
            "properties": {
                "direction": {
                    "enum": [
                        "ASCENDING", 
                        "DESCENDING"
                    ], 
                    "type": "string"
                }, 
                "expression": {
                    "$ref": "#/definitions/CommonExpression"
                }
            }
        }, 
        "StaticLayout": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "required": [
                        "layout"
                    ], 
                    "type": "object", 
                    "properties": {
                        "layout": {
                            "$ref": "#/definitions/layout"
                        }
                    }
                }
            ]
        }, 
        "entityRefEx": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRefEx"
                    }, 
                    "type": "object", 
                    "properties": {
                        "href": {
                            "type": "string", 
                            "description": "the Href"
                        }
                    }, 
                    "description": "Represents a reference to an entity by uri"
                }
            ]
        }, 
        "FacetValueMap": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/FacetValueMapEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "Constraint": {
            "discriminator": "type", 
            "required": [
                "value"
            ], 
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }
            }
        }, 
        "DynamicDataResponse": {
            "type": "object", 
            "properties": {
                "values": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "LayoutReference": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "BooleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/booleanLiteral"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "IaasPropertyNameBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CustomValidationConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Expression": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "operator": {
                            "$ref": "#/definitions/CriteriaOperator"
                        }, 
                        "rightOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }, 
                        "leftOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "ElementValuesPagingInfo": {
            "type": "object", 
            "properties": {
                "count": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "offset": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "DynamicValueContext": {
            "required": [
                "parameterMappings"
            ], 
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "providerEntityId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "WithinOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "PageReservationInfo": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "$ref": "#/definitions/ReservationInfo"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "PageAndSortRequest": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "queryInfo": {
                    "$ref": "#/definitions/OdataQueryInfo"
                }, 
                "pageNumber": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "pageSize": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "offset": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "DefaultValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "elementValues": {
            "xml": {
                "name": "elementValues"
            }, 
            "type": "object", 
            "properties": {
                "values": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "MaxValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "EntityReferenceDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DynamicDataRequest": {
            "type": "object", 
            "properties": {
                "ignoreUnknownFields": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "ids": {
                    "xml": {
                        "name": "id"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "tenantId": {
                    "type": "string"
                }
            }
        }, 
        "MonetaryValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "literal"
                    }, 
                    "type": "object", 
                    "properties": {
                        "currencyCode": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The ISO 4217 code used to identify the currency (if any) associated with this value."
                        }
                    }, 
                    "description": "Base type for representing monetary values, encapsulating both some kind of quantity and a currency."
                }
            ]
        }, 
        "PrimitiveDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "typeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "TimeSpan": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "timeSpan"
                    }, 
                    "type": "object", 
                    "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
                }
            ]
        }, 
        "ExternalValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "dynamicValueProviderInfo"
                    ], 
                    "type": "object", 
                    "properties": {
                        "dynamicValueProviderInfo": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "ContainsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Field": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "dataType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "permissibleValues": {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                "label": {
                    "type": "string"
                }, 
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "displayAdvice": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "TEXTBOX", 
                        "HYPERLINK", 
                        "EMAIL", 
                        "TEXTAREA", 
                        "DATE_TIME_PICKER", 
                        "CHECKBOX", 
                        "YES_NO", 
                        "CHECKBOX_GROUP", 
                        "DUAL_LIST", 
                        "RADIO_GROUP", 
                        "DROPDOWN", 
                        "LIST", 
                        "SEARCHER", 
                        "TREE", 
                        "FORM", 
                        "IMAGE", 
                        "SLIDER", 
                        "DATA_TABLE", 
                        "VALUE_PICKER"
                    ], 
                    "type": "string"
                }, 
                "orderIndex": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "isMultiValued": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "columns": {
                    "xml": {
                        "wrapped": true, 
                        "name": "column"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "ProviderPreferences": {
            "required": [
                "preferences"
            ], 
            "type": "object", 
            "properties": {
                "preferences": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "serviceTypeId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "UnspecifiedEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "integerLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "integerLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "integer", 
                            "description": "The integer value.", 
                            "format": "int64"
                        }
                    }, 
                    "description": "Wraps a signed 64-bit integer value."
                }
            ]
        }, 
        "LessThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "IsDefinedOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Schema": {
            "type": "object", 
            "properties": {
                "fields": {
                    "xml": {
                        "name": "field"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                }
            }
        }, 
        "Sort": {
            "type": "object"
        }, 
        "FieldReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "path": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "LayoutExtension": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "fieldPrefix": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "extensionId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "extensionPointId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ConditionalEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "cases": {
                            "xml": {
                                "name": "case"
                            }, 
                            "items": {
                                "$ref": "#/definitions/ConditionalEvaluatorCase"
                            }, 
                            "type": "array"
                        }, 
                        "defaulValue": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "MinValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Alert": {
            "type": "object", 
            "properties": {
                "referenceResourceId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "alertPercentLevel": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minimum": 0.0, 
                    "type": "integer", 
                    "maximum": 100.0, 
                    "format": "int32"
                }
            }
        }, 
        "LayoutPlaceholderCell": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ReadOnlyConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MultipleEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "items"
                    ], 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "MinCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "OdataQueryInfo": {
            "type": "object", 
            "properties": {
                "orderBy": {
                    "items": {
                        "$ref": "#/definitions/OrderByExpression"
                    }, 
                    "type": "array"
                }, 
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "rawOrderBy": {
                    "type": "string"
                }, 
                "skip": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "top": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "inlineCount": {
                    "enum": [
                        "NONE", 
                        "ALLPAGES"
                    ], 
                    "type": "string"
                }, 
                "filter": {
                    "$ref": "#/definitions/BoolCommonExpression"
                }, 
                "select": {
                    "items": {
                        "$ref": "#/definitions/EntitySimpleProperty"
                    }, 
                    "type": "array"
                }, 
                "rawFilter": {
                    "type": "string"
                }, 
                "customOptions": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object"
                }, 
                "skipToken": {
                    "type": "string"
                }, 
                "expand": {
                    "items": {
                        "$ref": "#/definitions/EntitySimpleProperty"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "LayoutText": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "value": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "timeSpan": {
            "xml": {
                "name": "timeSpan"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "amount": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "description": "The amount for the time span.", 
                    "format": "int64"
                }, 
                "unit": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "MILLISECONDS", 
                        "SECONDS", 
                        "MINUTES", 
                        "HOURS", 
                        "DAYS", 
                        "WEEKS", 
                        "MONTHS", 
                        "YEARS"
                    ], 
                    "type": "string", 
                    "description": "The unit of measure for the time span. e.g: days."
                }
            }, 
            "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
        }, 
        "FacetValueMapEntry": {
            "type": "object", 
            "properties": {
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "value": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "LayoutPage": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "sections": {
                    "xml": {
                        "wrapped": true, 
                        "name": "section"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutSection"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "decimalLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "decimalLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "number", 
                            "description": "The decimal value.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Wraps a decimal value."
                }
            ]
        }, 
        "CriteriaOperator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "InternalConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Page": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "type": "object"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "DataType": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "typeId": {
                    "enum": [
                        "STRING", 
                        "INTEGER", 
                        "DECIMAL", 
                        "MONEY", 
                        "MONEY_RANGE", 
                        "MONEY_TIME_RATE", 
                        "BOOLEAN", 
                        "ENTITY_REFERENCE", 
                        "DATE_TIME", 
                        "TIME_SPAN", 
                        "SECURE_STRING", 
                        "COMPLEX"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "EditableBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DynamicPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }, 
                        "context": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "EncryptedBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ObjectDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "label": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "EntitySimpleProperty": {
            "type": "object", 
            "properties": {
                "propertyName": {
                    "type": "string"
                }
            }
        }, 
        "MinLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }
    }, 
    "swagger": "2.0"
}