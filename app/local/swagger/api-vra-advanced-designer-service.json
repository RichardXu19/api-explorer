{
    "info": {
        "version": "7.3.0-SNAPSHOT", 
        "description": "# XaaS (Advanced Service Designer) Service API Specification", 
        "title": "Advanced Designer Service API"
    }, 
    "paths": {
        "/api/tenants/{tenantId}/configurations/default/status": {
            "put": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "Tests default configuration for communication with vRO", 
                "description": "Returns status of the tested communication between ASD and vRO for the default configuration", 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/configurations": {
            "put": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "Creates or updates configuration", 
                "description": "Creates or updates configuration", 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/configuration"
                        }, 
                        "description": "A valid configuration to persist", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "create-operation"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ConfigurationResources"
                        }
                    }
                }, 
                "summary": "Gets all configurations", 
                "description": "Gets all configurations", 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/forms": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Creates a generic form", 
                "description": "Creates a generic form", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/GenericForm"
                        }, 
                        "description": "The form to save", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "create-operation"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Gets all forms matching the filtering criteria", 
                "description": "Retrieves all forms matching the filtering criteria of PageAndSortRequest", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string", 
                            "format": "uri"
                        }, 
                        "description": "A base URI used for generating the navigation links in page response", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/resourceOperations/{resourceOperationId}/clone": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Creates a clone of a resource operation", 
                "description": "Creates a clone of a resource operation found by primary key within the current tenant", 
                "parameters": [
                    {
                        "description": "The id of resource operation to clone", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceOperationId"
                    }
                ], 
                "tags": [
                    "create-operation"
                ]
            }
        }, 
        "/api/forms/{genericFormId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Updates a form", 
                "description": "Updates an existing generic form", 
                "parameters": [
                    {
                        "description": "Primary key of the instance to update", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "genericFormId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/GenericForm"
                        }, 
                        "description": "The form entity to use for the update operation", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "update-operation"
                ]
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Deletes a form", 
                "description": "Deletes an existing generic form", 
                "parameters": [
                    {
                        "description": "Primary key of the instance to delete", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "genericFormId"
                    }
                ], 
                "tags": [
                    "delete-operation"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/GenericForm"
                        }
                    }
                }, 
                "summary": "Gets a form", 
                "description": "Retrieves an existing generic form", 
                "parameters": [
                    {
                        "description": "Primary key of the from to retrieve", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "genericFormId"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/workitems": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }
                }, 
                "summary": "Creates a work item", 
                "description": "Creates a work item for collecting user input when a vRO workflow is waiting for a user interaction", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/interactionWorkItem"
                        }, 
                        "description": "The interaction for which to create the work item", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "create-operation"
                ]
            }
        }, 
        "/api/workflows/{workflowId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/workflow"
                        }
                    }
                }, 
                "summary": "Gets a workflow", 
                "description": "Gets a workflow by id", 
                "parameters": [
                    {
                        "description": "The workflow id", 
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/valueDefinitions/key/{key}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Retrieves the values behind the applicable ValueDefinition object for the given key", 
                "description": "Retrieves the values behind the applicable {@link ValueDefinition} for the given key, value and the scope of the current request (System or Tenant). Based on the type of the definition it could retrieve the value from an external system or return a statically value. Value definitions marked as deleted looked up for value retrieval.", 
                "parameters": [
                    {
                        "description": "The key of the persisted ValueDefinition object", 
                        "required": true, 
                        "type": "string", 
                        "name": "key", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/literalMap"
                        }, 
                        "description": "The context to be applied when retrieving the value.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/vco/import": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "string"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The package to import", 
                        "required": true, 
                        "type": "file", 
                        "name": "fileupload", 
                        "in": "formData"
                    }
                ], 
                "tags": [
                    "update-operation"
                ], 
                "description": "Imports a vRO package into the vRO instance configured for the current tenant", 
                "summary": "Imports a vRO package", 
                "operationId": "importVroPackage"
            }
        }, 
        "/api/schema-service/{classId}/schema/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get the permissible values of a field in the schema", 
                "description": "Get the permissible values of a field in the schema associated with the given class id and typeFilter.", 
                "parameters": [
                    {
                        "description": "The class of object", 
                        "required": true, 
                        "type": "string", 
                        "name": "classId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "The element's values. Specifies information required to complete the request", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "An optional request parameter indicating if the values should be load hierarchically.", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "asTree", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/valueDefinitions/key/{key}/value": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Retrieves the value behind the applicable {@link ValueDefinition} for the given key", 
                "description": "Retrieves the value behind the applicable {@link ValueDefinition} for the given key, value and the scope of the current request (System or Tenant). Based on the type of the definition it could retrieve the value from an external system or return a statically value. Value definitions marked as deleted (see {@link ValueDefinition#isDeleted()}) also looked up for value retrieval.", 
                "parameters": [
                    {
                        "description": "The key of the persisted ValueDefinition object", 
                        "required": true, 
                        "type": "string", 
                        "name": "key", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/literalMap"
                        }, 
                        "description": "The context to be applied when retrieving the value.", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/endpoints": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Creates an endpoint configuration object", 
                "description": "Creates an endpoint configuration object", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/CsEndpointData"
                        }, 
                        "description": "The endpoint configuration to save", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "create-operation"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Gets all endpoint configuration objects", 
                "description": "Gets all endpoint configuration objects matching the filtering criteria of PageAndSortRequest", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string", 
                            "format": "uri"
                        }, 
                        "description": "A base URI used for generating the navigation links in page response", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/blueprints/{blueprintId}/clone": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of the blueprint on which to base the cloned object", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "blueprintId"
                    }
                ], 
                "tags": [
                    "create-operation"
                ], 
                "description": "Creates a new blueprint (aka. clones) based on an existing service blueprint with a given id.", 
                "summary": "Clones a service blueprint", 
                "operationId": "cloneBlueprint"
            }
        }, 
        "/api/event-broker/subscriptions": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Creates a workflow subscription", 
                "description": "Creates a workflow subscription", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/WorkflowSubscription"
                        }, 
                        "description": "The workflow subscription to create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "create-operation"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Gets workflow subscriptions matching the filtering criteria", 
                "description": "Gets workflow subscriptions matching the filtering criteria", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string", 
                            "format": "uri"
                        }, 
                        "description": "A base URI used for generating the navigation links in page response", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/forms/{formId}/{bindingId}/update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/formUpdateResponse"
                        }
                    }
                }, 
                "summary": "Get form batch update", 
                "description": "Retrieves the update to the form in response to change in one of the form's field", 
                "parameters": [
                    {
                        "description": "form identifier", 
                        "required": true, 
                        "type": "string", 
                        "name": "formId", 
                        "in": "path"
                    }, 
                    {
                        "description": "binding identifier", 
                        "required": true, 
                        "type": "string", 
                        "name": "bindingId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/batchElementUpdateRequest"
                        }, 
                        "description": "changes to the form elements", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog-callback-operation"
                ]
            }
        }, 
        "/api/workflows/{workflowId}/outputs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Gets output fields of a workflow", 
                "description": "Gets output fields of a workflow", 
                "parameters": [
                    {
                        "description": "The workflow id for which to get the workflow output fields", 
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The class for which the fields will be used. Needed for filtering fields and configuring their state.", 
                        "required": false, 
                        "type": "string", 
                        "name": "usageClass", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/workflows/{workflowId}/fields": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Gets workflow fields", 
                "description": "Gets workflow fields", 
                "parameters": [
                    {
                        "description": "The workflow id for which to get the workflow fields", 
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The class for which the fields will be used. Needed for configuring the state of the returned fields.", 
                        "required": false, 
                        "type": "string", 
                        "name": "usageClass", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/event-broker/subscriptions/{subscriptionId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Updates workflow subscription", 
                "description": "Updates workflow subscription", 
                "parameters": [
                    {
                        "description": "The id of the workflow subscription instance to update", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "subscriptionId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/WorkflowSubscription"
                        }, 
                        "description": "The new state of the workflow subscription", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "update-operation"
                ]
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Deletes a workflow subscription", 
                "description": "Deletes a workflow subscription by its primary key", 
                "parameters": [
                    {
                        "description": "The primary key of the workflow subscription to delete", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "subscriptionId"
                    }
                ], 
                "tags": [
                    "delete-operation"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "Gets workflow subscription by id", 
                "description": "Gets workflow subscription by id", 
                "parameters": [
                    {
                        "description": "The workflow subscription id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "subscriptionId"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/policies/{id}": {
            "put": {
                "responses": {
                    "201": {
                        "description": "'Created' with Policy object that is created"
                    }, 
                    "200": {
                        "description": "'Success' with Policy object that is updated", 
                        "schema": {
                            "$ref": "#/definitions/policyDefinition"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of a policy.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/policyDefinition"
                        }, 
                        "description": "Policy object", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "policy", 
                    "create", 
                    "update"
                ], 
                "description": "Update or create a Policy.", 
                "summary": "Update or create a Policy", 
                "operationId": "updateOrCreatePolicy"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Deletes a policy", 
                "description": "Deletes a policy by id.", 
                "parameters": [
                    {
                        "description": "The id of the resource", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "policies"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the Policy", 
                        "schema": {
                            "$ref": "#/definitions/policyDefinition"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no Policy with provided id"
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of a policy.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "policy", 
                    "get"
                ], 
                "description": "Retrieve the details of a specified Policy.", 
                "summary": "Get policy by id", 
                "operationId": "getPolicy"
            }
        }, 
        "/api/tenants/{tenantId}/types/{resourceTypeId}/resourceCount": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ResourceIntegerLiteral"
                        }
                    }
                }, 
                "summary": "Gets the count of active resources", 
                "description": "Retrieves active resources count for given resourceTypeId for all users", 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of resource type for which to count the resources", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceTypeId"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/scriptActions/categories": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Retrieves all ScriptActionCategory categories", 
                "description": "Retrieves all ScriptActionCategory categories", 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/types/{resourceTypeId}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of the object to delete.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceTypeId"
                    }
                ], 
                "tags": [
                    "delete-operation"
                ], 
                "description": "Deletes resource type or resource mapping in the current tenant.", 
                "summary": "Deletes resource type or resource mapping", 
                "operationId": "deleteResourceType"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/CSResourceType"
                        }
                    }
                }, 
                "summary": "Gets a resource type or resource mapping", 
                "description": "Gets a resource type or resource mapping by id", 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Primary key of the object to retrieve", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceTypeId"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/types": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/CSResourceType"
                        }, 
                        "description": "The resource type or mapping to create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "create-operation"
                ], 
                "description": "Creates a resource type or resource mapping in the current tenant.", 
                "summary": "Creates a resource type or resource mapping", 
                "operationId": "createResourceType"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Flag indicating whether to get resource mappings", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "external", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "type": "string", 
                            "format": "uri"
                        }, 
                        "description": "A base URI used for generating the navigation links in page response", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "list-operation"
                ], 
                "description": "Lists resource types or resource mappings matching the criteria of passed in PageAndSortRequest parameter", 
                "summary": "Lists resource types or resource mappings", 
                "operationId": "listResourceTypes"
            }
        }, 
        "/api/workflows/{workflowId}/form": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Gets the workflow form", 
                "description": "Gets the workflow form", 
                "parameters": [
                    {
                        "description": "The workflow id", 
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The name of the type", 
                        "required": true, 
                        "type": "string", 
                        "name": "typeName", 
                        "in": "query"
                    }, 
                    {
                        "description": "The fields to exclude", 
                        "required": false, 
                        "type": "string", 
                        "name": "excludedField", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/blueprints/{blueprintId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of the blueprint to update within the current tenant", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "blueprintId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceBlueprint"
                        }, 
                        "description": "New state of the blueprint object to use for the update operation", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "update-operation"
                ], 
                "description": "Updates a service blueprint with a given id.", 
                "summary": "Updates a service blueprint", 
                "operationId": "updateBlueprint"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of the blueprint to delete", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "blueprintId"
                    }
                ], 
                "tags": [
                    "delete-operation"
                ], 
                "description": "Deletes a service blueprint by id in the current tenant.", 
                "summary": "Deletes a service blueprint", 
                "operationId": "deleteBlueprint"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ServiceBlueprint"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of the blueprint to retrieve within the current tenant", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "blueprintId"
                    }
                ], 
                "tags": [
                    "get-operation"
                ], 
                "description": "Retrieves a service blueprint by id.", 
                "summary": "Gets a service blueprint", 
                "operationId": "getBlueprint"
            }
        }, 
        "/api/resourceOperations": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Creates a resource operation", 
                "description": "Creates a resource operation", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/CsResourceOperation"
                        }, 
                        "description": "The resource operation to create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "create-operation"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string", 
                            "format": "uri"
                        }, 
                        "description": "A base URI used for generating the navigation links in page response", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ], 
                "description": "Retrieves resource operations by filtering it based on PageAndSortRequest parameter", 
                "summary": "Retrieves resource operations", 
                "operationId": "getResourceOperations"
            }
        }, 
        "/api/workflows/{workflowId}/blueprint": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Generates a service blueprint based on a workflow", 
                "description": "Generates a service blueprint based on a workflow", 
                "parameters": [
                    {
                        "description": "The workflow id on which to base the service blueprint", 
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/configurations/status": {
            "put": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "Tests provided configuration for communication with vRO", 
                "description": "Returns status of the tested communication between ASD and vRO with passed in as argument configuration", 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/configuration"
                        }, 
                        "description": "A valid configuration object to test for connectivity with vRO", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/valueDefinitions": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ValueDefinition"
                        }
                    }
                }, 
                "summary": "Creates a ValueDefinition", 
                "description": "Creates a ValueDefinition", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ValueDefinition"
                        }, 
                        "description": "The ValueDefinition to be created", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "create-operation"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Returns a page of ValueDefinition objects", 
                "description": "Returns a page of ValueDefinition objects", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string", 
                            "format": "uri"
                        }, 
                        "description": "Ignore, for internal use only. A base URI used for generating the navigation links in page response", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/inventory/tenant/{tenantId}/resource/{resourceId}/tags": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/TagInstanceList"
                        }
                    }
                }, 
                "summary": "Get Tags of the Catalog Resource Item", 
                "description": "Get Tags of the Resource in the VRO for the given Catalog Resource", 
                "parameters": [
                    {
                        "description": "The tenantId", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Id of the catalogProvider Resource", 
                        "required": true, 
                        "type": "string", 
                        "name": "resourceId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/valueDefinitions/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Updates or creates a ValueDefinition", 
                "description": "Updates or creates a ValueDefinition", 
                "parameters": [
                    {
                        "description": "The primary key of the entity to be updated", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ValueDefinition"
                        }, 
                        "description": "The ValueDefinition to be updated", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "update-operation"
                ]
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Deletes a ValueDefinition", 
                "description": "Deletes a ValueDefinition by primary key", 
                "parameters": [
                    {
                        "description": "The primary key of the entity to be deleted", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "delete-operation"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/ValueDefinition"
                        }
                    }
                }, 
                "summary": "Gets a ValueDefinition", 
                "description": "Gets a ValueDefinition by primary key", 
                "parameters": [
                    {
                        "description": "The primary key of the entity to be retrieved", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "id"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/scriptActions/categories/{categoryName}/scriptActions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Retrieves the ScriptActionSummary objects underneath a specified category.", 
                "description": "Retrieves the ScriptActionSummary objects underneath a specified category.", 
                "parameters": [
                    {
                        "description": "Optional. The name of the category that houses a script action", 
                        "required": true, 
                        "type": "string", 
                        "name": "categoryName", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/policies/hrid/{hrid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the Policy", 
                        "schema": {
                            "$ref": "#/definitions/policyDefinition"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no Policy with provided hrid"
                    }
                }, 
                "summary": "Get Policy by human-readable ID", 
                "description": "Retrieve the details of a specified Policy.", 
                "parameters": [
                    {
                        "description": "Policy human-readable ID", 
                        "required": true, 
                        "type": "string", 
                        "name": "hrid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "policy", 
                    "get"
                ]
            }
        }, 
        "/api/resourceOperations/{resourceOperationId}/status": {
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Updates the status of a resource operation", 
                "description": "Updates the publish status of a resource operation found by primary key within the current tenant.", 
                "parameters": [
                    {
                        "description": "The id of resource operation to publish/unpublish to/from catalog", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceOperationId"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "The new status to set", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "update-operation"
                ]
            }
        }, 
        "/api/scriptActions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Searches for ScriptActionSummary objects", 
                "description": "Searches for {@link ScriptActionSummary}s by containment of name, description and categoryName.", 
                "parameters": [
                    {
                        "description": "Optional. The name of a script action", 
                        "required": false, 
                        "type": "string", 
                        "name": "name", 
                        "in": "query"
                    }, 
                    {
                        "description": "Optional. The name of the category that houses a script action", 
                        "required": false, 
                        "type": "string", 
                        "name": "categoryName", 
                        "in": "query"
                    }, 
                    {
                        "description": "Optional. The description of a script action", 
                        "required": false, 
                        "type": "string", 
                        "name": "description", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/forms/{formId}/{bindingId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "Get form", 
                "description": "Retrieve an editable form for submitting a request for the specified blueprint catalog item.", 
                "parameters": [
                    {
                        "description": "formId specifying the type of the form to be built", 
                        "required": true, 
                        "type": "string", 
                        "name": "formId", 
                        "in": "path"
                    }, 
                    {
                        "description": "bindingId identifier", 
                        "required": true, 
                        "type": "string", 
                        "name": "bindingId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "catalog-callback-operation"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/blueprints/{blueprintId}/status": {
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Primary key of the blueprint to update", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "blueprintId"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "description": "The new status to set", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "update-operation"
                ], 
                "description": "Changes the published status of a blueprint with a given id.", 
                "summary": "Changes the published status of a blueprint", 
                "operationId": "updateBlueprintStatus"
            }
        }, 
        "/api/tenants/{tenantId}/blueprints": {
            "post": {
                "responses": {
                    "201": {
                        "description": ""
                    }, 
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The tenant for which the blueprint will be created", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceBlueprint"
                        }, 
                        "description": "The blueprint to create", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "create-operation"
                ], 
                "description": "Creates service blueprint in the current tenant.", 
                "summary": "Creates service blueprint", 
                "operationId": "createServiceBlueprint"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "type": "string", 
                            "format": "uri"
                        }, 
                        "description": "A base URI used for generating the navigation links in page response", 
                        "required": false, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "list-operation"
                ], 
                "description": "Lists all service blueprints in the current tenant matching the criteria in PageAndSortReques parameter.", 
                "summary": "Lists all service blueprints", 
                "operationId": "getBlueprints"
            }
        }, 
        "/api/resourceOperations/{resourceOperationId}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }, 
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of resource operation to update", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceOperationId"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/CsResourceOperation"
                        }, 
                        "description": "The entity to use for updating the state", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "update-operation"
                ], 
                "description": "Updates a resource operation by primary key within the current tenant", 
                "summary": "Updates a resource operation", 
                "operationId": "updateResourceOperation"
            }, 
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "parameters": [
                    {
                        "description": "The id of resource operation to delete", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceOperationId"
                    }
                ], 
                "tags": [
                    "delete-operation"
                ], 
                "description": "Deletes a resource operation by primary key", 
                "summary": "Deletes a resource operation", 
                "operationId": "deleteResourceOperation"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/CsResourceOperation"
                        }
                    }
                }, 
                "summary": "Retrieves a resource operation", 
                "description": "Retrieves a resource operation by primary key", 
                "parameters": [
                    {
                        "description": "The id of resource operation to retrieve", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "resourceOperationId"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/forms/{formId}/{bindingId}/{elementId}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "summary": "Get form element values", 
                "description": "Retrieves a paged list of permissible values that can be assigned to a specific field", 
                "parameters": [
                    {
                        "description": "form identifier", 
                        "required": true, 
                        "type": "string", 
                        "name": "formId", 
                        "in": "path"
                    }, 
                    {
                        "description": "binding identifier", 
                        "required": true, 
                        "type": "string", 
                        "name": "bindingId", 
                        "in": "path"
                    }, 
                    {
                        "description": "An identifier of the element within the form", 
                        "required": true, 
                        "type": "string", 
                        "name": "elementId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "description": "Specifies information required to complete the request", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "catalog-callback-operation"
                ]
            }
        }, 
        "/api/inventory/types": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Gets all inventory types matching the filtering criteria", 
                "description": "Gets all inventory types matching the filtering criteria", 
                "parameters": [
                    {
                        "description": "The name of the plugin", 
                        "required": false, 
                        "type": "string", 
                        "name": "endpointType", 
                        "in": "query"
                    }, 
                    {
                        "description": "The name of the type", 
                        "required": false, 
                        "type": "string", 
                        "name": "typeName", 
                        "in": "query"
                    }, 
                    {
                        "description": "If to include the simple types", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "includeSimpleTypes", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/endpoints/{endpointId}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Deletes an endpoint configuration object", 
                "description": "Deletes an endpoint configuration object by primary key", 
                "parameters": [
                    {
                        "description": "The id of the endpoint configuration to delete within the current tenant", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "endpointId"
                    }
                ], 
                "tags": [
                    "delete-operation"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/configurations/{configurationId}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                }, 
                "summary": "Deletes a configuration", 
                "description": "Deletes a configuration by primary key", 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of the configuration object to delete", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "configurationId"
                    }
                ], 
                "tags": [
                    "delete-operation"
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "$ref": "#/definitions/configuration"
                        }
                    }
                }, 
                "summary": "Gets a configuration", 
                "description": "Gets a configuration by primary key", 
                "parameters": [
                    {
                        "description": "The tenant", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of the configuration object to retrieve.", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "configurationId"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/workflows/{workflowId}/resourceOperation": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Generates a resource opreation based on a workflow", 
                "description": "Generates a resource opreation based on a workflow", 
                "parameters": [
                    {
                        "description": "The workflow id on which to base the resource operation", 
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/CsParameter"
                        }, 
                        "description": "The input parameter for the resource operation", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/types/detailsForm": {
            "put": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "type": "object"
                        }
                    }
                }, 
                "summary": "Gets a details form", 
                "description": "Gets the details form for the passed in inventory type", 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/InventoryType"
                        }, 
                        "description": "The inventory type for which to build the details form", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }, 
                    {
                        "description": "tenantId", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/policies": {
            "post": {
                "responses": {
                    "201": {
                        "description": "'Created' with Policy object that is created", 
                        "schema": {
                            "$ref": "#/definitions/policyDefinition"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/policyDefinition"
                        }, 
                        "description": "Policy object", 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "policy", 
                    "create"
                ], 
                "description": "Create a Policy.", 
                "summary": "Create a Policy", 
                "operationId": "createPolicy"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with Policy on pages", 
                        "schema": {
                            "$ref": "#/definitions/Page"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Page Number", 
                        "default": 1, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "page"
                    }, 
                    {
                        "description": "Number of entries per page", 
                        "default": 20, 
                        "required": false, 
                        "in": "query", 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "description": "Multiple comma-separated properties sorted in ascending or descending order", 
                        "required": false, 
                        "type": "string", 
                        "name": "$orderby", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets the number of returned entries from the top of the response (total number per page in relation to skip)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$top", 
                        "in": "query"
                    }, 
                    {
                        "description": "Sets how many entries you would like to skip", 
                        "required": false, 
                        "type": "integer", 
                        "name": "$skip", 
                        "in": "query"
                    }, 
                    {
                        "description": "Boolean expression for whether a particular entry should be included in the response", 
                        "required": false, 
                        "type": "string", 
                        "name": "$filter", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "policy", 
                    "get", 
                    "get-all"
                ], 
                "description": "Get policies by pages.", 
                "summary": "Get policies", 
                "operationId": "getPolicies"
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "tags": [
        {
            "name": "catalog-callback-operation"
        }, 
        {
            "name": "create"
        }, 
        {
            "name": "create-operation"
        }, 
        {
            "name": "delete-operation"
        }, 
        {
            "name": "get"
        }, 
        {
            "name": "get-all"
        }, 
        {
            "name": "get-operation"
        }, 
        {
            "name": "list-operation"
        }, 
        {
            "name": "policies"
        }, 
        {
            "name": "policy"
        }, 
        {
            "name": "update"
        }, 
        {
            "name": "update-operation"
        }
    ], 
    "basePath": "/advanced-designer-service", 
    "definitions": {
        "ConstantValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/literal"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ScriptActionValueDefinition": {
            "allOf": [
                {
                    "$ref": "#/definitions/ValueDefinition"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "scriptActionFqn": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "DesignerLayout": {
            "type": "object", 
            "properties": {
                "pages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "page"
                    }, 
                    "items": {
                        "$ref": "#/definitions/DesignerLayoutPage"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "NotEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "complexLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "complexLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's class."
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component type."
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The type filter for this literal."
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component."
                        }, 
                        "values": {
                            "description": "Map of values, keyed by the field ids of some complex type.", 
                            "$ref": "#/definitions/literalMap"
                        }
                    }, 
                    "description": "A complex value composed of multiple values keyed by the field ids of some complex type."
                }
            ]
        }, 
        "ParameterMapping": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "DesignerLayoutExtension": {
            "allOf": [
                {
                    "$ref": "#/definitions/DesignerLayoutCell"
                }, 
                {
                    "xml": {
                        "name": "DesignerLayoutExtension"
                    }, 
                    "type": "object", 
                    "properties": {
                        "fieldPrefix": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "extensionId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "extensionPointId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "SubsetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "moneyRange": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRange"
                    }, 
                    "type": "object", 
                    "properties": {
                        "maxValue": {
                            "type": "number", 
                            "description": "The upper limit of the range.", 
                            "format": "double"
                        }, 
                        "minValue": {
                            "type": "number", 
                            "description": "The lower limit of the range.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a range of money values, between some defined minimums and maximums."
                }
            ]
        }, 
        "EndsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "VisibilityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "TagInstanceList": {
            "xml": {
                "name": "TagInstanceList"
            }, 
            "type": "object", 
            "properties": {
                "userTags": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "globalTags": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "id": {
                    "type": "string"
                }
            }
        }, 
        "ParameterMappingCollection": {
            "type": "object", 
            "properties": {
                "params": {
                    "xml": {
                        "wrapped": true, 
                        "name": "param"
                    }, 
                    "items": {
                        "$ref": "#/definitions/ParameterMapping"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "layout": {
            "xml": {
                "name": "layout"
            }, 
            "type": "object", 
            "properties": {
                "pages": {
                    "xml": {
                        "wrapped": true, 
                        "name": "page"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutPage"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "DisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "XaaSComponentConfiguration": {
            "xml": {
                "name": "XaaSComponentConfiguration"
            }, 
            "type": "object", 
            "properties": {
                "operations": {
                    "items": {
                        "$ref": "#/definitions/xaasComponentOperation"
                    }, 
                    "type": "array"
                }, 
                "scalable": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "categoryId": {
                    "type": "string"
                }
            }
        }, 
        "LayoutRow": {
            "type": "object", 
            "properties": {
                "items": {
                    "xml": {
                        "wrapped": true, 
                        "name": "item"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutCell"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "ElementValuesPagingInfo": {
            "type": "object", 
            "properties": {
                "count": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "offset": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "money": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "money"
                    }, 
                    "type": "object", 
                    "properties": {
                        "amount": {
                            "type": "number", 
                            "description": "The amount associated with this value (with no specific currency).", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a single, precise monetary value."
                }
            ]
        }, 
        "OrClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "DesignerStaticLayout": {
            "allOf": [
                {
                    "$ref": "#/definitions/DesignerLayoutReference"
                }, 
                {
                    "required": [
                        "layout"
                    ], 
                    "type": "object", 
                    "properties": {
                        "layout": {
                            "$ref": "#/definitions/DesignerLayout"
                        }
                    }
                }
            ]
        }, 
        "moneyTimeRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyTimeRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "basis": {
                            "description": "The span of time to calculate the rate of money for.", 
                            "$ref": "#/definitions/timeSpan"
                        }
                    }, 
                    "description": "Represents a rate of money over time."
                }
            ]
        }, 
        "interactionWorkItem": {
            "xml": {
                "name": "interactionWorkItem"
            }, 
            "required": [
                "requestedBy", 
                "workflowExecutionId", 
                "workflowId"
            ], 
            "type": "object", 
            "properties": {
                "assignees": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "workflowId": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "workflowExecutionId": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "requestedBy": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "subtenantRef": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "UniqueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "stringLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "stringLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a String value."
                }
            ]
        }, 
        "EqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "entityRef": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRef"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier of the type or category to which the referenced entity belongs."
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The unique identifier of the referenced entity, encoded as a string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
                        }
                    }, 
                    "description": "Represents a reference to an entity defined somewhere in the suite."
                }
            ]
        }, 
        "MinCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CallbackEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ElementState": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Constraint"
                    }, 
                    "type": "array"
                }, 
                "dependencies": {
                    "xml": {
                        "wrapped": true, 
                        "name": "dependency"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "type": "string"
                    }
                }
            }
        }, 
        "Clause": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ComplexEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "values": {
                            "additionalProperties": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "object"
                        }
                    }
                }
            ]
        }, 
        "DesignerLayoutPlaceholderCell": {
            "allOf": [
                {
                    "$ref": "#/definitions/DesignerLayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LessThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "multipleLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "multipleLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "xml": {
                                "name": "item"
                            }, 
                            "items": {
                                "$ref": "#/definitions/literal"
                            }, 
                            "type": "array", 
                            "description": "The list of specified values. NOTE: All values must be of the same data type."
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string", 
                            "description": "The data type of the items in the list."
                        }
                    }, 
                    "description": "A literal which represents multiple values. All of these component values must be of the same data type."
                }
            ]
        }, 
        "DesignerLayoutReference": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "workflowParameter": {
            "xml": {
                "name": "workflowParameter"
            }, 
            "required": [
                "name", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "type": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "LayoutFlow": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "parts": {
                            "xml": {
                                "wrapped": true, 
                                "name": "part"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutFlowElement"
                            }, 
                            "type": "array"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ContextPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "InventoryTypeProperty": {
            "xml": {
                "name": "InventoryTypeProperty"
            }, 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "displayName": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "RefreshOnChangeBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SkipExportBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutCell": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "size": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "Version": {
            "xml": {
                "name": "Version"
            }, 
            "type": "object", 
            "properties": {
                "micro": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "major": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "version": {
                    "pattern": "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}(?:\\-\\d{1,10})?$", 
                    "type": "string"
                }, 
                "minor": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "revision": {
                    "type": "integer", 
                    "format": "int64"
                }
            }
        }, 
        "FixedValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "blueprintForm": {
            "xml": {
                "name": "blueprintForm"
            }, 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "designerLayout": {
                    "$ref": "#/definitions/DesignerLayout"
                }
            }
        }, 
        "CsEndpointData": {
            "xml": {
                "name": "CsEndpointData"
            }, 
            "required": [
                "name", 
                "namespace"
            ], 
            "type": "object", 
            "properties": {
                "values": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "namespace": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "CoalesceEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "moneyRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "cost": {
                            "description": "The cost (including optional currency code).", 
                            "$ref": "#/definitions/literal"
                        }
                    }, 
                    "description": "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB."
                }
            ]
        }, 
        "secureString": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "secureString"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a secured string value, such as a password."
                }
            ]
        }, 
        "StartsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "scriptActionParameter": {
            "xml": {
                "name": "scriptActionParameter"
            }, 
            "required": [
                "name", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "type": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "ComplexDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }
            ]
        }, 
        "Link": {
            "type": "object", 
            "properties": {
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "rel": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "PermissibleValueList": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "customAllowed": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "Evaluator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ConstantClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/booleanLiteral"
                        }
                    }
                }
            ]
        }, 
        "literalMap": {
            "xml": {
                "name": "literalMap"
            }, 
            "type": "object", 
            "properties": {
                "entries": {
                    "xml": {
                        "name": "entry"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LiteralMapEntry"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Equivalent of java.util.Map"
        }, 
        "ExtensionRendererContext": {
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "extensionId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "elementValuesRequest": {
            "xml": {
                "name": "elementValuesRequest"
            }, 
            "type": "object", 
            "properties": {
                "text": {
                    "type": "string"
                }, 
                "userId": {
                    "type": "string"
                }, 
                "associateValue": {
                    "$ref": "#/definitions/literal"
                }, 
                "headers": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "pagingInfo": {
                    "$ref": "#/definitions/ElementValuesPagingInfo"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "dependencyValues": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "DesignerLayoutText": {
            "allOf": [
                {
                    "$ref": "#/definitions/DesignerLayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "value": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "workflow": {
            "xml": {
                "name": "workflow"
            }, 
            "required": [
                "description", 
                "id", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "outputParameters": {
                    "items": {
                        "$ref": "#/definitions/workflowParameter"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "inputParameters": {
                    "items": {
                        "$ref": "#/definitions/workflowParameter"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "CsResourceOperation": {
            "xml": {
                "namespace": "http://www.vmware.com/vcac/schema/advanced-designer-service/v7.0", 
                "name": "CsResourceOperation"
            }, 
            "required": [
                "name", 
                "status", 
                "workflowId"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "DRAFT", 
                        "PUBLISHED", 
                        "RETIRED"
                    ], 
                    "type": "string"
                }, 
                "forms": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/formScenario"
                    }, 
                    "type": "array"
                }, 
                "workflowId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "disposal": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "iconId": {
                    "type": "string"
                }, 
                "outputParameter": {
                    "$ref": "#/definitions/CsParameter"
                }, 
                "access": {
                    "type": "string"
                }, 
                "builtIn": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "version": {
                    "$ref": "#/definitions/Version"
                }, 
                "inputParameter": {
                    "$ref": "#/definitions/CsParameter"
                }, 
                "catalogRequestInfoHidden": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "statusName": {
                    "type": "string"
                }, 
                "id": {
                    "$ref": "#/definitions/TenantedUuid"
                }, 
                "targetCriteria": {
                    "$ref": "#/definitions/Clause"
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "MinimumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "DesignerDynamicLayoutReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/DesignerLayoutReference"
                }, 
                {
                    "required": [
                        "dynamicLayoutContext"
                    ], 
                    "type": "object", 
                    "properties": {
                        "dynamicLayoutContext": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "ValueDefinition": {
            "discriminator": "@type", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "multi": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "description": {
                    "type": "string"
                }, 
                "dataType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "key": {
                    "type": "string"
                }, 
                "scope": {
                    "$ref": "#/definitions/FormsScope"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "StaticPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "values": {
                            "xml": {
                                "name": "value"
                            }, 
                            "items": {
                                "$ref": "#/definitions/value"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "MandatoryConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaximumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "configuration": {
            "xml": {
                "name": "configuration"
            }, 
            "required": [
                "host", 
                "name", 
                "tenantId"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string"
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "embedded": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "systemDefault": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "host": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "ssoMode": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "tenantId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "password": {
                    "type": "string"
                }, 
                "port": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "DesignerLayoutField": {
            "allOf": [
                {
                    "$ref": "#/definitions/DesignerLayoutCell"
                }, 
                {
                    "xml": {
                        "name": "DesignerLayoutField"
                    }, 
                    "type": "object", 
                    "properties": {
                        "extensionRendererContext": {
                            "$ref": "#/definitions/ExtensionRendererContext"
                        }, 
                        "description": {
                            "type": "string"
                        }, 
                        "labelDisplaySize": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "dataType": {
                            "$ref": "#/definitions/DataType"
                        }, 
                        "refreshOnChange": {
                            "default": false, 
                            "type": "boolean"
                        }, 
                        "staticField": {
                            "default": false, 
                            "type": "boolean"
                        }, 
                        "permissibleValues": {
                            "$ref": "#/definitions/PermissibleValueList"
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "displayAdvice": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "TEXTBOX", 
                                "HYPERLINK", 
                                "EMAIL", 
                                "TEXTAREA", 
                                "DATE_TIME_PICKER", 
                                "CHECKBOX", 
                                "YES_NO", 
                                "CHECKBOX_GROUP", 
                                "DUAL_LIST", 
                                "RADIO_GROUP", 
                                "DROPDOWN", 
                                "LIST", 
                                "SEARCHER", 
                                "TREE", 
                                "FORM", 
                                "IMAGE", 
                                "SLIDER", 
                                "DATA_TABLE", 
                                "VALUE_PICKER"
                            ], 
                            "type": "string"
                        }, 
                        "permissibleValuesContext": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }, 
                        "orderIndex": {
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "initialStaticState": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "errors": {
                            "xml": {
                                "wrapped": true, 
                                "name": "error"
                            }, 
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array"
                        }, 
                        "isMultiValued": {
                            "xml": {
                                "attribute": true
                            }, 
                            "default": false, 
                            "type": "boolean"
                        }, 
                        "customField": {
                            "default": false, 
                            "type": "boolean"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "columns": {
                            "xml": {
                                "wrapped": true, 
                                "name": "column"
                            }, 
                            "items": {
                                "$ref": "#/definitions/DesignerLayoutField"
                            }, 
                            "type": "array"
                        }, 
                        "detailLayout": {
                            "$ref": "#/definitions/DesignerLayoutReference"
                        }
                    }
                }
            ]
        }, 
        "RegexpConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "errorMessage": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "formUpdateResponse": {
            "xml": {
                "name": "formUpdateResponse"
            }, 
            "type": "object", 
            "properties": {
                "elementUpdates": {
                    "xml": {
                        "wrapped": true, 
                        "name": "elementUpdate"
                    }, 
                    "items": {
                        "$ref": "#/definitions/updateElementEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "WrapperClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "layoutScenario": {
            "xml": {
                "name": "layoutScenario"
            }, 
            "type": "object", 
            "properties": {
                "usageClass": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }
            }
        }, 
        "WorkflowSubscription": {
            "xml": {
                "name": "WorkflowSubscription"
            }, 
            "required": [
                "status", 
                "workflowId"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "DRAFT", 
                        "PUBLISHED", 
                        "RETIRED"
                    ], 
                    "type": "string"
                }, 
                "workflowId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "criteria": {
                    "$ref": "#/definitions/Clause"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "priority": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minimum": 0.0, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "eventTopicId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "version": {
                    "$ref": "#/definitions/Version"
                }, 
                "timeout": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "statusName": {
                    "type": "string"
                }, 
                "reply": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "tenantId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "blocking": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }
            }
        }, 
        "GreaterThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "TenantedUuid": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "tenant": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "LiteralMapEntry": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/literal"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "LayoutFlowElement": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ResetValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DesignerLayoutPage": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "sections": {
                    "xml": {
                        "wrapped": true, 
                        "name": "section"
                    }, 
                    "items": {
                        "$ref": "#/definitions/DesignerLayoutSection"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "dateTimeLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "dateTimeLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The date.", 
                            "format": "date-time"
                        }
                    }, 
                    "description": "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class."
                }
            ]
        }, 
        "IncrementBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "AndClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "CustomPropertyDefinitionMetadata": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "required": [
                        "field"
                    ], 
                    "type": "object", 
                    "properties": {
                        "field": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                }
            ]
        }, 
        "batchElementUpdateRequest": {
            "xml": {
                "name": "batchElementUpdateRequest"
            }, 
            "required": [
                "formValues"
            ], 
            "type": "object", 
            "properties": {
                "trigger": {
                    "type": "string"
                }, 
                "affectedElements": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "formValues": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "triggeredDetailsLayout": {
                    "$ref": "#/definitions/layout"
                }
            }
        }, 
        "LayoutField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "extensionRendererContext": {
                            "$ref": "#/definitions/ExtensionRendererContext"
                        }, 
                        "description": {
                            "type": "string"
                        }, 
                        "dataType": {
                            "$ref": "#/definitions/DataType"
                        }, 
                        "permissibleValues": {
                            "$ref": "#/definitions/PermissibleValueList"
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "displayAdvice": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "TEXTBOX", 
                                "HYPERLINK", 
                                "EMAIL", 
                                "TEXTAREA", 
                                "DATE_TIME_PICKER", 
                                "CHECKBOX", 
                                "YES_NO", 
                                "CHECKBOX_GROUP", 
                                "DUAL_LIST", 
                                "RADIO_GROUP", 
                                "DROPDOWN", 
                                "LIST", 
                                "SEARCHER", 
                                "TREE", 
                                "FORM", 
                                "IMAGE", 
                                "SLIDER", 
                                "DATA_TABLE", 
                                "VALUE_PICKER"
                            ], 
                            "type": "string"
                        }, 
                        "orderIndex": {
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "isMultiValued": {
                            "xml": {
                                "attribute": true
                            }, 
                            "default": false, 
                            "type": "boolean"
                        }, 
                        "labelSize": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "columns": {
                            "xml": {
                                "wrapped": true, 
                                "name": "column"
                            }, 
                            "items": {
                                "$ref": "#/definitions/LayoutField"
                            }, 
                            "type": "array"
                        }, 
                        "detailLayout": {
                            "$ref": "#/definitions/LayoutReference"
                        }
                    }
                }
            ]
        }, 
        "GenericForm": {
            "xml": {
                "name": "GenericForm"
            }, 
            "required": [
                "name", 
                "tenant"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "layout": {
                    "$ref": "#/definitions/DesignerLayout"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "tenant": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "timeSpan": {
            "xml": {
                "name": "timeSpan"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "amount": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "description": "The amount for the time span.", 
                    "format": "int64"
                }, 
                "unit": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "MILLISECONDS", 
                        "SECONDS", 
                        "MINUTES", 
                        "HOURS", 
                        "DAYS", 
                        "WEEKS", 
                        "MONTHS", 
                        "YEARS"
                    ], 
                    "type": "string", 
                    "description": "The unit of measure for the time span. e.g: days."
                }
            }, 
            "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
        }, 
        "NullDisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SupersetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NotClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClause": {
                            "$ref": "#/definitions/Clause"
                        }
                    }
                }
            ]
        }, 
        "LayoutSection": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "rows": {
                    "xml": {
                        "wrapped": true, 
                        "name": "row"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutRow"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "ResourceIntegerLiteral": {
            "type": "object", 
            "properties": {
                "content": {
                    "$ref": "#/definitions/integerLiteral"
                }, 
                "links": {
                    "xml": {
                        "wrapped": true, 
                        "name": "links"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "ConditionalEvaluatorCase": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "condition": {
                    "$ref": "#/definitions/Clause"
                }
            }
        }, 
        "updateElementEntry": {
            "xml": {
                "name": "updateElementEntry"
            }, 
            "type": "object", 
            "properties": {
                "errors": {
                    "xml": {
                        "wrapped": true, 
                        "name": "error"
                    }, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "detailLayout": {
                    "$ref": "#/definitions/layout"
                }, 
                "facetValues": {
                    "$ref": "#/definitions/FacetValueMap"
                }, 
                "permissibleValues": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }, 
                "extensionRendererContext": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "literal": {
            "xml": {
                "name": "literal"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "description": "Wraps a value such that values of different types can be treated generically."
        }, 
        "DynamicLayoutReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ]
        }, 
        "policyDefinition": {
            "xml": {
                "name": "policyDefinition"
            }, 
            "type": "object", 
            "properties": {
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "tenantId": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "properties": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "hrid": {
                    "minLength": 1, 
                    "type": "string", 
                    "pattern": "^\\w+$", 
                    "maxLength": 255
                }
            }
        }, 
        "ServiceBlueprint": {
            "xml": {
                "namespace": "http://www.vmware.com/vcac/schema/advanced-designer-service/v7.0", 
                "name": "ServiceBlueprint"
            }, 
            "required": [
                "name", 
                "status", 
                "workflowId"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "DRAFT", 
                        "PUBLISHED", 
                        "RETIRED"
                    ], 
                    "type": "string"
                }, 
                "forms": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/formScenario"
                    }, 
                    "type": "array"
                }, 
                "workflowId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "component": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "access": {
                    "type": "string"
                }, 
                "componentConfiguration": {
                    "$ref": "#/definitions/XaaSComponentConfiguration"
                }, 
                "builtIn": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "version": {
                    "$ref": "#/definitions/Version"
                }, 
                "outputParameter": {
                    "$ref": "#/definitions/CsParameter"
                }, 
                "catalogRequestInfoHidden": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "statusName": {
                    "type": "string"
                }, 
                "id": {
                    "$ref": "#/definitions/TenantedUuid"
                }, 
                "name": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "StaticLayout": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutReference"
                }, 
                {
                    "required": [
                        "layout"
                    ], 
                    "type": "object", 
                    "properties": {
                        "layout": {
                            "$ref": "#/definitions/layout"
                        }
                    }
                }
            ]
        }, 
        "ConfigurationResources": {
            "xml": {
                "name": "ConfigurationResources"
            }, 
            "type": "object", 
            "properties": {
                "content": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "items": {
                        "$ref": "#/definitions/configuration"
                    }, 
                    "type": "array"
                }, 
                "links": {
                    "xml": {
                        "wrapped": true, 
                        "name": "links"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "entityRefEx": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRefEx"
                    }, 
                    "type": "object", 
                    "properties": {
                        "href": {
                            "type": "string", 
                            "description": "the Href"
                        }
                    }, 
                    "description": "Represents a reference to an entity by uri"
                }
            ]
        }, 
        "FacetValueMap": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/FacetValueMapEntry"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "Constraint": {
            "discriminator": "type", 
            "required": [
                "value"
            ], 
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }
            }
        }, 
        "LayoutReference": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "BooleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "IaasPropertyNameBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CustomValidationConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Expression": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "operator": {
                            "$ref": "#/definitions/CriteriaOperator"
                        }, 
                        "rightOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }, 
                        "leftOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "IntegerLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/integerLiteral"
                }, 
                {
                    "xml": {
                        "name": "integerLiteral"
                    }, 
                    "type": "object", 
                    "description": "Wraps a signed 64-bit integer value."
                }
            ]
        }, 
        "DynamicValueContext": {
            "required": [
                "parameterMappings"
            ], 
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "providerEntityId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "WithinOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DefaultValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "elementValues": {
            "xml": {
                "name": "elementValues"
            }, 
            "type": "object", 
            "properties": {
                "values": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "MaxValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "EntityReferenceDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "xaasComponentOperation": {
            "xml": {
                "name": "xaasComponentOperation"
            }, 
            "required": [
                "inputParameterName", 
                "lifecycleType", 
                "routineId"
            ], 
            "type": "object", 
            "properties": {
                "lifecycleType": {
                    "type": "string"
                }, 
                "inputParameterName": {
                    "type": "string"
                }, 
                "routineId": {
                    "type": "string"
                }
            }
        }, 
        "MonetaryValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "literal"
                    }, 
                    "type": "object", 
                    "properties": {
                        "currencyCode": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The ISO 4217 code used to identify the currency (if any) associated with this value."
                        }
                    }, 
                    "description": "Base type for representing monetary values, encapsulating both some kind of quantity and a currency."
                }
            ]
        }, 
        "PrimitiveDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "typeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "TimeSpan": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "timeSpan"
                    }, 
                    "type": "object", 
                    "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
                }
            ]
        }, 
        "ExternalValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "dynamicValueProviderInfo"
                    ], 
                    "type": "object", 
                    "properties": {
                        "dynamicValueProviderInfo": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "ContainsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DesignerLayoutSection": {
            "type": "object", 
            "properties": {
                "designerHidden": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "rows": {
                    "xml": {
                        "wrapped": true, 
                        "name": "row"
                    }, 
                    "items": {
                        "$ref": "#/definitions/DesignerLayoutRow"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "Field": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "dataType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "permissibleValues": {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                "label": {
                    "type": "string"
                }, 
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "displayAdvice": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "TEXTBOX", 
                        "HYPERLINK", 
                        "EMAIL", 
                        "TEXTAREA", 
                        "DATE_TIME_PICKER", 
                        "CHECKBOX", 
                        "YES_NO", 
                        "CHECKBOX_GROUP", 
                        "DUAL_LIST", 
                        "RADIO_GROUP", 
                        "DROPDOWN", 
                        "LIST", 
                        "SEARCHER", 
                        "TREE", 
                        "FORM", 
                        "IMAGE", 
                        "SLIDER", 
                        "DATA_TABLE", 
                        "VALUE_PICKER"
                    ], 
                    "type": "string"
                }, 
                "orderIndex": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "isMultiValued": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "columns": {
                    "xml": {
                        "wrapped": true, 
                        "name": "column"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "scriptAction": {
            "xml": {
                "name": "scriptAction"
            }, 
            "required": [
                "description", 
                "fqn", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "fqn": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "resultContentType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "resultType": {
                    "type": "string"
                }, 
                "inputParameters": {
                    "items": {
                        "$ref": "#/definitions/scriptActionParameter"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "UnspecifiedEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "integerLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "integerLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "integer", 
                            "description": "The integer value.", 
                            "format": "int64"
                        }
                    }, 
                    "description": "Wraps a signed 64-bit integer value."
                }
            ]
        }, 
        "LessThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "IsDefinedOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Schema": {
            "type": "object", 
            "properties": {
                "fields": {
                    "xml": {
                        "name": "field"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                }
            }
        }, 
        "Sort": {
            "type": "object"
        }, 
        "FieldReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "path": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "LayoutExtension": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "fieldPrefix": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "extensionId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "extensionPointId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "ConditionalEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "cases": {
                            "xml": {
                                "name": "case"
                            }, 
                            "items": {
                                "$ref": "#/definitions/ConditionalEvaluatorCase"
                            }, 
                            "type": "array"
                        }, 
                        "defaulValue": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "MinValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LayoutPlaceholderCell": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutCell"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ReadOnlyConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MultipleEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "items"
                    ], 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "InventoryType": {
            "xml": {
                "name": "InventoryType"
            }, 
            "type": "object", 
            "properties": {
                "pluginType": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "pluginName": {
                    "type": "string"
                }, 
                "properties": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/InventoryTypeProperty"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "LayoutText": {
            "allOf": [
                {
                    "$ref": "#/definitions/LayoutFlowElement"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "state": {
                            "$ref": "#/definitions/ElementState"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "value": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "DesignerLayoutCell": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "FacetValueMapEntry": {
            "type": "object", 
            "properties": {
                "type": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "value": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "LayoutPage": {
            "type": "object", 
            "properties": {
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "sections": {
                    "xml": {
                        "wrapped": true, 
                        "name": "section"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LayoutSection"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "label": {
                    "type": "string"
                }
            }
        }, 
        "formScenario": {
            "xml": {
                "name": "formScenario"
            }, 
            "type": "object", 
            "properties": {
                "scenario": {
                    "$ref": "#/definitions/layoutScenario"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "form": {
                    "$ref": "#/definitions/blueprintForm"
                }
            }
        }, 
        "decimalLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "decimalLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "number", 
                            "description": "The decimal value.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Wraps a decimal value."
                }
            ]
        }, 
        "FormsScope": {
            "required": [
                "level"
            ], 
            "type": "object", 
            "properties": {
                "level": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "CriteriaOperator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "InternalConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "booleanLiteral": {
            "xml": {
                "name": "booleanLiteral"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "value": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "The boolean value."
                }
            }, 
            "description": "Wraps a boolean value."
        }, 
        "Page": {
            "type": "object", 
            "properties": {
                "sort": {
                    "$ref": "#/definitions/Sort"
                }, 
                "last": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "number": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "first": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "content": {
                    "items": {
                        "type": "object"
                    }, 
                    "type": "array"
                }, 
                "totalPages": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "size": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "totalElements": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "numberOfElements": {
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "value": {
            "xml": {
                "name": "value"
            }, 
            "type": "object", 
            "properties": {
                "label": {
                    "type": "string"
                }, 
                "underlyingValue": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "DataType": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "typeId": {
                    "enum": [
                        "STRING", 
                        "INTEGER", 
                        "DECIMAL", 
                        "MONEY", 
                        "MONEY_RANGE", 
                        "MONEY_TIME_RATE", 
                        "BOOLEAN", 
                        "ENTITY_REFERENCE", 
                        "DATE_TIME", 
                        "TIME_SPAN", 
                        "SECURE_STRING", 
                        "COMPLEX"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "EditableBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DynamicPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }, 
                        "context": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "EncryptedBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ObjectDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "label": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "CsParameter": {
            "xml": {
                "namespace": "http://www.vmware.com/vcac/schema/advanced-designer-service/v7.0", 
                "name": "CsParameter"
            }, 
            "type": "object", 
            "properties": {
                "resourceType": {
                    "$ref": "#/definitions/CSResourceType"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "DesignerLayoutRow": {
            "type": "object", 
            "properties": {
                "items": {
                    "xml": {
                        "wrapped": true, 
                        "name": "item"
                    }, 
                    "items": {
                        "$ref": "#/definitions/DesignerLayoutCell"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "CSResourceType": {
            "xml": {
                "namespace": "http://www.vmware.com/vcac/schema/advanced-designer-service/v7.0", 
                "name": "CSResourceType"
            }, 
            "type": "object", 
            "properties": {
                "listLayout": {
                    "$ref": "#/definitions/layout"
                }, 
                "vcoType": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "mappingWorkflowId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "mappingWorkflow": {
                    "$ref": "#/definitions/workflow"
                }, 
                "detailsForm": {
                    "$ref": "#/definitions/formScenario"
                }, 
                "categoryId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "builtIn": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "mappingScriptAction": {
                    "$ref": "#/definitions/scriptAction"
                }, 
                "tenantId": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "access": {
                    "type": "string"
                }, 
                "reservationTypeId": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "providerId": {
                    "minLength": 1, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "version": {
                    "$ref": "#/definitions/Version"
                }, 
                "externalTypeName": {
                    "type": "string"
                }, 
                "targetCriteria": {
                    "$ref": "#/definitions/Clause"
                }, 
                "externalTypeId": {
                    "type": "string"
                }, 
                "id": {
                    "$ref": "#/definitions/TenantedUuid"
                }, 
                "mappingScriptActionFqn": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "MinLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }
    }, 
    "swagger": "2.0"
}