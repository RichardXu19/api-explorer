{
    "info": {
        "version": "7.3.0-SNAPSHOT", 
        "description": "# Orchestration Gateway Service API Specification", 
        "title": "Orchestration (o11n) Gateway Service API"
    }, 
    "paths": {
        "/api/tenants/{tenantId}/actions/{categoryName}/{actionName}/execute": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the run request id", 
                        "schema": {
                            "$ref": "#/definitions/literal"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the category name", 
                        "required": true, 
                        "type": "string", 
                        "name": "categoryName", 
                        "in": "path"
                    }, 
                    {
                        "description": "the action name", 
                        "required": true, 
                        "type": "string", 
                        "name": "actionName", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/literalMap"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "run", 
                    "o11nAction"
                ], 
                "description": "Executes synchronously script action.", 
                "summary": "execute script action", 
                "operationId": "executeAction"
            }
        }, 
        "/api/tenants/{tenantId}/metadata/{endpointName}/{type}/schema": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the inventory type Schema", 
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no o11nEndpointMetadata with provided endpointName in requested tenant"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "endpointName", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "type", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "endpointMetadata", 
                    "inventoryType", 
                    "schema"
                ], 
                "description": "Get inventory type schema for the given endpointName and type in provided tenantId.", 
                "summary": "Get Inventory type schema", 
                "operationId": "getInventoryTypeSchema"
            }
        }, 
        "/api/tenants/{tenantId}/metadata/{endpointName}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the o11nEndpointMetadata", 
                        "schema": {
                            "$ref": "#/definitions/o11n-endpointMetadata"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no o11nEndpointMetadata with provided endpointName in requested tenant"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "endpointName", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "endpointMetadata"
                ], 
                "description": "Get endpoint metadata for given endpointName in provided tenantId.", 
                "summary": "Get endpoint metadata for given endpointName", 
                "operationId": "findPluginMetadata"
            }
        }, 
        "/api/tenants/{tenantId}/configurations/default/status": {
            "put": {
                "responses": {
                    "200": {
                        "description": "'Success' with the ConfigurationStatus", 
                        "schema": {
                            "enum": [
                                "SUCCESS", 
                                "FAILURE", 
                                "FAILURE_VCO_NO_ENDPOINT", 
                                "FAILURE_VCO_CONNECTION_FAILURE", 
                                "FAILURE_VCO_CONNECTION_TIMEOUT", 
                                "FAILURE_VCO_CONNECTION_FAILURE_UNTRUSTED_CERTIFICATE", 
                                "FAILURE_BAD_CREDENTIALS", 
                                "FAILURE_UNKNOWN_HOST", 
                                "FAILURE_BAD_PORT", 
                                "FAILURE_NO_SSO_AUTHENTICATION"
                            ], 
                            "type": "string"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "test", 
                    "default", 
                    "orchestrationConfiguration"
                ], 
                "description": "test connectivity to default vRO for the given tenant.", 
                "summary": "test default orchestrationConfiguration for tenant", 
                "operationId": "testDefaultConfiguration"
            }
        }, 
        "/api/tenants/{tenantId}/metadata/{endpointName}/{type}/icon": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the inventory type icon", 
                        "schema": {
                            "$ref": "#/definitions/O11nIcon"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no o11nEndpointMetadata with provided endpointName in requested tenant"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "endpointName", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "type", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "endpointMetadata", 
                    "inventoryType", 
                    "icon"
                ], 
                "description": "Get inventory type icon for the given endpointName and type in provided tenantId.", 
                "summary": "Get Inventory type icon", 
                "operationId": "getInventoryTypeIcon"
            }
        }, 
        "/api/tenants/{tenantId}/requests/{requestId}/logs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the logs", 
                        "schema": {
                            "$ref": "#/definitions/o11n-logs"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no runRequest with provided requestId"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the request id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "requestId"
                    }
                ], 
                "tags": [
                    "get", 
                    "run-request", 
                    "log"
                ], 
                "description": "Retrieves a run logs for a given request id.", 
                "summary": "Get run logs", 
                "operationId": "getRunStateLogs"
            }
        }, 
        "/api/tenants/{tenantId}/actions/{categoryName}/{name}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the o11nAction", 
                        "schema": {
                            "$ref": "#/definitions/o11n-action"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no o11nAction for provided input"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the parent category name", 
                        "required": true, 
                        "type": "string", 
                        "name": "categoryName", 
                        "in": "path"
                    }, 
                    {
                        "description": "the o11nAction", 
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "o11nAction"
                ], 
                "description": "Get o11nAction by given category name and action name for tenant.", 
                "summary": "Get o11nAction", 
                "operationId": "getO11nAction"
            }
        }, 
        "/api/tenants/{tenantId}/requests/correlation/{correlationType}/{correlationId}/info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the runInfo", 
                        "schema": {
                            "$ref": "#/definitions/routineRunInfo"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no runInfo with provided requestId"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the correlation type", 
                        "required": true, 
                        "type": "string", 
                        "name": "correlationType", 
                        "in": "path"
                    }, 
                    {
                        "description": "the correlation id", 
                        "required": true, 
                        "type": "string", 
                        "name": "correlationId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "run-request"
                ], 
                "description": "Retrieves a run information for the given correlation type and id.", 
                "summary": "Get run info", 
                "operationId": "getRoutineRunInfoWithCorrelation"
            }
        }, 
        "/api/tenants/{tenantId}/requests/{requestId}/info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the runInfo", 
                        "schema": {
                            "$ref": "#/definitions/routineRunInfo"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no runInfo with provided requestId"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the request id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "requestId"
                    }
                ], 
                "tags": [
                    "get", 
                    "run-request"
                ], 
                "description": "Retrieves a run information for a given request id.", 
                "summary": "Get run info", 
                "operationId": "getRoutineRunInfo"
            }
        }, 
        "/api/tenants/{tenantId}/categories/workflows": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the root workflowCategory", 
                        "schema": {
                            "$ref": "#/definitions/o11n-workflowCategory"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "workflow", 
                    "root", 
                    "category"
                ], 
                "description": "Get the root category for the given tenantId.", 
                "summary": "get root category for given tenant", 
                "operationId": "getWorklfowsRootCategory"
            }
        }, 
        "/api/tenants/{tenantId}/categories/workflows/{categoryId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the workflowCategory", 
                        "schema": {
                            "$ref": "#/definitions/o11n-workflowCategory"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "pattern": ".+$", 
                        "required": true, 
                        "type": "string", 
                        "name": "categoryId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "workflow", 
                    "category"
                ], 
                "description": "Get a category by parent category id for requested tenantId.", 
                "summary": "get category by parent category id in tenant", 
                "operationId": "getWorkflowCategory"
            }
        }, 
        "/api/tenants/{tenantId}/requests/{requestId}/result": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the runResult", 
                        "schema": {
                            "$ref": "#/definitions/routineRunRunResult"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no runResult with provided requestId"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the request id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "requestId"
                    }
                ], 
                "tags": [
                    "get", 
                    "run-request"
                ], 
                "description": "Retrieves a run result for a given request id.", 
                "summary": "Get run result", 
                "operationId": "getRoutineRunResult"
            }
        }, 
        "/api/tenants/{tenantId}/configurations/default": {
            "put": {
                "responses": {
                    "200": {
                        "description": "'Success' with the orchestrationConfiguration", 
                        "schema": {
                            "$ref": "#/definitions/o11n-configuration"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "default", 
                    "orchestrationConfiguration"
                ], 
                "description": "Set the default/embedded orchestrationConfiguration for the given tenant.", 
                "summary": "Set default orchestrationConfiguration for tenant", 
                "operationId": "useDefault"
            }
        }, 
        "/api/tenants/{tenantId}/package/import": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the string value 'SUCCESS' in case of success", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "'Bad Request' in case of error"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "name": "fileupload", 
                        "in": "formData"
                    }
                ], 
                "tags": [
                    "import", 
                    "package"
                ], 
                "description": "Import package in vCO. Operation will succeed even in case the prerequisites for the content to import are not presented.", 
                "summary": "Import package", 
                "operationId": "importPackage"
            }
        }, 
        "/api/tenants/{tenantId}/metadata/types": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the inventory type Schema", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/o11n-inventoryType"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "endpointType", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "typeName", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "name": "includeSimpleTypes", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get", 
                    "endpointMetadata", 
                    "inventoryType"
                ], 
                "description": "Get inventory types in the provided tenantId, according to filter criteria .", 
                "summary": "Get Inventory types", 
                "operationId": "getInventoryTypes"
            }
        }, 
        "/api/tenants/{tenantId}/inventory/objectUri/{objectUri}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the o11n-inventoryResource", 
                        "schema": {
                            "$ref": "#/definitions/o11n-inventoryResource"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no o11n-inventoryResource with requested parameters"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "objectUri", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "inventory", 
                    "inventoryResource"
                ], 
                "description": "Get inventory resource by provided objectUri in given tenant.", 
                "summary": "Get inventory resource by objectUri in given tenant", 
                "operationId": "findInventoryResourceByObjectUri"
            }
        }, 
        "/api/tenants/{tenantId}/actions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "successful operation", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/o11n-action"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "name", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "categoryName", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "description", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "search", 
                    "o11nAction"
                ], 
                "description": "Searches for o11nAction by containment of name, description and categoryName", 
                "summary": "Search for o11nAction", 
                "operationId": "findO11nActions"
            }
        }, 
        "/api/tenants/{tenantId}/metadata": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with collection of names", 
                        "schema": {
                            "$ref": "#/definitions/entities"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "endpointMetadata"
                ], 
                "description": "Get endpoint names in given tenant.", 
                "summary": "Get endpoint names in given tenant", 
                "operationId": "getPluginNames"
            }
        }, 
        "/api/tenants/{tenantId}/configurations/status": {
            "put": {
                "responses": {
                    "200": {
                        "description": "'Success' with the ConfigurationStatus", 
                        "schema": {
                            "enum": [
                                "SUCCESS", 
                                "FAILURE", 
                                "FAILURE_VCO_NO_ENDPOINT", 
                                "FAILURE_VCO_CONNECTION_FAILURE", 
                                "FAILURE_VCO_CONNECTION_TIMEOUT", 
                                "FAILURE_VCO_CONNECTION_FAILURE_UNTRUSTED_CERTIFICATE", 
                                "FAILURE_BAD_CREDENTIALS", 
                                "FAILURE_UNKNOWN_HOST", 
                                "FAILURE_BAD_PORT", 
                                "FAILURE_NO_SSO_AUTHENTICATION"
                            ], 
                            "type": "string"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/o11n-configuration"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "test", 
                    "orchestrationConfiguration"
                ], 
                "description": "test connectivity to vRO according to the given orchestrationConfiguration for the given tenant.", 
                "summary": "test orchestrationConfiguration for tenant", 
                "operationId": "testConfiguration"
            }
        }, 
        "/api/tenants/{tenantId}/metadata/{endpointName}/{type}/values": {
            "post": {
                "responses": {
                    "200": {
                        "description": "'Success' with the values", 
                        "schema": {
                            "$ref": "#/definitions/elementValues"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "endpointName", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "type", 
                        "in": "path"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "name": "asTree", 
                        "in": "query"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/elementValuesRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "get", 
                    "endpointMetadata", 
                    "inventoryType", 
                    "values"
                ], 
                "description": "Get permissible values for inventory type from given endpoint in provided tenantId.", 
                "summary": "Get permissible values", 
                "operationId": "getFieldValues"
            }
        }, 
        "/api/tenants/{tenantId}/workflows/{workflowId}": {
            "post": {
                "responses": {
                    "201": {
                        "description": "'Success' with the run request id", 
                        "schema": {
                            "type": "string"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the workflow id", 
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/routineRunRequest"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "run", 
                    "workflow"
                ], 
                "description": "Request workflow, by given workflowId, to run by the vRO configured for the current tenant.", 
                "summary": "Request workflow to run", 
                "operationId": "runWorkflow"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the workflow", 
                        "schema": {
                            "$ref": "#/definitions/o11n-workflow"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no workflow with provided workflowId in current tenant"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the workflow id", 
                        "required": true, 
                        "type": "string", 
                        "name": "workflowId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "workflow"
                ], 
                "description": "Get workflow by given workflowId from the vRO configured for the current tenant.", 
                "summary": "Get workflow", 
                "operationId": "getWorkflowById"
            }
        }, 
        "/api/tenants/{tenantId}/configurations": {
            "put": {
                "responses": {
                    "200": {
                        "description": "'Success' with the orchestrationConfiguration", 
                        "schema": {
                            "$ref": "#/definitions/o11n-configuration"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/o11n-configuration"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "create", 
                    "update", 
                    "orchestrationConfiguration"
                ], 
                "description": "Create or Update orchestrationConfiguration for the given tenant.", 
                "summary": "Create or Update orchestrationConfiguration in tenant", 
                "operationId": "createOrUpdate"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the orchestrationConfiguration", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/o11n-configuration"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no orchestrationConfiguration with provided configurationId"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "orchestrationConfiguration"
                ], 
                "description": "Get the orchestrationConfiguration for the given tenant.", 
                "summary": "Get orchestrationConfiguration in tenant", 
                "operationId": "getConfigurations"
            }
        }, 
        "/api/tenants/{tenantId}/inventory/catalog/{namespace}/{vcoType}/{vcoId}/tags": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'The Request is successful", 
                        "schema": {
                            "$ref": "#/definitions/o11n-tagInstanceList"
                        }
                    }, 
                    "401": {
                        "description": "'User is not authorized"
                    }
                }, 
                "parameters": [
                    {
                        "description": "The tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "The name of the plugin", 
                        "required": true, 
                        "type": "string", 
                        "name": "namespace", 
                        "in": "path"
                    }, 
                    {
                        "description": "String representation of a type registered in vRO.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vcoType", 
                        "in": "path"
                    }, 
                    {
                        "description": "The id of the VCO Onject", 
                        "required": true, 
                        "type": "string", 
                        "name": "vcoId", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "catalog"
                ], 
                "description": "Get tags of the object in the VCO for given vcoId", 
                "summary": "List Tags for the Given Inventory Resource", 
                "operationId": "findObjectTags"
            }
        }, 
        "/api/tenants/{tenantId}/configurations/certificate": {
            "put": {
                "responses": {
                    "200": {
                        "description": ""
                    }
                }, 
                "summary": "Gets a certificate", 
                "description": "Gets a certificate for the given configuration", 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/o11n-configuration"
                        }, 
                        "required": true, 
                        "name": "body", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "get-operation"
                ]
            }
        }, 
        "/api/tenants/{tenantId}/requests/{requestId}/cancel": {
            "patch": {
                "responses": {
                    "204": {
                        "description": "'No Content' is returned on successful cancel."
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the request id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "requestId"
                    }
                ], 
                "tags": [
                    "cancel", 
                    "run-request"
                ], 
                "description": "Cancels run result for the given request id.", 
                "summary": "Cancel run request", 
                "operationId": "cancelRunRequest"
            }
        }, 
        "/api/tenants/{tenantId}/inventory/{vcoType}/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the o11n-inventoryResource", 
                        "schema": {
                            "$ref": "#/definitions/o11n-inventoryResource"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no o11n-inventoryResource with requested parameters"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "vcoType", 
                        "in": "path"
                    }, 
                    {
                        "pattern": ".+$", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "get", 
                    "inventory", 
                    "inventoryResource"
                ], 
                "description": "Get inventory resource by provided vcoType and id in given tenant.", 
                "summary": "Get inventory resource by provided vcoType and id in given tenant", 
                "operationId": "findInventoryResource"
            }
        }, 
        "/api/tenants/{tenantId}/inventory/{vcoType}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with list of o11n-inventoryResource", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/o11n-inventoryResource"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "vcoType", 
                        "in": "path"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "criteria", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "get", 
                    "inventory", 
                    "inventoryResource"
                ], 
                "description": "Get inventory resources by provided vcoType in given tenant. Additional ciretira could be supplied to narrow down the response", 
                "summary": "Get inventory resources by provided vcoType in given tenant", 
                "operationId": "findInventoryResources"
            }
        }, 
        "/api/tenants/{tenantId}/configurations/{configurationId}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "'No Content' is returned on successful delete."
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the configuration id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "configurationId"
                    }
                ], 
                "tags": [
                    "orchestrationConfiguration", 
                    "delete"
                ], 
                "description": "Delete orchestrationConfiguration. Only Solution user, system and tenant admins can delete orchestrationConfigurations.", 
                "summary": "Delete orchestrationConfiguration", 
                "operationId": "deleteConfiguration"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "'Success' with the orchestrationConfiguration", 
                        "schema": {
                            "$ref": "#/definitions/o11n-configuration"
                        }
                    }, 
                    "404": {
                        "description": "'Not found' if no orchestrationConfiguration with provided configurationId"
                    }
                }, 
                "parameters": [
                    {
                        "description": "the tenant id", 
                        "required": true, 
                        "type": "string", 
                        "name": "tenantId", 
                        "in": "path"
                    }, 
                    {
                        "description": "the configuration id", 
                        "format": "uuid", 
                        "required": true, 
                        "in": "path", 
                        "type": "string", 
                        "name": "configurationId"
                    }
                ], 
                "tags": [
                    "get", 
                    "orchestrationConfiguration"
                ], 
                "description": "Get orchestrationConfiguration by given configurationId in specified tenantId.", 
                "summary": "Get orchestrationConfiguration", 
                "operationId": "getConfiguration"
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "tags": [
        {
            "name": "cancel"
        }, 
        {
            "name": "catalog"
        }, 
        {
            "name": "category"
        }, 
        {
            "name": "create"
        }, 
        {
            "name": "default"
        }, 
        {
            "name": "delete"
        }, 
        {
            "name": "endpointMetadata"
        }, 
        {
            "name": "get"
        }, 
        {
            "name": "get-operation"
        }, 
        {
            "name": "icon"
        }, 
        {
            "name": "import"
        }, 
        {
            "name": "inventory"
        }, 
        {
            "name": "inventoryResource"
        }, 
        {
            "name": "inventoryType"
        }, 
        {
            "name": "log"
        }, 
        {
            "name": "o11nAction"
        }, 
        {
            "name": "orchestrationConfiguration"
        }, 
        {
            "name": "package"
        }, 
        {
            "name": "presentation"
        }, 
        {
            "name": "root"
        }, 
        {
            "name": "routine"
        }, 
        {
            "name": "run"
        }, 
        {
            "name": "run-request"
        }, 
        {
            "name": "schema"
        }, 
        {
            "name": "search"
        }, 
        {
            "name": "test"
        }, 
        {
            "name": "update"
        }, 
        {
            "name": "values"
        }, 
        {
            "name": "workflow"
        }
    ], 
    "basePath": "/o11n-gateway-service", 
    "definitions": {
        "ConstantValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/literal"
                        }
                    }
                }
            ]
        }, 
        "GreaterThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NotEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "complexLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "complexLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's class."
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component type."
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The type filter for this literal."
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier for this literal's component."
                        }, 
                        "values": {
                            "description": "Map of values, keyed by the field ids of some complex type.", 
                            "$ref": "#/definitions/literalMap"
                        }
                    }, 
                    "description": "A complex value composed of multiple values keyed by the field ids of some complex type."
                }
            ]
        }, 
        "ParameterMapping": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "SubsetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "moneyRange": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRange"
                    }, 
                    "type": "object", 
                    "properties": {
                        "maxValue": {
                            "type": "number", 
                            "description": "The upper limit of the range.", 
                            "format": "double"
                        }, 
                        "minValue": {
                            "type": "number", 
                            "description": "The lower limit of the range.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a range of money values, between some defined minimums and maximums."
                }
            ]
        }, 
        "EndsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "VisibilityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ParameterMappingCollection": {
            "type": "object", 
            "properties": {
                "params": {
                    "xml": {
                        "wrapped": true, 
                        "name": "param"
                    }, 
                    "items": {
                        "$ref": "#/definitions/ParameterMapping"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "DisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "booleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "default": false, 
                            "type": "boolean", 
                            "description": "The boolean value."
                        }
                    }, 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "entities": {
            "xml": {
                "name": "entities"
            }, 
            "type": "object", 
            "properties": {
                "content": {
                    "xml": {
                        "wrapped": true
                    }, 
                    "items": {
                        "type": "object"
                    }, 
                    "type": "array"
                }, 
                "links": {
                    "xml": {
                        "wrapped": true, 
                        "name": "links"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Link"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "money": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "money"
                    }, 
                    "type": "object", 
                    "properties": {
                        "amount": {
                            "type": "number", 
                            "description": "The amount associated with this value (with no specific currency).", 
                            "format": "double"
                        }
                    }, 
                    "description": "Represents a single, precise monetary value."
                }
            ]
        }, 
        "OrClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "o11n-actionParameter": {
            "xml": {
                "name": "o11n-actionParameter"
            }, 
            "required": [
                "name", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "type": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "moneyTimeRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyTimeRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "basis": {
                            "description": "The span of time to calculate the rate of money for.", 
                            "$ref": "#/definitions/timeSpan"
                        }
                    }, 
                    "description": "Represents a rate of money over time."
                }
            ]
        }, 
        "UniqueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "stringLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "stringLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a String value."
                }
            ]
        }, 
        "entityRef": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRef"
                    }, 
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The identifier of the type or category to which the referenced entity belongs."
                        }, 
                        "label": {
                            "type": "string"
                        }, 
                        "id": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The unique identifier of the referenced entity, encoded as a string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
                        }
                    }, 
                    "description": "Represents a reference to an entity defined somewhere in the suite."
                }
            ]
        }, 
        "CallbackEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ElementState": {
            "type": "object", 
            "properties": {
                "facets": {
                    "xml": {
                        "wrapped": true, 
                        "name": "facet"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Constraint"
                    }, 
                    "type": "array"
                }, 
                "dependencies": {
                    "xml": {
                        "wrapped": true, 
                        "name": "dependency"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "type": "string"
                    }
                }
            }
        }, 
        "Clause": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "O11nIcon": {
            "type": "object", 
            "properties": {
                "data": {
                    "items": {
                        "type": "string", 
                        "format": "byte"
                    }, 
                    "type": "array"
                }, 
                "href": {
                    "type": "string"
                }, 
                "contentType": {
                    "type": "string"
                }
            }
        }, 
        "ComplexEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "values": {
                            "additionalProperties": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "object"
                        }
                    }
                }
            ]
        }, 
        "StartsWithOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LessThanOrEqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "multipleLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "multipleLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "xml": {
                                "name": "item"
                            }, 
                            "items": {
                                "$ref": "#/definitions/literal"
                            }, 
                            "type": "array", 
                            "description": "The list of specified values. NOTE: All values must be of the same data type."
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string", 
                            "description": "The data type of the items in the list."
                        }
                    }, 
                    "description": "A literal which represents multiple values. All of these component values must be of the same data type."
                }
            ]
        }, 
        "ContextPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaxLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "o11n-workflowParameter": {
            "xml": {
                "name": "o11n-workflowParameter"
            }, 
            "required": [
                "name", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "parameterType": {
                    "minLength": 0, 
                    "enum": [
                        "DEFAULT", 
                        "CUSTOM"
                    ], 
                    "type": "string", 
                    "description": "Workflow parameter type", 
                    "maxLength": 255
                }, 
                "type": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "Workflow parameter value type", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "Workflow parameter name", 
                    "maxLength": 255
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "Workflow parameter description", 
                    "maxLength": 2000
                }
            }, 
            "description": "Represents a Workflow parameter"
        }, 
        "RefreshOnChangeBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SkipExportBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "o11n-action": {
            "xml": {
                "name": "o11n-action"
            }, 
            "required": [
                "description", 
                "fqn", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "fqn": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 2000
                }, 
                "resultContentType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "resultType": {
                    "type": "string"
                }, 
                "inputParameters": {
                    "items": {
                        "$ref": "#/definitions/o11n-actionParameter"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "maxLength": 255
                }
            }
        }, 
        "FixedValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "value": {
            "xml": {
                "name": "value"
            }, 
            "type": "object", 
            "properties": {
                "label": {
                    "type": "string"
                }, 
                "underlyingValue": {
                    "$ref": "#/definitions/literal"
                }
            }
        }, 
        "CoalesceEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "moneyRate": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "moneyRate"
                    }, 
                    "type": "object", 
                    "properties": {
                        "cost": {
                            "description": "The cost (including optional currency code).", 
                            "$ref": "#/definitions/literal"
                        }
                    }, 
                    "description": "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB."
                }
            ]
        }, 
        "secureString": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "secureString"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The string value."
                        }
                    }, 
                    "description": "Wraps a secured string value, such as a password."
                }
            ]
        }, 
        "ComplexDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                }
            ]
        }, 
        "Link": {
            "type": "object", 
            "properties": {
                "href": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "rel": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "PermissibleValueList": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "customAllowed": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "Evaluator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "ConstantClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/booleanLiteral"
                        }
                    }
                }
            ]
        }, 
        "literalMap": {
            "xml": {
                "name": "literalMap"
            }, 
            "type": "object", 
            "properties": {
                "entries": {
                    "xml": {
                        "name": "entry"
                    }, 
                    "items": {
                        "$ref": "#/definitions/LiteralMapEntry"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Equivalent of java.util.Map"
        }, 
        "o11n-workflowCategory": {
            "xml": {
                "name": "o11n-workflowCategory"
            }, 
            "required": [
                "id", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "workflows": {
                    "items": {
                        "$ref": "#/definitions/o11n-workflow"
                    }, 
                    "type": "array", 
                    "description": "Children Workflows"
                }, 
                "id": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "Workflow category id", 
                    "maxLength": 255
                }, 
                "categories": {
                    "items": {
                        "$ref": "#/definitions/o11n-workflowCategory"
                    }, 
                    "type": "array", 
                    "description": "Children Workflow categories"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "Workflow category name", 
                    "maxLength": 255
                }
            }, 
            "description": "Represents a Workflow category"
        }, 
        "o11n-inventoryTypeProperty": {
            "xml": {
                "name": "o11n-inventoryTypeProperty"
            }, 
            "type": "object", 
            "properties": {
                "displayName": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }
            }
        }, 
        "elementValuesRequest": {
            "xml": {
                "name": "elementValuesRequest"
            }, 
            "type": "object", 
            "properties": {
                "text": {
                    "type": "string"
                }, 
                "userId": {
                    "type": "string"
                }, 
                "associateValue": {
                    "$ref": "#/definitions/literal"
                }, 
                "headers": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "pagingInfo": {
                    "$ref": "#/definitions/ElementValuesPagingInfo"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "dependencyValues": {
                    "$ref": "#/definitions/literalMap"
                }
            }
        }, 
        "o11n-tagInstanceList": {
            "xml": {
                "name": "o11n-tagInstanceList"
            }, 
            "type": "object", 
            "properties": {
                "userTags": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object"
                }, 
                "globalTags": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object"
                }, 
                "id": {
                    "type": "string"
                }
            }
        }, 
        "MinimumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "StaticPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "values": {
                            "xml": {
                                "name": "value"
                            }, 
                            "items": {
                                "$ref": "#/definitions/value"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "MandatoryConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MaximumValueEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "arguments": {
                            "xml": {
                                "wrapped": true, 
                                "name": "argument"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "routineRunRequest": {
            "xml": {
                "name": "routineRunRequest"
            }, 
            "type": "object", 
            "properties": {
                "callbackServiceId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "service id to callback on routine run complete/fail"
                }, 
                "description": {
                    "type": "string", 
                    "description": "human readable description for the routine run request"
                }, 
                "requestData": {
                    "description": "optional request data to pass as input when call the routine", 
                    "$ref": "#/definitions/literalMap"
                }, 
                "requestHeader": {
                    "description": "optional request header to pass to the service which is going to call the routine", 
                    "$ref": "#/definitions/literalMap"
                }, 
                "correlation": {
                    "description": "correlation", 
                    "$ref": "#/definitions/routineRunCorrelation"
                }, 
                "requestedBy": {
                    "type": "string", 
                    "description": "name/id of the user requested the routine run"
                }
            }, 
            "description": "Represents a Routine run request"
        }, 
        "o11n-workflow": {
            "xml": {
                "name": "o11n-workflow"
            }, 
            "required": [
                "description", 
                "id", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "outputParameters": {
                    "items": {
                        "$ref": "#/definitions/o11n-workflowParameter"
                    }, 
                    "type": "array", 
                    "description": "Workflow output parameters"
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "Workflow description", 
                    "maxLength": 2000
                }, 
                "inputParameters": {
                    "items": {
                        "$ref": "#/definitions/o11n-workflowParameter"
                    }, 
                    "type": "array", 
                    "description": "Workflow input parameters"
                }, 
                "id": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "Workflow id", 
                    "maxLength": 255
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "Workflow name", 
                    "maxLength": 255
                }
            }, 
            "description": "Represents a Workflow definition"
        }, 
        "RegexpConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "errorMessage": {
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "WrapperClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "o11n-configurationCertificateInfo": {
            "xml": {
                "name": "o11n-configurationCertificateInfo"
            }, 
            "type": "object", 
            "properties": {
                "certificateInfo": {
                    "$ref": "#/definitions/CertificateInfo"
                }, 
                "configurationStatus": {
                    "enum": [
                        "SUCCESS", 
                        "FAILURE", 
                        "FAILURE_VCO_NO_ENDPOINT", 
                        "FAILURE_VCO_CONNECTION_FAILURE", 
                        "FAILURE_VCO_CONNECTION_TIMEOUT", 
                        "FAILURE_VCO_CONNECTION_FAILURE_UNTRUSTED_CERTIFICATE", 
                        "FAILURE_BAD_CREDENTIALS", 
                        "FAILURE_UNKNOWN_HOST", 
                        "FAILURE_BAD_PORT", 
                        "FAILURE_NO_SSO_AUTHENTICATION"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "routineRunRunResult": {
            "xml": {
                "name": "routineRunRunResult"
            }, 
            "type": "object", 
            "properties": {
                "resultData": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "createDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "runStatus": {
                    "enum": [
                        "CANCELED", 
                        "COMPLETED", 
                        "RUNNING", 
                        "SUSPENDED", 
                        "WAITING", 
                        "WAITING_SIGNAL", 
                        "FAILED", 
                        "INITIALIZING"
                    ], 
                    "type": "string"
                }, 
                "completeDate": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "format": "date-time"
                }, 
                "requestId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "correlation": {
                    "$ref": "#/definitions/routineRunCorrelation"
                }, 
                "resultHeader": {
                    "$ref": "#/definitions/literalMap"
                }, 
                "requestedBy": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "runDetails": {
                    "type": "string"
                }
            }, 
            "description": "Represents a Routine run result"
        }, 
        "GreaterThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LiteralMapEntry": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/literal"
                }, 
                "key": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "ResetValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "dateTimeLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "dateTimeLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "string", 
                            "description": "The date.", 
                            "format": "date-time"
                        }
                    }, 
                    "description": "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class."
                }
            ]
        }, 
        "IncrementBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "AndClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClauses": {
                            "xml": {
                                "name": "clause"
                            }, 
                            "items": {
                                "$ref": "#/definitions/Clause"
                            }, 
                            "type": "array"
                        }
                    }
                }
            ]
        }, 
        "CustomPropertyDefinitionMetadata": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "required": [
                        "field"
                    ], 
                    "type": "object", 
                    "properties": {
                        "field": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                }
            ]
        }, 
        "EqualsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NullDisplayTextBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "SupersetOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "NotClause": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "subClause": {
                            "$ref": "#/definitions/Clause"
                        }
                    }
                }
            ]
        }, 
        "routineRunCorrelation": {
            "xml": {
                "name": "routineRunCorrelation"
            }, 
            "required": [
                "correlationId", 
                "correlationType"
            ], 
            "type": "object", 
            "properties": {
                "correlationType": {
                    "type": "string"
                }, 
                "correlationId": {
                    "type": "string"
                }
            }, 
            "description": "Represents a Routine run correlation"
        }, 
        "ConditionalEvaluatorCase": {
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }, 
                "condition": {
                    "$ref": "#/definitions/Clause"
                }
            }
        }, 
        "literal": {
            "xml": {
                "name": "literal"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "description": "Wraps a value such that values of different types can be treated generically."
        }, 
        "CertificateInfo": {
            "type": "object", 
            "properties": {
                "notValidAfter": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "notValidBefore": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "principalName": {
                    "type": "string"
                }, 
                "thumbprint": {
                    "type": "string"
                }, 
                "issuerName": {
                    "type": "string"
                }, 
                "identityCertificateExists": {
                    "default": false, 
                    "type": "boolean"
                }
            }
        }, 
        "entityRefEx": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "entityRefEx"
                    }, 
                    "type": "object", 
                    "properties": {
                        "href": {
                            "type": "string", 
                            "description": "the Href"
                        }
                    }, 
                    "description": "Represents a reference to an entity by uri"
                }
            ]
        }, 
        "Constraint": {
            "discriminator": "type", 
            "required": [
                "value"
            ], 
            "type": "object", 
            "properties": {
                "value": {
                    "$ref": "#/definitions/Evaluator"
                }
            }
        }, 
        "BooleanLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "booleanLiteral"
                    }, 
                    "type": "object", 
                    "description": "Wraps a boolean value."
                }
            ]
        }, 
        "IaasPropertyNameBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "CustomValidationConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Expression": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "operator": {
                            "$ref": "#/definitions/CriteriaOperator"
                        }, 
                        "rightOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }, 
                        "leftOperand": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "ElementValuesPagingInfo": {
            "type": "object", 
            "properties": {
                "count": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "offset": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }
            }
        }, 
        "DynamicValueContext": {
            "required": [
                "parameterMappings"
            ], 
            "type": "object", 
            "properties": {
                "parameterMappings": {
                    "$ref": "#/definitions/ParameterMappingCollection"
                }, 
                "providerEntityId": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }
            }
        }, 
        "WithinOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DefaultValueBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "routineRunInfo": {
            "xml": {
                "name": "routineRunInfo"
            }, 
            "required": [
                "id"
            ], 
            "type": "object", 
            "properties": {
                "traceId": {
                    "type": "string"
                }, 
                "routineRunStatus": {
                    "enum": [
                        "CANCELED", 
                        "COMPLETED", 
                        "RUNNING", 
                        "SUSPENDED", 
                        "WAITING", 
                        "WAITING_SIGNAL", 
                        "FAILED", 
                        "INITIALIZING"
                    ], 
                    "type": "string"
                }, 
                "routineId": {
                    "type": "string"
                }, 
                "tenantId": {
                    "type": "string"
                }, 
                "executionId": {
                    "type": "string"
                }, 
                "correlation": {
                    "$ref": "#/definitions/routineRunCorrelation"
                }, 
                "id": {
                    "type": "string", 
                    "format": "uuid"
                }
            }, 
            "description": "Represents a Routine run information"
        }, 
        "elementValues": {
            "xml": {
                "name": "elementValues"
            }, 
            "type": "object", 
            "properties": {
                "values": {
                    "xml": {
                        "wrapped": true, 
                        "name": "value"
                    }, 
                    "items": {
                        "$ref": "#/definitions/value"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "MaxValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "EntityReferenceDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "o11n-inventoryResource": {
            "xml": {
                "name": "o11n-inventoryResource"
            }, 
            "type": "object", 
            "properties": {
                "additionalAttributes": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object"
                }, 
                "pluginType": {
                    "type": "string"
                }, 
                "displayName": {
                    "type": "string"
                }, 
                "pluginName": {
                    "type": "string"
                }, 
                "href": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }
            }
        }, 
        "MonetaryValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "literal"
                    }, 
                    "type": "object", 
                    "properties": {
                        "currencyCode": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string", 
                            "description": "The ISO 4217 code used to identify the currency (if any) associated with this value."
                        }
                    }, 
                    "description": "Base type for representing monetary values, encapsulating both some kind of quantity and a currency."
                }
            ]
        }, 
        "PrimitiveDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "typeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "TimeSpan": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "timeSpan"
                    }, 
                    "type": "object", 
                    "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
                }
            ]
        }, 
        "ExternalValue": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "dynamicValueProviderInfo"
                    ], 
                    "type": "object", 
                    "properties": {
                        "dynamicValueProviderInfo": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "ContainsOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Field": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "dataType": {
                    "$ref": "#/definitions/DataType"
                }, 
                "permissibleValues": {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                "label": {
                    "type": "string"
                }, 
                "state": {
                    "$ref": "#/definitions/ElementState"
                }, 
                "displayAdvice": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "TEXTBOX", 
                        "HYPERLINK", 
                        "EMAIL", 
                        "TEXTAREA", 
                        "DATE_TIME_PICKER", 
                        "CHECKBOX", 
                        "YES_NO", 
                        "CHECKBOX_GROUP", 
                        "DUAL_LIST", 
                        "RADIO_GROUP", 
                        "DROPDOWN", 
                        "LIST", 
                        "SEARCHER", 
                        "TREE", 
                        "FORM", 
                        "IMAGE", 
                        "SLIDER", 
                        "DATA_TABLE", 
                        "VALUE_PICKER"
                    ], 
                    "type": "string"
                }, 
                "orderIndex": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "isMultiValued": {
                    "xml": {
                        "attribute": true
                    }, 
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string"
                }, 
                "columns": {
                    "xml": {
                        "wrapped": true, 
                        "name": "column"
                    }, 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "UnspecifiedEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "LessThanOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "IsDefinedOperator": {
            "allOf": [
                {
                    "$ref": "#/definitions/CriteriaOperator"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "Schema": {
            "type": "object", 
            "properties": {
                "fields": {
                    "xml": {
                        "name": "field"
                    }, 
                    "uniqueItems": true, 
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                }
            }
        }, 
        "o11n-logEntry": {
            "xml": {
                "name": "o11n-logEntry"
            }, 
            "type": "object", 
            "properties": {
                "short-description": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "short description"
                }, 
                "timestamp": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "timestamp", 
                    "format": "date-time"
                }, 
                "user": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "user"
                }, 
                "description": {
                    "type": "string", 
                    "description": "long description"
                }, 
                "severity": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "string", 
                    "description": "severity"
                }
            }, 
            "description": "Represents a Workflow run log entry"
        }, 
        "FieldReference": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "path": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "o11n-configuration": {
            "xml": {
                "name": "o11n-configuration"
            }, 
            "required": [
                "host", 
                "name", 
                "tenantId"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": "username to use for authentication"
                }, 
                "description": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "Configuration description", 
                    "maxLength": 2000
                }, 
                "embedded": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "systemDefault": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "id": {
                    "type": "string"
                }, 
                "host": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "vRO host", 
                    "maxLength": 255
                }, 
                "ssoMode": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "Indicates whether this condifuration is for sso mode or not"
                }, 
                "tenantId": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "the id of the tenant where this condifuration belongs to", 
                    "maxLength": 255
                }, 
                "password": {
                    "type": "string", 
                    "description": "user password to use for authentication"
                }, 
                "port": {
                    "type": "integer", 
                    "description": "vRO port", 
                    "format": "int32"
                }, 
                "name": {
                    "minLength": 0, 
                    "type": "string", 
                    "description": "Configuration name", 
                    "maxLength": 255
                }
            }, 
            "description": "Represents a Configuration for vCO server"
        }, 
        "ConditionalEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "cases": {
                            "xml": {
                                "name": "case"
                            }, 
                            "items": {
                                "$ref": "#/definitions/ConditionalEvaluatorCase"
                            }, 
                            "type": "array"
                        }, 
                        "defaulValue": {
                            "$ref": "#/definitions/Evaluator"
                        }
                    }
                }
            ]
        }, 
        "MinValueConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ReadOnlyConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "MultipleEvaluator": {
            "allOf": [
                {
                    "$ref": "#/definitions/Evaluator"
                }, 
                {
                    "required": [
                        "items"
                    ], 
                    "type": "object", 
                    "properties": {
                        "items": {
                            "items": {
                                "$ref": "#/definitions/Evaluator"
                            }, 
                            "type": "array"
                        }, 
                        "elementTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "enum": [
                                "STRING", 
                                "INTEGER", 
                                "DECIMAL", 
                                "MONEY", 
                                "MONEY_RANGE", 
                                "MONEY_TIME_RATE", 
                                "BOOLEAN", 
                                "ENTITY_REFERENCE", 
                                "DATE_TIME", 
                                "TIME_SPAN", 
                                "SECURE_STRING", 
                                "COMPLEX"
                            ], 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "MinCardinalityConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "integerLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "integerLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "integer", 
                            "description": "The integer value.", 
                            "format": "int64"
                        }
                    }, 
                    "description": "Wraps a signed 64-bit integer value."
                }
            ]
        }, 
        "timeSpan": {
            "xml": {
                "name": "timeSpan"
            }, 
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "amount": {
                    "xml": {
                        "attribute": true
                    }, 
                    "type": "integer", 
                    "description": "The amount for the time span.", 
                    "format": "int64"
                }, 
                "unit": {
                    "xml": {
                        "attribute": true
                    }, 
                    "enum": [
                        "MILLISECONDS", 
                        "SECONDS", 
                        "MINUTES", 
                        "HOURS", 
                        "DAYS", 
                        "WEEKS", 
                        "MONTHS", 
                        "YEARS"
                    ], 
                    "type": "string", 
                    "description": "The unit of measure for the time span. e.g: days."
                }
            }, 
            "description": "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days."
        }, 
        "o11n-inventoryType": {
            "xml": {
                "name": "o11n-inventoryType"
            }, 
            "type": "object", 
            "properties": {
                "pluginType": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string"
                }, 
                "pluginName": {
                    "type": "string"
                }, 
                "properties": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/o11n-inventoryTypeProperty"
                    }, 
                    "type": "array"
                }, 
                "icon": {
                    "$ref": "#/definitions/O11nIcon"
                }
            }
        }, 
        "o11n-logs": {
            "xml": {
                "name": "o11n-logs"
            }, 
            "required": [
                "logEntries"
            ], 
            "type": "object", 
            "properties": {
                "logEntries": {
                    "items": {
                        "$ref": "#/definitions/o11n-logEntry"
                    }, 
                    "type": "array", 
                    "description": "log entries"
                }
            }, 
            "description": "Represents a Workflow run logs. Contains list of o11n-logEntry."
        }, 
        "decimalLiteral": {
            "allOf": [
                {
                    "$ref": "#/definitions/literal"
                }, 
                {
                    "xml": {
                        "name": "decimalLiteral"
                    }, 
                    "type": "object", 
                    "properties": {
                        "value": {
                            "type": "number", 
                            "description": "The decimal value.", 
                            "format": "double"
                        }
                    }, 
                    "description": "Wraps a decimal value."
                }
            ]
        }, 
        "CriteriaOperator": {
            "discriminator": "type", 
            "type": "object"
        }, 
        "InternalConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "o11n-endpointMetadata": {
            "xml": {
                "name": "o11n-endpointMetadata"
            }, 
            "type": "object", 
            "properties": {
                "displayName": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "enabled": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "configurable": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "buildNumber": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "version": {
                    "type": "string"
                }, 
                "icon": {
                    "$ref": "#/definitions/O11nIcon"
                }
            }, 
            "description": "Represents an endpoint metadata (e.g. vRO plugin metadata)"
        }, 
        "DataType": {
            "discriminator": "type", 
            "type": "object", 
            "properties": {
                "typeId": {
                    "enum": [
                        "STRING", 
                        "INTEGER", 
                        "DECIMAL", 
                        "MONEY", 
                        "MONEY_RANGE", 
                        "MONEY_TIME_RATE", 
                        "BOOLEAN", 
                        "ENTITY_REFERENCE", 
                        "DATE_TIME", 
                        "TIME_SPAN", 
                        "SECURE_STRING", 
                        "COMPLEX"
                    ], 
                    "type": "string"
                }
            }
        }, 
        "EditableBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "DynamicPermissibleValueList": {
            "allOf": [
                {
                    "$ref": "#/definitions/PermissibleValueList"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "dependencies": {
                            "xml": {
                                "wrapped": true, 
                                "name": "dependency"
                            }, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "type": "string"
                            }
                        }, 
                        "context": {
                            "$ref": "#/definitions/DynamicValueContext"
                        }
                    }
                }
            ]
        }, 
        "EncryptedBehavior": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }, 
        "ObjectDataType": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataType"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "classId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentTypeId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "typeFilter": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "componentId": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }, 
                        "label": {
                            "xml": {
                                "attribute": true
                            }, 
                            "type": "string"
                        }
                    }
                }
            ]
        }, 
        "MinLengthConstraint": {
            "allOf": [
                {
                    "$ref": "#/definitions/Constraint"
                }, 
                {
                    "type": "object"
                }
            ]
        }
    }, 
    "swagger": "2.0"
}